{"version":3,"sources":["ngx-smart-modal.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","ngxSmartModal","core","common","this","NgxSmartModalService","modalStack","prototype","addModal","modalInstance","force","i","findIndex","o","id","modal","push","getModal","filter","open","instance","find","Error","close","getModalStack","getOpenedModals","modals","forEach","visible","getHigherIndex","index","layerPosition","Math","max","apply","getModalStackCount","length","removeModal","splice","setModalData","data","setData","getModalData","getData","resetModalData","removed","removeData","closeLatestModal","me","clearTimeout","debouncer","setTimeout","tmp","m","decorators","type","Injectable","ctorParameters","NgxSmartModalComponent","renderer","changeDetectorRef","ngxSmartModalService","closable","escapable","dismissable","customClass","backdrop","hideDelay","visibleChange","EventEmitter","onClose","onCloseFinished","onDismiss","onDismissFinished","onAnyCloseEvent","onAnyCloseEventFinished","onOpen","onEscape","onDataAdded","onDataRemoved","overlayVisible","openedClass","ngOnInit","identifier","ngOnDestroy","top","addClass","document","body","emit","removeClass","markForCheck","dismiss","e","target","classList","contains","addCustomClass","className","removeCustomClass","replace","trim","isVisible","hasData","_this","escapeKeyboardEvent","event","keyCode","Component","args","selector","template","Renderer2","ChangeDetectorRef","propDecorators","Input","Output","HostListener","NgxSmartModalModule","forRoot","ngModule","providers","forChild","NgModule","declarations","imports","CommonModule","Object","defineProperty","value"],"mappings":"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","file":"ngx-smart-modal.umd.min.js.map","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.ngxSmartModal = {}),global.ng.core,global.ng.common));\n}(this, (function (exports,core,common) { 'use strict';\n\n/**\n * @license ngx-smart-modal\n * MIT license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalService = (function () {\n    function NgxSmartModalService() {\n        this.modalStack = [];\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        if (force) {\n            var /** @type {?} */ i = this.modalStack.findIndex(function (o) {\n                return o.id === modalInstance.id;\n            });\n            if (i > -1) {\n                this.modalStack[i].modal = modalInstance.modal;\n            }\n            else {\n                this.modalStack.push(modalInstance);\n            }\n            return;\n        }\n        this.modalStack.push(modalInstance);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this.modalStack.filter(function (o) {\n            return o.id === id;\n        })[0].modal;\n    };\n    /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.open = /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        var /** @type {?} */ instance = this.modalStack.find(function (o) {\n            return o.id === id;\n        });\n        if (!!instance) {\n            instance.modal.open(force);\n        }\n        else {\n            throw new Error('Modal not found');\n        }\n    };\n    /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.close = /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ instance = this.modalStack.find(function (o) {\n            return o.id === id;\n        });\n        if (!!instance) {\n            instance.modal.close();\n        }\n        else {\n            throw new Error('Modal not found');\n        }\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this.modalStack;\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        var /** @type {?} */ modals = [];\n        this.modalStack.forEach(function (o) {\n            if (o.modal.visible) {\n                modals.push(o);\n            }\n        });\n        return modals;\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        var /** @type {?} */ index = [1041];\n        var /** @type {?} */ modals = this.getModalStack();\n        modals.forEach(function (o) {\n            index.push(o.modal.layerPosition);\n        });\n        return Math.max.apply(Math, index) + 1;\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this.modalStack.length;\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        var /** @type {?} */ i = this.modalStack.findIndex(function (o) {\n            return o.id === id;\n        });\n        if (i > -1) {\n            this.modalStack.splice(i, 1);\n        }\n    };\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    NgxSmartModalService.prototype.setModalData = /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    function (data, id, force) {\n        if (!!this.modalStack.find(function (o) {\n            return o.id === id;\n        })) {\n            this.getModal(id).setData(data, force);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    NgxSmartModalService.prototype.getModalData = /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    function (id) {\n        return this.getModal(id).getData();\n    };\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    NgxSmartModalService.prototype.resetModalData = /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    function (id) {\n        if (!!this.modalStack.find(function (o) {\n            return o.id === id;\n        })) {\n            var /** @type {?} */ removed = this.getModal(id).getData();\n            this.getModal(id).removeData();\n            return removed;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeLatestModal = /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ me = this;\n        clearTimeout(this.debouncer);\n        this.debouncer = setTimeout(function () {\n            var /** @type {?} */ tmp;\n            me.getOpenedModals().forEach(function (m) {\n                if (m.modal.layerPosition > (!!tmp ? tmp.modal.layerPosition : 0 && m.modal.escapable)) {\n                    tmp = m;\n                }\n            });\n            return !!tmp ? tmp.modal.close() : false;\n        }, 100);\n    };\n    NgxSmartModalService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalService.ctorParameters = function () { return []; };\n    return NgxSmartModalService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalComponent = (function () {\n    function NgxSmartModalComponent(renderer, changeDetectorRef, ngxSmartModalService) {\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        this.ngxSmartModalService = ngxSmartModalService;\n        this.closable = true;\n        this.escapable = true;\n        this.dismissable = true;\n        this.customClass = 'nsm-dialog-animation-fade';\n        this.visible = false;\n        this.backdrop = true;\n        this.force = true;\n        this.hideDelay = 500;\n        this.visibleChange = new core.EventEmitter();\n        this.onClose = new core.EventEmitter();\n        this.onCloseFinished = new core.EventEmitter();\n        this.onDismiss = new core.EventEmitter();\n        this.onDismissFinished = new core.EventEmitter();\n        this.onAnyCloseEvent = new core.EventEmitter();\n        this.onAnyCloseEventFinished = new core.EventEmitter();\n        this.onOpen = new core.EventEmitter();\n        this.onEscape = new core.EventEmitter();\n        this.onDataAdded = new core.EventEmitter();\n        this.onDataRemoved = new core.EventEmitter();\n        this.layerPosition = 1041;\n        this.overlayVisible = false;\n        this.openedClass = false;\n        this.data = null;\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.layerPosition += this.ngxSmartModalService.getModalStackCount();\n        this.ngxSmartModalService.addModal({ id: this.identifier, modal: this }, this.force);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.ngxSmartModalService.removeModal(this.identifier);\n    };\n    /**\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.open = /**\n     * @param {?=} top\n     * @return {?}\n     */\n    function (top) {\n        if (top) {\n            this.layerPosition = this.ngxSmartModalService.getHigherIndex();\n        }\n        this.renderer.addClass(document.body, 'dialog-open');\n        this.overlayVisible = true;\n        this.visible = true;\n        this.openedClass = true;\n        this.onOpen.emit(this);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.close = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ me = this;\n        this.openedClass = false;\n        this.onClose.emit(this);\n        this.onAnyCloseEvent.emit(this);\n        if (this.ngxSmartModalService.getOpenedModals().length < 2) {\n            this.renderer.removeClass(document.body, 'dialog-open');\n        }\n        setTimeout(function () {\n            me.visibleChange.emit(me.visible);\n            me.visible = false;\n            me.overlayVisible = false;\n            me.changeDetectorRef.markForCheck();\n            me.onCloseFinished.emit(me);\n            me.onAnyCloseEventFinished.emit(me);\n        }, this.hideDelay);\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.dismiss = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        var /** @type {?} */ me = this;\n        if (!this.dismissable) {\n            return;\n        }\n        if (e.target.classList.contains('overlay')) {\n            this.openedClass = false;\n            this.onDismiss.emit(this);\n            this.onAnyCloseEvent.emit(this);\n            if (this.ngxSmartModalService.getOpenedModals().length < 2) {\n                this.renderer.removeClass(document.body, 'dialog-open');\n            }\n            setTimeout(function () {\n                me.visible = false;\n                me.visibleChange.emit(me.visible);\n                me.overlayVisible = false;\n                me.changeDetectorRef.markForCheck();\n                me.onDismissFinished.emit(me);\n                me.onAnyCloseEventFinished.emit(me);\n            }, this.hideDelay);\n        }\n    };\n    /**\n     * @param {?} className\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.addCustomClass = /**\n     * @param {?} className\n     * @return {?}\n     */\n    function (className) {\n        if (!this.customClass.length) {\n            this.customClass = className;\n        }\n        else {\n            this.customClass += ' ' + className;\n        }\n    };\n    /**\n     * @param {?=} className\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.removeCustomClass = /**\n     * @param {?=} className\n     * @return {?}\n     */\n    function (className) {\n        if (className) {\n            this.customClass = this.customClass.replace(className, '').trim();\n        }\n        else {\n            this.customClass = '';\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.isVisible = /**\n     * @return {?}\n     */\n    function () {\n        return this.visible;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.hasData = /**\n     * @return {?}\n     */\n    function () {\n        return !!this.data;\n    };\n    /**\n     * @param {?} data\n     * @param {?=} force\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.setData = /**\n     * @param {?} data\n     * @param {?=} force\n     * @return {?}\n     */\n    function (data, force) {\n        var _this = this;\n        if (!this.data || (!!this.data && force)) {\n            setTimeout(function () {\n                _this.data = data;\n                _this.onDataAdded.emit(_this.data);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.getData = /**\n     * @return {?}\n     */\n    function () {\n        return this.data;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.removeData = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        setTimeout(function () {\n            _this.data = null;\n            _this.onDataRemoved.emit(true);\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.escapeKeyboardEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (event.keyCode === 27 && this.visible) {\n            if (!this.escapable) {\n                return false;\n            }\n            else {\n                this.onEscape.emit(this);\n                this.ngxSmartModalService.closeLatestModal();\n            }\n        }\n    };\n    NgxSmartModalComponent.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'ngx-smart-modal',\n                    template: \"\\n    <div *ngIf=\\\"overlayVisible\\\" class=\\\"overlay {{ openedClass ? 'nsm-overlay-open' : 'nsm-overlay-close'}}\\\"\\n         [style.z-index]=\\\"visible ? layerPosition-1 : -1\\\"\\n         [ngClass]=\\\"{'transparent':!backdrop}\\\"\\n         (click)=\\\"dismiss($event)\\\">\\n    </div>\\n    <div [style.z-index]=\\\"visible ? layerPosition : -1\\\"\\n         class=\\\"nsm-dialog {{ openedClass ? 'nsm-dialog-open' : 'nsm-dialog-close'}}\\\" [ngClass]=\\\"customClass\\\">\\n      <ng-content></ng-content>\\n      <button *ngIf=\\\"closable\\\" (click)=\\\"close()\\\" aria-label=\\\"Close\\\" class=\\\"nsm-dialog-btn-close\\\">\\n        <img\\n          src=\\\"data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA1MTIgNTEyIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MTIgNTEyOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgd2lkdGg9IjE2cHgiIGhlaWdodD0iMTZweCI+CjxnPgoJPGc+CgkJPHBhdGggZD0iTTUwNS45NDMsNi4wNThjLTguMDc3LTguMDc3LTIxLjE3Mi04LjA3Ny0yOS4yNDksMEw2LjA1OCw0NzYuNjkzYy04LjA3Nyw4LjA3Ny04LjA3NywyMS4xNzIsMCwyOS4yNDkgICAgQzEwLjA5Niw1MDkuOTgyLDE1LjM5LDUxMiwyMC42ODMsNTEyYzUuMjkzLDAsMTAuNTg2LTIuMDE5LDE0LjYyNS02LjA1OUw1MDUuOTQzLDM1LjMwNiAgICBDNTE0LjAxOSwyNy4yMyw1MTQuMDE5LDE0LjEzNSw1MDUuOTQzLDYuMDU4eiIgZmlsbD0iIzAwMDAwMCIvPgoJPC9nPgo8L2c+CjxnPgoJPGc+CgkJPHBhdGggZD0iTTUwNS45NDIsNDc2LjY5NEwzNS4zMDYsNi4wNTljLTguMDc2LTguMDc3LTIxLjE3Mi04LjA3Ny0yOS4yNDgsMGMtOC4wNzcsOC4wNzYtOC4wNzcsMjEuMTcxLDAsMjkuMjQ4bDQ3MC42MzYsNDcwLjYzNiAgICBjNC4wMzgsNC4wMzksOS4zMzIsNi4wNTgsMTQuNjI1LDYuMDU4YzUuMjkzLDAsMTAuNTg3LTIuMDE5LDE0LjYyNC02LjA1N0M1MTQuMDE4LDQ5Ny44NjYsNTE0LjAxOCw0ODQuNzcxLDUwNS45NDIsNDc2LjY5NHoiIGZpbGw9IiMwMDAwMDAiLz4KCTwvZz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K\\\"/>\\n      </button>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalComponent.ctorParameters = function () { return [\n        { type: core.Renderer2, },\n        { type: core.ChangeDetectorRef, },\n        { type: NgxSmartModalService, },\n    ]; };\n    NgxSmartModalComponent.propDecorators = {\n        \"closable\": [{ type: core.Input },],\n        \"escapable\": [{ type: core.Input },],\n        \"dismissable\": [{ type: core.Input },],\n        \"identifier\": [{ type: core.Input },],\n        \"customClass\": [{ type: core.Input },],\n        \"visible\": [{ type: core.Input },],\n        \"backdrop\": [{ type: core.Input },],\n        \"force\": [{ type: core.Input },],\n        \"hideDelay\": [{ type: core.Input },],\n        \"visibleChange\": [{ type: core.Output },],\n        \"onClose\": [{ type: core.Output },],\n        \"onCloseFinished\": [{ type: core.Output },],\n        \"onDismiss\": [{ type: core.Output },],\n        \"onDismissFinished\": [{ type: core.Output },],\n        \"onAnyCloseEvent\": [{ type: core.Output },],\n        \"onAnyCloseEventFinished\": [{ type: core.Output },],\n        \"onOpen\": [{ type: core.Output },],\n        \"onEscape\": [{ type: core.Output },],\n        \"onDataAdded\": [{ type: core.Output },],\n        \"onDataRemoved\": [{ type: core.Output },],\n        \"escapeKeyboardEvent\": [{ type: core.HostListener, args: ['document:keyup', ['$event'],] },],\n    };\n    return NgxSmartModalComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalModule = (function () {\n    function NgxSmartModalModule() {\n    }\n    /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forRoot = /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [NgxSmartModalService]\n        };\n    };\n    /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forChild = /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [NgxSmartModalService]\n        };\n    };\n    NgxSmartModalModule.decorators = [\n        { type: core.NgModule, args: [{\n                    declarations: [NgxSmartModalComponent],\n                    exports: [NgxSmartModalComponent],\n                    imports: [common.CommonModule]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalModule.ctorParameters = function () { return []; };\n    return NgxSmartModalModule;\n}());\n\nexports.NgxSmartModalService = NgxSmartModalService;\nexports.NgxSmartModalComponent = NgxSmartModalComponent;\nexports.NgxSmartModalModule = NgxSmartModalModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-smart-modal.umd.js.map\n"]}