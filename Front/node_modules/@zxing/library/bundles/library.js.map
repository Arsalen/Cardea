{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 17698234cba3875c0380","webpack:///./src/core/Exception.ts","webpack:///./src/core/util/System.ts","webpack:///./src/core/common/BitMatrix.ts","webpack:///./src/core/ResultPoint.ts","webpack:///./src/core/common/BitArray.ts","webpack:///./src/core/util/StringBuilder.ts","webpack:///./src/core/InvertedLuminanceSource.ts","webpack:///./src/core/LuminanceSource.ts","webpack:///./src/core/common/reedsolomon/GenericGF.ts","webpack:///./src/core/common/CharacterSetECI.ts","webpack:///./src/core/util/Integer.ts","webpack:///./src/core/common/detector/MathUtils.ts","webpack:///./src/core/common/reedsolomon/GenericGFPoly.ts","webpack:///./src/core/util/Arrays.ts","webpack:///./src/browser/VideoInputDevice.ts","webpack:///./src/core/qrcode/QRCodeReader.ts","webpack:///./src/core/qrcode/decoder/Version.ts","webpack:///./src/core/qrcode/decoder/ErrorCorrectionLevel.ts","webpack:///./src/core/common/PerspectiveTransform.ts","webpack:///./src/core/EncodeHintType.ts","webpack:///./src/browser/BrowserCodeReader.ts","webpack:///./src/core/BinaryBitmap.ts","webpack:///./src/core/common/HybridBinarizer.ts","webpack:///./src/core/common/GlobalHistogramBinarizer.ts","webpack:///./src/core/Binarizer.ts","webpack:///./src/browser/HTMLCanvasElementLuminanceSource.ts","webpack:///./src/core/Result.ts","webpack:///./src/core/ResultMetadataType.ts","webpack:///./src/core/common/reedsolomon/ReedSolomonDecoder.ts","webpack:///./src/core/qrcode/decoder/FormatInformation.ts","webpack:///./src/core/qrcode/decoder/QRCodeDecoderMetaData.ts","webpack:///./src/core/common/BitSource.ts","webpack:///./src/core/common/DecoderResult.ts","webpack:///./src/core/common/StringUtils.ts","webpack:///./src/core/qrcode/decoder/Mode.ts","webpack:///./src/core/util/StringEncoding.ts","webpack:///external {\"commonjs\":\"text-encoding\",\"commonjs2\":\"text-encoding\",\"amd\":\"text-encoding\",\"root\":\"text-encoding\"}","webpack:///./src/core/common/DetectorResult.ts","webpack:///./src/core/common/GridSamplerInstance.ts","webpack:///./src/core/common/DefaultGridSampler.ts","webpack:///./src/core/common/GridSampler.ts","webpack:///./src/core/qrcode/encoder/Encoder.ts","webpack:///./src/core/common/reedsolomon/ReedSolomonEncoder.ts","webpack:///./src/core/qrcode/encoder/MaskUtil.ts","webpack:///./src/core/qrcode/encoder/QRCode.ts","webpack:///./src/core/qrcode/QRCodeWriter.ts","webpack:///./src/index.ts","webpack:///./src/browser/BrowserQRCodeReader.ts","webpack:///./src/core/util/Float.ts","webpack:///./src/core/qrcode/decoder/Decoder.ts","webpack:///./src/core/qrcode/decoder/BitMatrixParser.ts","webpack:///./src/core/qrcode/decoder/ECBlocks.ts","webpack:///./src/core/qrcode/decoder/ECB.ts","webpack:///./src/core/qrcode/decoder/DataMask.ts","webpack:///./src/core/qrcode/decoder/DataBlock.ts","webpack:///./src/core/qrcode/decoder/DecodedBitStreamParser.ts","webpack:///./src/core/qrcode/detector/Detector.ts","webpack:///./src/core/qrcode/detector/FinderPatternFinder.ts","webpack:///./src/core/qrcode/detector/FinderPattern.ts","webpack:///./src/core/qrcode/detector/FinderPatternInfo.ts","webpack:///./src/core/qrcode/detector/AlignmentPatternFinder.ts","webpack:///./src/core/qrcode/detector/AlignmentPattern.ts","webpack:///./src/browser/BrowserQRCodeSvgWriter.ts","webpack:///./src/core/qrcode/encoder/ByteMatrix.ts","webpack:///./src/core/qrcode/encoder/MatrixUtil.ts","webpack:///./src/core/qrcode/encoder/BlockPair.ts","webpack:///./src/core/MultiFormatReader.ts","webpack:///./src/core/MultiFormatWriter.ts","webpack:///./src/core/PlanarYUVLuminanceSource.ts","webpack:///./src/core/RGBLuminanceSource.ts","webpack:///./src/core/common/detector/WhiteRectangleDetector.ts"],"names":[],"mappings":"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C,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAA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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"text-encoding\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Library\", [\"text-encoding\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Library\"] = factory(require(\"text-encoding\"));\n\telse\n\t\troot[\"Library\"] = factory(root[\"text-encoding\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_36__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 46);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 17698234cba3875c0380","export default class Exception {\r\n\r\n    public static IllegalArgumentException = 'IllegalArgumentException';\r\n    public static NotFoundException = 'NotFoundException';\r\n    public static ArithmeticException = 'ArithmeticException';\r\n    public static FormatException = 'FormatException';\r\n    public static ChecksumException = 'ChecksumException';\r\n    public static WriterException = 'WriterException';\r\n    public static IllegalStateException = 'IllegalStateException';\r\n    public static UnsupportedOperationException = 'UnsupportedOperationException';\r\n    public static ReedSolomonException = 'ReedSolomonException';\r\n    public static ArgumentException = 'ArgumentException';\r\n    public static ReaderException = 'ReaderException';\r\n\r\n    public constructor(private type: string, private message?: string) { }\r\n\r\n    public getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    public getMessage(): string | undefined {\r\n        return this.message;\r\n    }\r\n\r\n    public static isOfType(ex: any, type: string): boolean {\r\n        return ex.type === type;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Exception.ts","export default class System {\r\n    // public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)\r\n    public static arraycopy(src: any, srcPos: number, dest: any, destPos: number, length: number) {\r\n        // TODO: better use split or set?\r\n        let i = srcPos;\r\n        let j = destPos;\r\n        let c = length;\r\n        while (c--) {\r\n            dest[j++] = src[i++];\r\n        }\r\n    }\r\n\r\n    public static currentTimeMillis() {\r\n        return Date.now();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/System.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\n/*import java.util.Arrays;*/\r\nimport Exception from './../Exception';\r\nimport BitArray from './BitArray';\r\nimport System from './../util/System';\r\nimport Arrays from './../util/Arrays';\r\nimport StringBuilder from './../util/StringBuilder';\r\n\r\n/**\r\n * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\r\n * module, x is the column position, and y is the row position. The ordering is always x, y.\r\n * The origin is at the top-left.</p>\r\n *\r\n * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\r\n * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\r\n * efficiently.</p>\r\n *\r\n * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\r\n * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\r\n *\r\n * @author Sean Owen\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class BitMatrix /*implements Cloneable*/ {\r\n\r\n    /**\r\n     * Creates an empty square {@link BitMatrix}.\r\n     *\r\n     * @param dimension height and width\r\n     */\r\n    // public constructor(dimension: number /*int*/) {\r\n    //   this(dimension, dimension)\r\n    // }\r\n\r\n    /**\r\n     * Creates an empty {@link BitMatrix}.\r\n     *\r\n     * @param width bit matrix width\r\n     * @param height bit matrix height\r\n     */\r\n    // public constructor(width: number /*int*/, height: number /*int*/) {\r\n    //   if (width < 1 || height < 1) {\r\n    //     throw new Exception(Exception.IllegalArgumentException, \"Both dimensions must be greater than 0\")\r\n    //   }\r\n    //   this.width = width\r\n    //   this.height = height\r\n    //   this.rowSize = (width + 31) / 32\r\n    //   bits = new int[rowSize * height];\r\n    // }\r\n\r\n    public constructor(private width: number /*int*/, private height?: number /*int*/,\r\n        private rowSize?: number /*int*/, private bits?: Int32Array) {\r\n        if (undefined === height || null === height) {\r\n            height = width;\r\n        }\r\n        this.height = height;\r\n        if (width < 1 || height < 1) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Both dimensions must be greater than 0');\r\n        }\r\n        if (undefined === rowSize || null === rowSize) {\r\n            rowSize = Math.floor((width + 31) / 32);\r\n        }\r\n        this.rowSize = rowSize;\r\n        if (undefined === bits || null === bits) {\r\n            this.bits = new Int32Array(this.rowSize * this.height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\r\n     *\r\n     * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\r\n     * @return {@link BitMatrix} representation of image\r\n     */\r\n    public static parseFromBooleanArray(image: boolean[][]): BitMatrix {\r\n        const height = image.length;\r\n        const width = image[0].length;\r\n        const bits = new BitMatrix(width, height);\r\n        for (let i = 0; i < height; i++) {\r\n            const imageI = image[i];\r\n            for (let j = 0; j < width; j++) {\r\n                if (imageI[j]) {\r\n                    bits.set(j, i);\r\n                }\r\n            }\r\n        }\r\n        return bits;\r\n    }\r\n\r\n    public static parseFromString(stringRepresentation: string, setString: string, unsetString: string): BitMatrix {\r\n        if (stringRepresentation === null) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'stringRepresentation cannot be null');\r\n        }\r\n\r\n        const bits = new Array<boolean>(stringRepresentation.length);\r\n        let bitsPos = 0;\r\n        let rowStartPos = 0;\r\n        let rowLength = -1;\r\n        let nRows = 0;\r\n        let pos = 0;\r\n        while (pos < stringRepresentation.length) {\r\n            if (stringRepresentation.charAt(pos) === '\\n' ||\r\n                stringRepresentation.charAt(pos) === '\\r') {\r\n                if (bitsPos > rowStartPos) {\r\n                    if (rowLength === -1) {\r\n                        rowLength = bitsPos - rowStartPos;\r\n                    } else if (bitsPos - rowStartPos !== rowLength) {\r\n                        throw new Exception(Exception.IllegalArgumentException, 'row lengths do not match');\r\n                    }\r\n                    rowStartPos = bitsPos;\r\n                    nRows++;\r\n                }\r\n                pos++;\r\n            } else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\r\n                pos += setString.length;\r\n                bits[bitsPos] = true;\r\n                bitsPos++;\r\n            } else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\r\n                pos += unsetString.length;\r\n                bits[bitsPos] = false;\r\n                bitsPos++;\r\n            } else {\r\n                throw new Exception(Exception.IllegalArgumentException,\r\n                    'illegal character encountered: ' + stringRepresentation.substring(pos));\r\n            }\r\n        }\r\n\r\n        // no EOL at end?\r\n        if (bitsPos > rowStartPos) {\r\n            if (rowLength === -1) {\r\n                rowLength = bitsPos - rowStartPos;\r\n            } else if (bitsPos - rowStartPos !== rowLength) {\r\n                throw new Exception(Exception.IllegalArgumentException, 'row lengths do not match');\r\n            }\r\n            nRows++;\r\n        }\r\n\r\n        const matrix = new BitMatrix(rowLength, nRows);\r\n        for (let i = 0; i < bitsPos; i++) {\r\n            if (bits[i]) {\r\n                matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * <p>Gets the requested bit, where true means black.</p>\r\n     *\r\n     * @param x The horizontal component (i.e. which column)\r\n     * @param y The vertical component (i.e. which row)\r\n     * @return value of given bit in matrix\r\n     */\r\n    public get(x: number /*int*/, y: number /*int*/): boolean {\r\n        const offset = y * this.rowSize + Math.floor(x / 32);\r\n        return ((this.bits[offset] >>> (x & 0x1f)) & 1) !== 0;\r\n    }\r\n\r\n    /**\r\n     * <p>Sets the given bit to true.</p>\r\n     *\r\n     * @param x The horizontal component (i.e. which column)\r\n     * @param y The vertical component (i.e. which row)\r\n     */\r\n    public set(x: number /*int*/, y: number /*int*/): void {\r\n        const offset = y * this.rowSize + Math.floor(x / 32);\r\n        this.bits[offset] |= (1 << (x & 0x1f)) & 0xFFFFFFFF;\r\n    }\r\n\r\n    public unset(x: number /*int*/, y: number /*int*/): void {\r\n        const offset = y * this.rowSize + Math.floor(x / 32);\r\n        this.bits[offset] &= ~((1 << (x & 0x1f)) & 0xFFFFFFFF);\r\n    }\r\n\r\n    /**\r\n     * <p>Flips the given bit.</p>\r\n     *\r\n     * @param x The horizontal component (i.e. which column)\r\n     * @param y The vertical component (i.e. which row)\r\n     */\r\n    public flip(x: number /*int*/, y: number /*int*/): void {\r\n        const offset = y * this.rowSize + Math.floor(x / 32);\r\n        this.bits[offset] ^= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\r\n    }\r\n\r\n    /**\r\n     * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\r\n     * mask bit is set.\r\n     *\r\n     * @param mask XOR mask\r\n     */\r\n    public xor(mask: BitMatrix): void {\r\n        if (this.width !== mask.getWidth() || this.height !== mask.getHeight()\r\n            || this.rowSize !== mask.getRowSize()) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'input matrix dimensions do not match');\r\n        }\r\n        const rowArray = new BitArray(Math.floor(this.width / 32) + 1);\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n        for (let y = 0, height = this.height; y < height; y++) {\r\n            const offset = y * rowSize;\r\n            const row = mask.getRow(y, rowArray).getBitArray();\r\n            for (let x = 0; x < rowSize; x++) {\r\n                bits[offset + x] ^= row[x];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all bits (sets to false).\r\n     */\r\n    public clear(): void {\r\n        const bits = this.bits;\r\n        const max = bits.length;\r\n        for (let i = 0; i < max; i++) {\r\n            bits[i] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Sets a square region of the bit matrix to true.</p>\r\n     *\r\n     * @param left The horizontal position to begin at (inclusive)\r\n     * @param top The vertical position to begin at (inclusive)\r\n     * @param width The width of the region\r\n     * @param height The height of the region\r\n     */\r\n    public setRegion(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): void {\r\n        if (top < 0 || left < 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Left and top must be nonnegative');\r\n        }\r\n        if (height < 1 || width < 1) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Height and width must be at least 1');\r\n        }\r\n        const right = left + width;\r\n        const bottom = top + height;\r\n        if (bottom > this.height || right > this.width) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'The region must fit inside the matrix');\r\n        }\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n        for (let y = top; y < bottom; y++) {\r\n            const offset = y * rowSize;\r\n            for (let x = left; x < right; x++) {\r\n                bits[offset + Math.floor(x / 32)] |= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A fast method to retrieve one row of data from the matrix as a BitArray.\r\n     *\r\n     * @param y The row to retrieve\r\n     * @param row An optional caller-allocated BitArray, will be allocated if null or too small\r\n     * @return The resulting BitArray - this reference should always be used even when passing\r\n     *         your own row\r\n     */\r\n    public getRow(y: number /*int*/, row?: BitArray): BitArray {\r\n        if (row === null || row === undefined || row.getSize() < this.width) {\r\n            row = new BitArray(this.width);\r\n        } else {\r\n            row.clear();\r\n        }\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n        const offset = y * rowSize;\r\n        for (let x = 0; x < rowSize; x++) {\r\n            row.setBulk(x * 32, bits[offset + x]);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    /**\r\n     * @param y row to set\r\n     * @param row {@link BitArray} to copy from\r\n     */\r\n    public setRow(y: number /*int*/, row: BitArray): void {\r\n        System.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\r\n    }\r\n\r\n    /**\r\n     * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\r\n     */\r\n    public rotate180(): void {\r\n        const width = this.getWidth();\r\n        const height = this.getHeight();\r\n        let topRow = new BitArray(width);\r\n        let bottomRow = new BitArray(width);\r\n        for (let i = 0, length = Math.floor((height + 1) / 2); i < length; i++) {\r\n            topRow = this.getRow(i, topRow);\r\n            bottomRow = this.getRow(height - 1 - i, bottomRow);\r\n            topRow.reverse();\r\n            bottomRow.reverse();\r\n            this.setRow(i, bottomRow);\r\n            this.setRow(height - 1 - i, topRow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\r\n     *\r\n     * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\r\n     */\r\n    public getEnclosingRectangle(): Int32Array {\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n\r\n        let left = width;\r\n        let top = height;\r\n        let right = -1;\r\n        let bottom = -1;\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x32 = 0; x32 < rowSize; x32++) {\r\n                const theBits = bits[y * rowSize + x32];\r\n                if (theBits !== 0) {\r\n                    if (y < top) {\r\n                        top = y;\r\n                    }\r\n                    if (y > bottom) {\r\n                        bottom = y;\r\n                    }\r\n                    if (x32 * 32 < left) {\r\n                        let bit = 0;\r\n                        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\r\n                            bit++;\r\n                        }\r\n                        if ((x32 * 32 + bit) < left) {\r\n                            left = x32 * 32 + bit;\r\n                        }\r\n                    }\r\n                    if (x32 * 32 + 31 > right) {\r\n                        let bit = 31;\r\n                        while ((theBits >>> bit) === 0) {\r\n                            bit--;\r\n                        }\r\n                        if ((x32 * 32 + bit) > right) {\r\n                            right = x32 * 32 + bit;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (right < left || bottom < top) {\r\n            return null;\r\n        }\r\n\r\n        return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\r\n    }\r\n\r\n    /**\r\n     * This is useful in detecting a corner of a 'pure' barcode.\r\n     *\r\n     * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\r\n     */\r\n    public getTopLeftOnBit(): Int32Array {\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n\r\n        let bitsOffset = 0;\r\n        while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\r\n            bitsOffset++;\r\n        }\r\n        if (bitsOffset === bits.length) {\r\n            return null;\r\n        }\r\n        const y = bitsOffset / rowSize;\r\n        let x = (bitsOffset % rowSize) * 32;\r\n\r\n        const theBits = bits[bitsOffset];\r\n        let bit = 0;\r\n        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\r\n            bit++;\r\n        }\r\n        x += bit;\r\n        return Int32Array.from([x, y]);\r\n    }\r\n\r\n    public getBottomRightOnBit(): Int32Array {\r\n        const rowSize = this.rowSize;\r\n        const bits = this.bits;\r\n\r\n        let bitsOffset = bits.length - 1;\r\n        while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\r\n            bitsOffset--;\r\n        }\r\n        if (bitsOffset < 0) {\r\n            return null;\r\n        }\r\n\r\n        const y = Math.floor(bitsOffset / rowSize);\r\n        let x = Math.floor(bitsOffset % rowSize) * 32;\r\n\r\n        const theBits = bits[bitsOffset];\r\n        let bit = 31;\r\n        while ((theBits >>> bit) === 0) {\r\n            bit--;\r\n        }\r\n        x += bit;\r\n\r\n        return Int32Array.from([x, y]);\r\n    }\r\n\r\n    /**\r\n     * @return The width of the matrix\r\n     */\r\n    public getWidth(): number /*int*/ {\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * @return The height of the matrix\r\n     */\r\n    public getHeight(): number /*int*/ {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * @return The row size of the matrix\r\n     */\r\n    public getRowSize(): number /*int*/ {\r\n        return this.rowSize;\r\n    }\r\n\r\n    /*@Override*/\r\n    public equals(o: Object): boolean {\r\n        if (!(o instanceof BitMatrix)) {\r\n            return false;\r\n        }\r\n        const other = <BitMatrix>o;\r\n        return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize &&\r\n            Arrays.equals(this.bits, other.bits);\r\n    }\r\n\r\n    /*@Override*/\r\n    public hashCode(): number /*int*/ {\r\n        let hash = this.width;\r\n        hash = 31 * hash + this.width;\r\n        hash = 31 * hash + this.height;\r\n        hash = 31 * hash + this.rowSize;\r\n        hash = 31 * hash + Arrays.hashCode(this.bits);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * @return string representation using \"X\" for set and \" \" for unset bits\r\n     */\r\n    /*@Override*/\r\n    // public toString(): string {\r\n    //   return toString(\": \"X, \"  \")\r\n    // }\r\n\r\n    /**\r\n     * @param setString representation of a set bit\r\n     * @param unsetString representation of an unset bit\r\n     * @return string representation of entire matrix utilizing given strings\r\n     */\r\n    // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\r\n    //   return this.buildToString(setString, unsetString, \"\\n\")\r\n    // }\r\n\r\n    /**\r\n     * @param setString representation of a set bit\r\n     * @param unsetString representation of an unset bit\r\n     * @param lineSeparator newline character in string representation\r\n     * @return string representation of entire matrix utilizing given strings and line separator\r\n     * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\r\n     */\r\n    // @Deprecated\r\n    public toString(setString: string = 'x', unsetString: string = ' ', lineSeparator: string = '\\n'): string {\r\n        return this.buildToString(setString, unsetString, lineSeparator);\r\n    }\r\n\r\n    private buildToString(setString: string, unsetString: string, lineSeparator: string) {\r\n        let result = new StringBuilder();\r\n        result.append(lineSeparator);\r\n        for (let y = 0, height = this.height; y < height; y++) {\r\n            for (let x = 0, width = this.width; x < width; x++) {\r\n                result.append(this.get(x, y) ? setString : unsetString);\r\n            }\r\n            result.append(lineSeparator);\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    /*@Override*/\r\n    public clone(): BitMatrix {\r\n        return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/BitMatrix.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport MathUtils from './common/detector/MathUtils';\r\nimport Float from './util/Float';\r\n\r\n/**\r\n * <p>Encapsulates a point of interest in an image containing a barcode. Typically, this\r\n * would be the location of a finder pattern or the corner of the barcode, for example.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class ResultPoint {\r\n\r\n    public constructor(private x: number/*float*/, private y: number/*float*/) { }\r\n\r\n    public getX(): number/*float*/ {\r\n        return this.x;\r\n    }\r\n\r\n    public getY(): number/*float*/ {\r\n        return this.y;\r\n    }\r\n\r\n    /*@Override*/\r\n    public equals(other: Object): boolean {\r\n        if (other instanceof ResultPoint) {\r\n            const otherPoint = <ResultPoint>other;\r\n            return this.x === otherPoint.x && this.y === otherPoint.y;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*@Override*/\r\n    public hashCode(): number /*int*/ {\r\n        return 31 * Float.floatToIntBits(this.x) + Float.floatToIntBits(this.y);\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        return '(' + this.x + ',' + this.y + ')';\r\n    }\r\n\r\n    /**\r\n     * Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC\r\n     * and BC is less than AC, and the angle between BC and BA is less than 180 degrees.\r\n     *\r\n     * @param patterns array of three {@code ResultPoint} to order\r\n     */\r\n    public static orderBestPatterns(patterns: Array<ResultPoint>): void {\r\n\r\n        // Find distances between pattern centers\r\n        const zeroOneDistance = this.distance(patterns[0], patterns[1]);\r\n        const oneTwoDistance = this.distance(patterns[1], patterns[2]);\r\n        const zeroTwoDistance = this.distance(patterns[0], patterns[2]);\r\n\r\n        let pointA: ResultPoint;\r\n        let pointB: ResultPoint;\r\n        let pointC: ResultPoint;\r\n        // Assume one closest to other two is B; A and C will just be guesses at first\r\n        if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {\r\n            pointB = patterns[0];\r\n            pointA = patterns[1];\r\n            pointC = patterns[2];\r\n        } else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {\r\n            pointB = patterns[1];\r\n            pointA = patterns[0];\r\n            pointC = patterns[2];\r\n        } else {\r\n            pointB = patterns[2];\r\n            pointA = patterns[0];\r\n            pointC = patterns[1];\r\n        }\r\n\r\n        // Use cross product to figure out whether A and C are correct or flipped.\r\n        // This asks whether BC x BA has a positive z component, which is the arrangement\r\n        // we want for A, B, C. If it's negative, then we've got it flipped around and\r\n        // should swap A and C.\r\n        if (this.crossProductZ(pointA, pointB, pointC) < 0.0) {\r\n            const temp = pointA;\r\n            pointA = pointC;\r\n            pointC = temp;\r\n        }\r\n\r\n        patterns[0] = pointA;\r\n        patterns[1] = pointB;\r\n        patterns[2] = pointC;\r\n    }\r\n\r\n    /**\r\n     * @param pattern1 first pattern\r\n     * @param pattern2 second pattern\r\n     * @return distance between two points\r\n     */\r\n    public static distance(pattern1: ResultPoint, pattern2: ResultPoint): number/*float*/ {\r\n        return MathUtils.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);\r\n    }\r\n\r\n    /**\r\n     * Returns the z component of the cross product between vectors BC and BA.\r\n     */\r\n    private static crossProductZ(pointA: ResultPoint,\r\n        pointB: ResultPoint,\r\n        pointC: ResultPoint): number/*float*/ {\r\n        const bX = pointB.x;\r\n        const bY = pointB.y;\r\n        return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ResultPoint.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\n/*import java.util.Arrays;*/\r\n\r\nimport System from './../util/System';\r\nimport Integer from './../util/Integer';\r\nimport Arrays from './../util/Arrays';\r\nimport Exception from './../Exception';\r\n\r\n/**\r\n * <p>A simple, fast array of bits, represented compactly by an array of ints internally.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class BitArray /*implements Cloneable*/ {\r\n\r\n    private size: number;\r\n    private bits: Int32Array;\r\n\r\n    // public constructor() {\r\n    //   this.size = 0\r\n    //   this.bits = new Int32Array(1)\r\n    // }\r\n\r\n    // public constructor(size?: number /*int*/) {\r\n    //   if (undefined === size) {\r\n    //     this.size = 0\r\n    //   } else {\r\n    //     this.size = size\r\n    //   }\r\n    //   this.bits = this.makeArray(size)\r\n    // }\r\n\r\n    // For testing only\r\n    public constructor(size?: number /*int*/, bits?: Int32Array) {\r\n        if (undefined === size) {\r\n            this.size = 0;\r\n            this.bits = new Int32Array(1);\r\n        } else {\r\n            this.size = size;\r\n            if (undefined === bits || null === bits) {\r\n                this.bits = BitArray.makeArray(size);\r\n            } else {\r\n                this.bits = bits;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getSize(): number /*int*/ {\r\n        return this.size;\r\n    }\r\n\r\n    public getSizeInBytes(): number /*int*/ {\r\n        return Math.floor((this.size + 7) / 8);\r\n    }\r\n\r\n    private ensureCapacity(size: number /*int*/): void {\r\n        if (size > this.bits.length * 32) {\r\n            const newBits = BitArray.makeArray(size);\r\n            System.arraycopy(this.bits, 0, newBits, 0, this.bits.length);\r\n            this.bits = newBits;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param i bit to get\r\n     * @return true iff bit i is set\r\n     */\r\n    public get(i: number /*int*/): boolean {\r\n        return (this.bits[Math.floor(i / 32)] & (1 << (i & 0x1F))) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sets bit i.\r\n     *\r\n     * @param i bit to set\r\n     */\r\n    public set(i: number /*int*/): void {\r\n        this.bits[Math.floor(i / 32)] |= 1 << (i & 0x1F);\r\n    }\r\n\r\n    /**\r\n     * Flips bit i.\r\n     *\r\n     * @param i bit to set\r\n     */\r\n    public flip(i: number /*int*/): void {\r\n        this.bits[Math.floor(i / 32)] ^= 1 << (i & 0x1F);\r\n    }\r\n\r\n    /**\r\n     * @param from first bit to check\r\n     * @return index of first bit that is set, starting from the given index, or size if none are set\r\n     *  at or beyond this given index\r\n     * @see #getNextUnset(int)\r\n     */\r\n    public getNextSet(from: number /*int*/): number /*int*/ {\r\n        const size = this.size;\r\n        if (from >= size) {\r\n            return size;\r\n        }\r\n        const bits = this.bits;\r\n        let bitsOffset = Math.floor(from / 32);\r\n        let currentBits = bits[bitsOffset];\r\n        // mask off lesser bits first\r\n        currentBits &= ~((1 << (from & 0x1F)) - 1);\r\n        const length = bits.length;\r\n        while (currentBits === 0) {\r\n            if (++bitsOffset === length) {\r\n                return size;\r\n            }\r\n            currentBits = bits[bitsOffset];\r\n        }\r\n        const result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\r\n        return result > size ? size : result;\r\n    }\r\n\r\n    /**\r\n     * @param from index to start looking for unset bit\r\n     * @return index of next unset bit, or {@code size} if none are unset until the end\r\n     * @see #getNextSet(int)\r\n     */\r\n    public getNextUnset(from: number /*int*/): number /*int*/ {\r\n        const size = this.size;\r\n        if (from >= size) {\r\n            return size;\r\n        }\r\n        const bits = this.bits;\r\n        let bitsOffset = Math.floor(from / 32);\r\n        let currentBits = ~bits[bitsOffset];\r\n        // mask off lesser bits first\r\n        currentBits &= ~((1 << (from & 0x1F)) - 1);\r\n        const length = bits.length;\r\n        while (currentBits === 0) {\r\n            if (++bitsOffset === length) {\r\n                return size;\r\n            }\r\n            currentBits = ~bits[bitsOffset];\r\n        }\r\n        const result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\r\n        return result > size ? size : result;\r\n    }\r\n\r\n    /**\r\n     * Sets a block of 32 bits, starting at bit i.\r\n     *\r\n     * @param i first bit to set\r\n     * @param newBits the new value of the next 32 bits. Note again that the least-significant bit\r\n     * corresponds to bit i, the next-least-significant to i+1, and so on.\r\n     */\r\n    public setBulk(i: number /*int*/, newBits: number /*int*/): void {\r\n        this.bits[Math.floor(i / 32)] = newBits;\r\n    }\r\n\r\n    /**\r\n     * Sets a range of bits.\r\n     *\r\n     * @param start start of range, inclusive.\r\n     * @param end end of range, exclusive\r\n     */\r\n    public setRange(start: number /*int*/, end: number /*int*/): void {\r\n        if (end < start || start < 0 || end > this.size) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        if (end === start) {\r\n            return;\r\n        }\r\n        end--; // will be easier to treat this as the last actually set bit -- inclusive\r\n        const firstInt = Math.floor(start / 32);\r\n        const lastInt = Math.floor(end / 32);\r\n        const bits = this.bits;\r\n        for (let i = firstInt; i <= lastInt; i++) {\r\n            const firstBit = i > firstInt ? 0 : start & 0x1F;\r\n            const lastBit = i < lastInt ? 31 : end & 0x1F;\r\n            // Ones from firstBit to lastBit, inclusive\r\n            const mask = (2 << lastBit) - (1 << firstBit);\r\n            bits[i] |= mask;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all bits (sets to false).\r\n     */\r\n    public clear(): void {\r\n        const max = this.bits.length;\r\n        const bits = this.bits;\r\n        for (let i = 0; i < max; i++) {\r\n            bits[i] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Efficient method to check if a range of bits is set, or not set.\r\n     *\r\n     * @param start start of range, inclusive.\r\n     * @param end end of range, exclusive\r\n     * @param value if true, checks that bits in range are set, otherwise checks that they are not set\r\n     * @return true iff all bits are set or not set in range, according to value argument\r\n     * @throws IllegalArgumentException if end is less than start or the range is not contained in the array\r\n     */\r\n    public isRange(start: number /*int*/, end: number /*int*/, value: boolean): boolean {\r\n        if (end < start || start < 0 || end > this.size) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        if (end === start) {\r\n            return true; // empty range matches\r\n        }\r\n        end--; // will be easier to treat this as the last actually set bit -- inclusive\r\n        const firstInt = Math.floor(start / 32);\r\n        const lastInt = Math.floor(end / 32);\r\n        const bits = this.bits;\r\n        for (let i = firstInt; i <= lastInt; i++) {\r\n            const firstBit = i > firstInt ? 0 : start & 0x1F;\r\n            const lastBit = i < lastInt ? 31 : end & 0x1F;\r\n            // Ones from firstBit to lastBit, inclusive\r\n            const mask = (2 << lastBit) - (1 << firstBit) & 0xFFFFFFFF;\r\n            // TYPESCRIPTPORT: & 0xFFFFFFFF added to discard anything after 32 bits, as ES has 53 bits\r\n            // Return false if we're looking for 1s and the masked bits[i] isn't all 1s (is: that,\r\n            // equals the mask, or we're looking for 0s and the masked portion is not all 0s\r\n            if ((bits[i] & mask) !== (value ? mask : 0)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public appendBit(bit: boolean): void {\r\n        this.ensureCapacity(this.size + 1);\r\n        if (bit) {\r\n            this.bits[Math.floor(this.size / 32)] |= 1 << (this.size & 0x1F);\r\n        }\r\n        this.size++;\r\n    }\r\n\r\n    /**\r\n     * Appends the least-significant bits, from value, in order from most-significant to\r\n     * least-significant. For example, appending 6 bits from 0x000001E will append the bits\r\n     * 0, 1, 1, 1, 1, 0 in that order.\r\n     *\r\n     * @param value {@code int} containing bits to append\r\n     * @param numBits bits from value to append\r\n     */\r\n    public appendBits(value: number /*int*/, numBits: number /*int*/): void {\r\n        if (numBits < 0 || numBits > 32) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Num bits must be between 0 and 32');\r\n        }\r\n        this.ensureCapacity(this.size + numBits);\r\n        const appendBit = this.appendBit;\r\n        for (let numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {\r\n            this.appendBit(((value >> (numBitsLeft - 1)) & 0x01) === 1);\r\n        }\r\n    }\r\n\r\n    public appendBitArray(other: BitArray): void {\r\n        const otherSize = other.size;\r\n        this.ensureCapacity(this.size + otherSize);\r\n        const appendBit = this.appendBit;\r\n        for (let i = 0; i < otherSize; i++) {\r\n            this.appendBit(other.get(i));\r\n        }\r\n    }\r\n\r\n    public xor(other: BitArray): void {\r\n        if (this.size !== other.size) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Sizes don\\'t match');\r\n        }\r\n        const bits = this.bits;\r\n        for (let i = 0, length = bits.length; i < length; i++) {\r\n            // The last int could be incomplete (i.e. not have 32 bits in\r\n            // it) but there is no problem since 0 XOR 0 == 0.\r\n            bits[i] ^= other.bits[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param bitOffset first bit to start writing\r\n     * @param array array to write into. Bytes are written most-significant byte first. This is the opposite\r\n     *  of the internal representation, which is exposed by {@link #getBitArray()}\r\n     * @param offset position in array to start writing\r\n     * @param numBytes how many bytes to write\r\n     */\r\n    public toBytes(bitOffset: number /*int*/, array: Uint8Array, offset: number /*int*/, numBytes: number /*int*/): void {\r\n        for (let i = 0; i < numBytes; i++) {\r\n            let theByte = 0;\r\n            for (let j = 0; j < 8; j++) {\r\n                if (this.get(bitOffset)) {\r\n                    theByte |= 1 << (7 - j);\r\n                }\r\n                bitOffset++;\r\n            }\r\n            array[offset + i] = /*(byte)*/ theByte;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return underlying array of ints. The first element holds the first 32 bits, and the least\r\n     *         significant bit is bit 0.\r\n     */\r\n    public getBitArray(): Int32Array {\r\n        return this.bits;\r\n    }\r\n\r\n    /**\r\n     * Reverses all bits in the array.\r\n     */\r\n    public reverse(): void {\r\n        const newBits = new Int32Array(this.bits.length);\r\n        // reverse all int's first\r\n        const len = Math.floor((this.size - 1) / 32);\r\n        const oldBitsLen = len + 1;\r\n        const bits = this.bits;\r\n        for (let i = 0; i < oldBitsLen; i++) {\r\n            let x = bits[i];\r\n            x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);\r\n            x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);\r\n            x = ((x >> 4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) << 4);\r\n            x = ((x >> 8) & 0x00ff00ff) | ((x & 0x00ff00ff) << 8);\r\n            x = ((x >> 16) & 0x0000ffff) | ((x & 0x0000ffff) << 16);\r\n            newBits[len - i] = /*(int)*/ x;\r\n        }\r\n        // now correct the int's if the bit size isn't a multiple of 32\r\n        if (this.size !== oldBitsLen * 32) {\r\n            const leftOffset = oldBitsLen * 32 - this.size;\r\n            let currentInt = newBits[0] >>> leftOffset;\r\n            for (let i = 1; i < oldBitsLen; i++) {\r\n                const nextInt = newBits[i];\r\n                currentInt |= nextInt << (32 - leftOffset);\r\n                newBits[i - 1] = currentInt;\r\n                currentInt = nextInt >>> leftOffset;\r\n            }\r\n            newBits[oldBitsLen - 1] = currentInt;\r\n        }\r\n        this.bits = newBits;\r\n    }\r\n\r\n    private static makeArray(size: number /*int*/): Int32Array {\r\n        return new Int32Array(Math.floor((size + 31) / 32));\r\n    }\r\n\r\n    /*@Override*/\r\n    public equals(o: any): boolean {\r\n        if (!(o instanceof BitArray)) {\r\n            return false;\r\n        }\r\n        const other = <BitArray>o;\r\n        return this.size === other.size && Arrays.equals(this.bits, other.bits);\r\n    }\r\n\r\n    /*@Override*/\r\n    public hashCode(): number /*int*/ {\r\n        return 31 * this.size + Arrays.hashCode(this.bits);\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        let result = '';\r\n        for (let i = 0, size = this.size; i < size; i++) {\r\n            if ((i & 0x07) === 0) {\r\n                result += ' ';\r\n            }\r\n            result += this.get(i) ? 'X' : '.';\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /*@Override*/\r\n    public clone(): BitArray {\r\n        return new BitArray(this.size, this.bits.slice());\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/BitArray.ts","export default class StringBuilder {\r\n    public constructor(private value: string = '') {\r\n\r\n    }\r\n    public append(s: string | number): StringBuilder {\r\n        if (typeof s === 'string') {\r\n            this.value += s.toString();\r\n        } else {\r\n            this.value += String.fromCharCode(s);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public length(): number {\r\n        return this.value.length;\r\n    }\r\n\r\n    public charAt(n: number): string {\r\n        return this.value.charAt(n);\r\n    }\r\n\r\n    public deleteCharAt(n: number) {\r\n        this.value = this.value.substr(0, n) + this.value.substring(n + 1);\r\n    }\r\n\r\n    public setCharAt(n: number, c: string) {\r\n        this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/StringBuilder.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport LuminanceSource from './LuminanceSource';\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/**\r\n * A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes\r\n * white and vice versa, and each value becomes (255-value).\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class InvertedLuminanceSource extends LuminanceSource {\r\n\r\n    public constructor(private delegate: LuminanceSource) {\r\n        super(delegate.getWidth(), delegate.getHeight());\r\n    }\r\n\r\n    /*@Override*/\r\n    public getRow(y: number /*int*/, row?: Uint8ClampedArray): Uint8ClampedArray {\r\n        const sourceRow = this.delegate.getRow(y, row);\r\n        const width: number /*int*/ = this.getWidth();\r\n        for (let i = 0; i < width; i++) {\r\n            sourceRow[i] = /*(byte)*/ (255 - (sourceRow[i] & 0xFF));\r\n        }\r\n        return sourceRow;\r\n    }\r\n\r\n    /*@Override*/\r\n    public getMatrix(): Uint8ClampedArray {\r\n\r\n        const matrix: Uint8ClampedArray = this.delegate.getMatrix();\r\n        const length: number /*int*/ = this.getWidth() * this.getHeight();\r\n        const invertedMatrix = new Uint8ClampedArray(length);\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            invertedMatrix[i] = /*(byte)*/ (255 - (matrix[i] & 0xFF));\r\n        }\r\n\r\n        return invertedMatrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public isCropSupported(): boolean {\r\n        return this.delegate.isCropSupported();\r\n    }\r\n\r\n    /*@Override*/\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): LuminanceSource {\r\n        return new InvertedLuminanceSource(this.delegate.crop(left, top, width, height));\r\n    }\r\n\r\n    /*@Override*/\r\n    public isRotateSupported(): boolean {\r\n        return this.delegate.isRotateSupported();\r\n    }\r\n\r\n    /**\r\n     * @return original delegate {@link LuminanceSource} since invert undoes itself\r\n     */\r\n    /*@Override*/\r\n    public invert(): LuminanceSource {\r\n        return this.delegate;\r\n    }\r\n\r\n    /*@Override*/\r\n    public rotateCounterClockwise(): LuminanceSource {\r\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise());\r\n    }\r\n\r\n    /*@Override*/\r\n    public rotateCounterClockwise45(): LuminanceSource {\r\n        return new InvertedLuminanceSource(this.delegate.rotateCounterClockwise45());\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/InvertedLuminanceSource.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Exception from './Exception';\r\nimport InvertedLuminanceSource from './InvertedLuminanceSource';\r\nimport StringBuilder from './util/StringBuilder';\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/**\r\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\r\n * platforms into a standard interface for requesting greyscale luminance values. The interface\r\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\r\n * that one Reader does not modify the original luminance source and leave it in an unknown state\r\n * for other Readers in the chain.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nabstract class LuminanceSource {\r\n\r\n    protected constructor(private width: number /*int*/, private height: number /*int*/) { }\r\n\r\n    /**\r\n     * Fetches one row of luminance data from the underlying platform's bitmap. Values range from\r\n     * 0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have\r\n     * to bitwise and with 0xff for each value. It is preferable for implementations of this method\r\n     * to only fetch this row rather than the whole image, since no 2D Readers may be installed and\r\n     * getMatrix() may never be called.\r\n     *\r\n     * @param y The row to fetch, which must be in [0,getHeight())\r\n     * @param row An optional preallocated array. If null or too small, it will be ignored.\r\n     *            Always use the returned object, and ignore the .length of the array.\r\n     * @return An array containing the luminance data.\r\n     */\r\n    public abstract getRow(y: number /*int*/, row?: Uint8ClampedArray): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Fetches luminance data for the underlying bitmap. Values should be fetched using:\r\n     * {@code int luminance = array[y * width + x] & 0xff}\r\n     *\r\n     * @return A row-major 2D array of luminance values. Do not use result.length as it may be\r\n     *         larger than width * height bytes on some platforms. Do not modify the contents\r\n     *         of the result.\r\n     */\r\n    public abstract getMatrix(): Uint8ClampedArray;\r\n\r\n    /**\r\n     * @return The width of the bitmap.\r\n     */\r\n    public getWidth(): number /*int*/ {\r\n        return this.width;\r\n    }\r\n\r\n    /**\r\n     * @return The height of the bitmap.\r\n     */\r\n    public getHeight(): number /*int*/ {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * @return Whether this subclass supports cropping.\r\n     */\r\n    public isCropSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a new object with cropped image data. Implementations may keep a reference to the\r\n     * original data rather than a copy. Only callable if isCropSupported() is true.\r\n     *\r\n     * @param left The left coordinate, which must be in [0,getWidth())\r\n     * @param top The top coordinate, which must be in [0,getHeight())\r\n     * @param width The width of the rectangle to crop.\r\n     * @param height The height of the rectangle to crop.\r\n     * @return A cropped version of this object.\r\n     */\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): LuminanceSource {\r\n        throw new Exception(Exception.UnsupportedOperationException, 'This luminance source does not support cropping.');\r\n    }\r\n\r\n    /**\r\n     * @return Whether this subclass supports counter-clockwise rotation.\r\n     */\r\n    public isRotateSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @return a wrapper of this {@code LuminanceSource} which inverts the luminances it returns -- black becomes\r\n     *  white and vice versa, and each value becomes (255-value).\r\n     */\r\n    public abstract invert(): LuminanceSource;\r\n\r\n    /**\r\n     * Returns a new object with rotated image data by 90 degrees counterclockwise.\r\n     * Only callable if {@link #isRotateSupported()} is true.\r\n     *\r\n     * @return A rotated version of this object.\r\n     */\r\n    public rotateCounterClockwise(): LuminanceSource {\r\n        throw new Exception(Exception.UnsupportedOperationException, 'This luminance source does not support rotation by 90 degrees.');\r\n    }\r\n\r\n    /**\r\n     * Returns a new object with rotated image data by 45 degrees counterclockwise.\r\n     * Only callable if {@link #isRotateSupported()} is true.\r\n     *\r\n     * @return A rotated version of this object.\r\n     */\r\n    public rotateCounterClockwise45(): LuminanceSource {\r\n        throw new Exception(Exception.UnsupportedOperationException, 'This luminance source does not support rotation by 45 degrees.');\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        const row = new Uint8ClampedArray(this.width);\r\n        let result = new StringBuilder();\r\n        for (let y = 0; y < this.height; y++) {\r\n            const sourceRow = this.getRow(y, row);\r\n            for (let x = 0; x < this.width; x++) {\r\n                const luminance = sourceRow[x] & 0xFF;\r\n                let c;\r\n                if (luminance < 0x40) {\r\n                    c = '#';\r\n                } else if (luminance < 0x80) {\r\n                    c = '+';\r\n                } else if (luminance < 0xC0) {\r\n                    c = '.';\r\n                } else {\r\n                    c = ' ';\r\n                }\r\n                result.append(c);\r\n            }\r\n            result.append('\\n');\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n}\r\n\r\nexport default LuminanceSource;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/LuminanceSource.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.reedsolomon {*/\r\n\r\nimport GenericGFPoly from './GenericGFPoly';\r\nimport Exception from './../../Exception';\r\nimport Integer from './../../util/Integer';\r\n\r\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\r\nexport default class GenericGF {\r\n\r\n    public static AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\r\n    public static AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\r\n    public static AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\r\n    public static AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\r\n    public static QR_CODE_FIELD_256 = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\r\n    public static DATA_MATRIX_FIELD_256 = new GenericGF(0x012D, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\r\n    public static AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\r\n    public static MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\r\n\r\n    private expTable: Int32Array;\r\n    private logTable: Int32Array;\r\n    private zero: GenericGFPoly;\r\n    private one: GenericGFPoly;\r\n\r\n    /**\r\n     * Create a representation of GF(size) using the given primitive polynomial.\r\n     *\r\n     * @param primitive irreducible polynomial whose coefficients are represented by\r\n     *  the bits of an int, where the least-significant bit represents the constant\r\n     *  coefficient\r\n     * @param size the size of the field\r\n     * @param b the factor b in the generator polynomial can be 0- or 1-based\r\n     *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\r\n     *  In most cases it should be 1, but for QR code it is 0.\r\n     */\r\n    public constructor(private primitive: number /*int*/, private size: number /*int*/, private generatorBase: number /*int*/) {\r\n\r\n        const expTable = new Int32Array(size);\r\n        let x = 1;\r\n        for (let i = 0; i < size; i++) {\r\n            expTable[i] = x;\r\n            x *= 2; // we're assuming the generator alpha is 2\r\n            if (x >= size) {\r\n                x ^= primitive;\r\n                x &= size - 1;\r\n            }\r\n        }\r\n        this.expTable = expTable;\r\n\r\n        const logTable = new Int32Array(size);\r\n        for (let i = 0; i < size - 1; i++) {\r\n            logTable[expTable[i]] = i;\r\n        }\r\n        this.logTable = logTable;\r\n\r\n        // logTable[0] == 0 but this should never be used\r\n        this.zero = new GenericGFPoly(this, Int32Array.from([0]));\r\n        this.one = new GenericGFPoly(this, Int32Array.from([1]));\r\n    }\r\n\r\n    public getZero(): GenericGFPoly {\r\n        return this.zero;\r\n    }\r\n\r\n    public getOne(): GenericGFPoly {\r\n        return this.one;\r\n    }\r\n\r\n    /**\r\n     * @return the monomial representing coefficient * x^degree\r\n     */\r\n    public buildMonomial(degree: number /*int*/, coefficient: number /*int*/): GenericGFPoly {\r\n        if (degree < 0) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        if (coefficient === 0) {\r\n            return this.zero;\r\n        }\r\n        const coefficients = new Int32Array(degree + 1);\r\n        coefficients[0] = coefficient;\r\n        return new GenericGFPoly(this, coefficients);\r\n    }\r\n\r\n    /**\r\n     * Implements both addition and subtraction -- they are the same in GF(size).\r\n     *\r\n     * @return sum/difference of a and b\r\n     */\r\n    public static addOrSubtract(a: number /*int*/, b: number /*int*/): number /*int*/ {\r\n        return a ^ b;\r\n    }\r\n\r\n    /**\r\n     * @return 2 to the power of a in GF(size)\r\n     */\r\n    public exp(a: number /*int*/): number /*int*/ {\r\n        return this.expTable[a];\r\n    }\r\n\r\n    /**\r\n     * @return base 2 log of a in GF(size)\r\n     */\r\n    public log(a: number /*int*/): number /*int*/ {\r\n        if (a === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        return this.logTable[a];\r\n    }\r\n\r\n    /**\r\n     * @return multiplicative inverse of a\r\n     */\r\n    public inverse(a: number /*int*/): number /*int*/ {\r\n        if (a === 0) {\r\n            throw new Exception(Exception.ArithmeticException);\r\n        }\r\n        return this.expTable[this.size - this.logTable[a] - 1];\r\n    }\r\n\r\n    /**\r\n     * @return product of a and b in GF(size)\r\n     */\r\n    public multiply(a: number /*int*/, b: number /*int*/): number /*int*/ {\r\n        if (a === 0 || b === 0) {\r\n            return 0;\r\n        }\r\n        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\r\n    }\r\n\r\n    public getSize(): number /*int*/ {\r\n        return this.size;\r\n    }\r\n\r\n    public getGeneratorBase(): number /*int*/ {\r\n        return this.generatorBase;\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        return 'GF(0x' + Integer.toHexString(this.primitive) + ',' + this.size + ')';\r\n    }\r\n\r\n    public equals(o: Object): boolean {\r\n        return o === this;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/reedsolomon/GenericGF.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport Exception from './../Exception';\r\n\r\n/*import java.util.HashMap;*/\r\n/*import java.util.Map;*/\r\n\r\nexport const enum CharacterSetValueIdentifiers {\r\n    Cp437,\r\n    ISO8859_1,\r\n    ISO8859_2,\r\n    ISO8859_3,\r\n    ISO8859_4,\r\n    ISO8859_5,\r\n    ISO8859_6,\r\n    ISO8859_7,\r\n    ISO8859_8,\r\n    ISO8859_9,\r\n    ISO8859_10,\r\n    ISO8859_11,\r\n    ISO8859_13,\r\n    ISO8859_14,\r\n    ISO8859_15,\r\n    ISO8859_16,\r\n    SJIS,\r\n    Cp1250,\r\n    Cp1251,\r\n    Cp1252,\r\n    Cp1256,\r\n    UnicodeBigUnmarked,\r\n    UTF8,\r\n    ASCII,\r\n    Big5,\r\n    GB18030,\r\n    EUC_KR,\r\n}\r\n\r\n/**\r\n * Encapsulates a Character Set ECI, according to \"Extended Channel Interpretations\" 5.3.1.1\r\n * of ISO 18004.\r\n *\r\n * @author Sean Owen\r\n */\r\n\r\nexport default class CharacterSetECI {\r\n\r\n    private static VALUE_IDENTIFIER_TO_ECI = new Map<number, CharacterSetECI>();\r\n    private static VALUES_TO_ECI = new Map<number, CharacterSetECI>();\r\n    private static NAME_TO_ECI = new Map<string, CharacterSetECI>();\r\n\r\n    // Enum name is a Java encoding valid for java.lang and java.io\r\n    // TYPESCRIPTPORT: changed the main label for ISO as the TextEncoder did not recognized them in the form from java\r\n    // (eg ISO8859_1 must be ISO88591 or ISO8859-1 or ISO-8859-1)\r\n    // later on: well, except 16 wich does not work with ISO885916 so used ISO-8859-1 form for default\r\n    public static readonly Cp437 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Cp437, Int32Array.from([0, 2]), 'Cp437');\r\n\r\n    public static readonly ISO8859_1 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_1, Int32Array.from([1, 3]), 'ISO-8859-1', 'ISO88591', 'ISO8859_1');\r\n\r\n    public static readonly ISO8859_2 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_2, 4, 'ISO-8859-2', 'ISO88592', 'ISO8859_2');\r\n\r\n    public static readonly ISO8859_3 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_3, 5, 'ISO-8859-3', 'ISO88593', 'ISO8859_3');\r\n\r\n    public static readonly ISO8859_4 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_4, 6, 'ISO-8859-4', 'ISO88594', 'ISO8859_4');\r\n\r\n    public static readonly ISO8859_5 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_5, 7, 'ISO-8859-5', 'ISO88595', 'ISO8859_5');\r\n\r\n    public static readonly ISO8859_6 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_6, 8, 'ISO-8859-6', 'ISO88596', 'ISO8859_6');\r\n\r\n    public static readonly ISO8859_7 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_7, 9, 'ISO-8859-7', 'ISO88597', 'ISO8859_7');\r\n\r\n    public static readonly ISO8859_8 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_8, 10, 'ISO-8859-8', 'ISO88598', 'ISO8859_8');\r\n\r\n    public static readonly ISO8859_9 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_9, 11, 'ISO-8859-9', 'ISO88599', 'ISO8859_9');\r\n\r\n    public static readonly ISO8859_10 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_10, 12, 'ISO-8859-10', 'ISO885910', 'ISO8859_10');\r\n\r\n    public static readonly ISO8859_11 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_11, 13, 'ISO-8859-11', 'ISO885911', 'ISO8859_11');\r\n\r\n    public static readonly ISO8859_13 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_13, 15, 'ISO-8859-13', 'ISO885913', 'ISO8859_13');\r\n\r\n    public static readonly ISO8859_14 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_14, 16, 'ISO-8859-14', 'ISO885914', 'ISO8859_14');\r\n\r\n    public static readonly ISO8859_15 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_15, 17, 'ISO-8859-15', 'ISO885915', 'ISO8859_15');\r\n\r\n    public static readonly ISO8859_16 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ISO8859_16, 18, 'ISO-8859-16', 'ISO885916', 'ISO8859_16');\r\n\r\n    public static readonly SJIS = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.SJIS, 20, 'SJIS', 'Shift_JIS');\r\n\r\n    public static readonly Cp1250 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Cp1250, 21, 'Cp1250', 'windows-1250');\r\n\r\n    public static readonly Cp1251 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Cp1251, 22, 'Cp1251', 'windows-1251');\r\n\r\n    public static readonly Cp1252 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Cp1252, 23, 'Cp1252', 'windows-1252');\r\n\r\n    public static readonly Cp1256 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Cp1256, 24, 'Cp1256', 'windows-1256');\r\n\r\n    public static readonly UnicodeBigUnmarked = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.UnicodeBigUnmarked, 25, 'UnicodeBigUnmarked', 'UTF-16BE', 'UnicodeBig');\r\n\r\n    public static readonly UTF8 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.UTF8, 26, 'UTF8', 'UTF-8');\r\n\r\n    public static readonly ASCII = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.ASCII, Int32Array.from([27, 170]), 'ASCII', 'US-ASCII');\r\n\r\n    public static readonly Big5 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.Big5, 28, 'Big5');\r\n\r\n    public static readonly GB18030 = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.GB18030, 29, 'GB18030', 'GB2312', 'EUC_CN', 'GBK');\r\n\r\n    public static readonly EUC_KR = new CharacterSetECI(\r\n        CharacterSetValueIdentifiers.EUC_KR, 30, 'EUC_KR', 'EUC-KR');\r\n\r\n    public values: Int32Array;\r\n    public otherEncodingNames: string[];\r\n\r\n    public constructor(\r\n        public valueIdentifier: CharacterSetValueIdentifiers,\r\n        valuesParam: Int32Array | number,\r\n        public name: string, ...otherEncodingNames: string[]\r\n    ) {\r\n\r\n        if (typeof valuesParam === 'number') {\r\n            this.values = Int32Array.from([valuesParam]);\r\n        } else {\r\n            this.values = valuesParam;\r\n        }\r\n\r\n        this.otherEncodingNames = otherEncodingNames;\r\n\r\n        CharacterSetECI.VALUE_IDENTIFIER_TO_ECI.set(valueIdentifier, this);\r\n        CharacterSetECI.NAME_TO_ECI.set(name, this);\r\n\r\n        const values = this.values;\r\n\r\n        for (let i = 0, length = values.length; i !== length; i++) {\r\n            const v = values[i];\r\n            CharacterSetECI.VALUES_TO_ECI.set(v, this);\r\n        }\r\n        for (const otherName of otherEncodingNames) {\r\n            CharacterSetECI.NAME_TO_ECI.set(otherName, this);\r\n        }\r\n    }\r\n\r\n    // CharacterSetECI(value: number /*int*/) {\r\n    //   this(new Int32Array {value})\r\n    // }\r\n\r\n    // CharacterSetECI(value: number /*int*/, String... otherEncodingNames) {\r\n    //   this.values = new Int32Array {value}\r\n    //   this.otherEncodingNames = otherEncodingNames\r\n    // }\r\n\r\n    // CharacterSetECI(values: Int32Array, String... otherEncodingNames) {\r\n    //   this.values = values\r\n    //   this.otherEncodingNames = otherEncodingNames\r\n    // }\r\n\r\n    public getValueIdentifier(): CharacterSetValueIdentifiers/*int*/ {\r\n        return this.valueIdentifier;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getValue(): number /*int*/ {\r\n        return this.values[0];\r\n    }\r\n\r\n    /**\r\n     * @param value character set ECI value\r\n     * @return {@code CharacterSetECI} representing ECI of given value, or null if it is legal but\r\n     *   unsupported\r\n     * @throws FormatException if ECI value is invalid\r\n     */\r\n    public static getCharacterSetECIByValue(value: number /*int*/): CharacterSetECI /*throws FormatException*/ {\r\n\r\n        if (value < 0 || value >= 900) {\r\n            throw new Exception(Exception.FormatException, 'incorect value');\r\n        }\r\n\r\n        const characterSet = CharacterSetECI.VALUES_TO_ECI.get(value);\r\n\r\n        if (undefined === characterSet) {\r\n            throw new Exception(Exception.FormatException, 'incorect value');\r\n        }\r\n\r\n        return characterSet;\r\n    }\r\n\r\n    /**\r\n     * @param name character set ECI encoding name\r\n     * @return CharacterSetECI representing ECI for character encoding, or null if it is legal\r\n     *   but unsupported\r\n     */\r\n    public static getCharacterSetECIByName(name: string): CharacterSetECI {\r\n\r\n        const characterSet = CharacterSetECI.NAME_TO_ECI.get(name);\r\n\r\n        if (undefined === characterSet) {\r\n            throw new Exception(Exception.FormatException, 'incorect value');\r\n        }\r\n\r\n        return characterSet;\r\n    }\r\n\r\n    public equals(o: CharacterSetECI) {\r\n\r\n        if (!(o instanceof CharacterSetECI)) {\r\n            return false;\r\n        }\r\n\r\n        const other = o as CharacterSetECI;\r\n\r\n        return this.getName() === other.getName();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/CharacterSetECI.ts","\r\nexport default class Integer {\r\n    public static MIN_VALUE_32_BITS = -2147483648;\r\n\r\n    public static numberOfTrailingZeros(i: number): number {\r\n\r\n        let y;\r\n\r\n        if (i === 0) return 32;\r\n\r\n        let n = 31;\r\n\r\n        y = i << 16;\r\n\r\n        if (y !== 0) {\r\n            n -= 16;\r\n            i = y;\r\n        }\r\n\r\n        y = i << 8;\r\n\r\n        if (y !== 0) {\r\n            n -= 8;\r\n            i = y;\r\n        }\r\n\r\n        y = i << 4;\r\n\r\n        if (y !== 0) {\r\n            n -= 4;\r\n            i = y;\r\n        }\r\n\r\n        y = i << 2;\r\n\r\n        if (y !== 0) {\r\n            n -= 2;\r\n            i = y;\r\n        }\r\n\r\n        return n - ((i << 1) >>> 31);\r\n    }\r\n\r\n    public static numberOfLeadingZeros(i: number): number {\r\n\r\n        // HD, Figure 5-6\r\n        if (i === 0) {\r\n            return 32;\r\n        }\r\n\r\n        let n = 1;\r\n\r\n        if (i >>> 16 === 0) {\r\n            n += 16;\r\n            i <<= 16;\r\n        }\r\n\r\n        if (i >>> 24 === 0) {\r\n            n += 8;\r\n            i <<= 8;\r\n        }\r\n\r\n        if (i >>> 28 === 0) {\r\n            n += 4;\r\n            i <<= 4;\r\n        }\r\n\r\n        if (i >>> 30 === 0) {\r\n            n += 2;\r\n            i <<= 2;\r\n        }\r\n\r\n        n -= i >>> 31;\r\n\r\n        return n;\r\n    }\r\n\r\n    public static toHexString(i: number) {\r\n        return i.toString(16);\r\n    }\r\n\r\n    // Returns the number of one-bits in the two's complement binary representation of the specified int value. This function is sometimes referred to as the population count.\r\n    // Returns:\r\n    // the number of one-bits in the two's complement binary representation of the specified int value.\r\n    public static bitCount(i: number): number {\r\n        // HD, Figure 5-2\r\n        i = i - ((i >>> 1) & 0x55555555);\r\n        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\r\n        i = (i + (i >>> 4)) & 0x0f0f0f0f;\r\n        i = i + (i >>> 8);\r\n        i = i + (i >>> 16);\r\n\r\n        return i & 0x3f;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/Integer.ts","/*\r\n * Copyright 2012 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.detector {*/\r\n\r\n/**\r\n * General math-related and numeric utility functions.\r\n */\r\nexport default class MathUtils {\r\n\r\n    private MathUtils() {\r\n    }\r\n\r\n    /**\r\n     * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\r\n     * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\r\n     * differ slightly from {@link Math#round(float)} in that half rounds down for negative\r\n     * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\r\n     *\r\n     * @param d real value to round\r\n     * @return nearest {@code int}\r\n     */\r\n    public static round(d: number/*float*/): number /*int*/ {\r\n        if (NaN === d) return 0;\r\n        if (d <= Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER;\r\n        if (d >= Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\r\n        return /*(int) */(d + (d < 0.0 ? -0.5 : 0.5)) | 0;\r\n    }\r\n    // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\r\n\r\n    /**\r\n     * @param aX point A x coordinate\r\n     * @param aY point A y coordinate\r\n     * @param bX point B x coordinate\r\n     * @param bY point B y coordinate\r\n     * @return Euclidean distance between points A and B\r\n     */\r\n    public static distance(aX: number/*float|int*/, aY: number/*float|int*/, bX: number/*float|int*/, bY: number/*float|int*/): number/*float*/ {\r\n        const xDiff = aX - bX;\r\n        const yDiff = aY - bY;\r\n        return /*(float) */Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n    }\r\n\r\n    /**\r\n     * @param aX point A x coordinate\r\n     * @param aY point A y coordinate\r\n     * @param bX point B x coordinate\r\n     * @param bY point B y coordinate\r\n     * @return Euclidean distance between points A and B\r\n     */\r\n    // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\r\n    //   const xDiff = aX - bX\r\n    //   const yDiff = aY - bY\r\n    //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n    // }\r\n\r\n    /**\r\n     * @param array values to sum\r\n     * @return sum of values in array\r\n     */\r\n    public static sum(array: Int32Array): number /*int*/ {\r\n        let count = 0;\r\n        for (let i = 0, length = array.length; i !== length; i++) {\r\n            const a = array[i];\r\n            count += a;\r\n        }\r\n        return count;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/detector/MathUtils.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.reedsolomon {*/\r\n\r\nimport GenericGF from './GenericGF';\r\nimport Exception from './../../Exception';\r\nimport System from './../../util/System';\r\n\r\n/**\r\n * <p>Represents a polynomial whose coefficients are elements of a GF.\r\n * Instances of this class are immutable.</p>\r\n *\r\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\r\n * port of his C++ Reed-Solomon implementation.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class GenericGFPoly {\r\n\r\n    private field: GenericGF;\r\n    private coefficients: Int32Array;\r\n\r\n    /**\r\n     * @param field the {@link GenericGF} instance representing the field to use\r\n     * to perform computations\r\n     * @param coefficients coefficients as ints representing elements of GF(size), arranged\r\n     * from most significant (highest-power term) coefficient to least significant\r\n     * @throws IllegalArgumentException if argument is null or empty,\r\n     * or if leading coefficient is 0 and this is not a\r\n     * constant polynomial (that is, it is not the monomial \"0\")\r\n     */\r\n    public constructor(field: GenericGF, coefficients: Int32Array) {\r\n        if (coefficients.length === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        this.field = field;\r\n        const coefficientsLength = coefficients.length;\r\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\r\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n            let firstNonZero = 1;\r\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\r\n                firstNonZero++;\r\n            }\r\n            if (firstNonZero === coefficientsLength) {\r\n                this.coefficients = Int32Array.from([0]);\r\n            } else {\r\n                this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\r\n                System.arraycopy(coefficients,\r\n                    firstNonZero,\r\n                    this.coefficients,\r\n                    0,\r\n                    this.coefficients.length);\r\n            }\r\n        } else {\r\n            this.coefficients = coefficients;\r\n        }\r\n    }\r\n\r\n    public getCoefficients(): Int32Array {\r\n        return this.coefficients;\r\n    }\r\n\r\n    /**\r\n     * @return degree of this polynomial\r\n     */\r\n    public getDegree(): number {\r\n        return this.coefficients.length - 1;\r\n    }\r\n\r\n    /**\r\n     * @return true iff this polynomial is the monomial \"0\"\r\n     */\r\n    public isZero(): boolean {\r\n        return this.coefficients[0] === 0;\r\n    }\r\n\r\n    /**\r\n     * @return coefficient of x^degree term in this polynomial\r\n     */\r\n    public getCoefficient(degree: number /*int*/): number {\r\n        return this.coefficients[this.coefficients.length - 1 - degree];\r\n    }\r\n\r\n    /**\r\n     * @return evaluation of this polynomial at a given point\r\n     */\r\n    public evaluateAt(a: number /*int*/): number {\r\n        if (a === 0) {\r\n            // Just return the x^0 coefficient\r\n            return this.getCoefficient(0);\r\n        }\r\n        const coefficients = this.coefficients;\r\n        let result;\r\n        if (a === 1) {\r\n            // Just the sum of the coefficients\r\n            result = 0;\r\n            for (let i = 0, length = coefficients.length; i !== length; i++) {\r\n                const coefficient = coefficients[i];\r\n                result = GenericGF.addOrSubtract(result, coefficient);\r\n            }\r\n            return result;\r\n        }\r\n        result = coefficients[0];\r\n        const size = coefficients.length;\r\n        const field = this.field;\r\n        for (let i = 1; i < size; i++) {\r\n            result = GenericGF.addOrSubtract(field.multiply(a, result), coefficients[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public addOrSubtract(other: GenericGFPoly): GenericGFPoly {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'GenericGFPolys do not have same GenericGF field');\r\n        }\r\n        if (this.isZero()) {\r\n            return other;\r\n        }\r\n        if (other.isZero()) {\r\n            return this;\r\n        }\r\n\r\n        let smallerCoefficients = this.coefficients;\r\n        let largerCoefficients = other.coefficients;\r\n        if (smallerCoefficients.length > largerCoefficients.length) {\r\n            const temp = smallerCoefficients;\r\n            smallerCoefficients = largerCoefficients;\r\n            largerCoefficients = temp;\r\n        }\r\n        let sumDiff = new Int32Array(largerCoefficients.length);\r\n        const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\r\n        // Copy high-order terms only found in higher-degree polynomial's coefficients\r\n        System.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n\r\n        for (let i = lengthDiff; i < largerCoefficients.length; i++) {\r\n            sumDiff[i] = GenericGF.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n        }\r\n\r\n        return new GenericGFPoly(this.field, sumDiff);\r\n    }\r\n\r\n    public multiply(other: GenericGFPoly): GenericGFPoly {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'GenericGFPolys do not have same GenericGF field');\r\n        }\r\n        if (this.isZero() || other.isZero()) {\r\n            return this.field.getZero();\r\n        }\r\n        const aCoefficients = this.coefficients;\r\n        const aLength = aCoefficients.length;\r\n        const bCoefficients = other.coefficients;\r\n        const bLength = bCoefficients.length;\r\n        const product = new Int32Array(aLength + bLength - 1);\r\n        const field = this.field;\r\n        for (let i = 0; i < aLength; i++) {\r\n            const aCoeff = aCoefficients[i];\r\n            for (let j = 0; j < bLength; j++) {\r\n                product[i + j] = GenericGF.addOrSubtract(product[i + j],\r\n                    field.multiply(aCoeff, bCoefficients[j]));\r\n            }\r\n        }\r\n        return new GenericGFPoly(field, product);\r\n    }\r\n\r\n    public multiplyScalar(scalar: number /*int*/): GenericGFPoly {\r\n        if (scalar === 0) {\r\n            return this.field.getZero();\r\n        }\r\n        if (scalar === 1) {\r\n            return this;\r\n        }\r\n        const size = this.coefficients.length;\r\n        const field = this.field;\r\n        const product = new Int32Array(size);\r\n        const coefficients = this.coefficients;\r\n        for (let i = 0; i < size; i++) {\r\n            product[i] = field.multiply(coefficients[i], scalar);\r\n        }\r\n        return new GenericGFPoly(field, product);\r\n    }\r\n\r\n    public multiplyByMonomial(degree: number /*int*/, coefficient: number /*int*/): GenericGFPoly {\r\n        if (degree < 0) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        if (coefficient === 0) {\r\n            return this.field.getZero();\r\n        }\r\n        const coefficients = this.coefficients;\r\n        const size = coefficients.length;\r\n        const product = new Int32Array(size + degree);\r\n        const field = this.field;\r\n        for (let i = 0; i < size; i++) {\r\n            product[i] = field.multiply(coefficients[i], coefficient);\r\n        }\r\n        return new GenericGFPoly(field, product);\r\n    }\r\n\r\n    public divide(other: GenericGFPoly): GenericGFPoly[] {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'GenericGFPolys do not have same GenericGF field');\r\n        }\r\n        if (other.isZero()) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Divide by 0');\r\n        }\r\n\r\n        const field = this.field;\r\n\r\n        let quotient: GenericGFPoly = field.getZero();\r\n        let remainder: GenericGFPoly = this;\r\n\r\n        const denominatorLeadingTerm = other.getCoefficient(other.getDegree());\r\n        const inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\r\n\r\n        while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\r\n            const degreeDifference = remainder.getDegree() - other.getDegree();\r\n            const scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\r\n            const term = other.multiplyByMonomial(degreeDifference, scale);\r\n            const iterationQuotient = field.buildMonomial(degreeDifference, scale);\r\n            quotient = quotient.addOrSubtract(iterationQuotient);\r\n            remainder = remainder.addOrSubtract(term);\r\n        }\r\n\r\n        return [quotient, remainder];\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        let result = '';\r\n        for (let degree = this.getDegree(); degree >= 0; degree--) {\r\n            let coefficient = this.getCoefficient(degree);\r\n            if (coefficient !== 0) {\r\n                if (coefficient < 0) {\r\n                    result += ' - ';\r\n                    coefficient = -coefficient;\r\n                } else {\r\n                    if (result.length > 0) {\r\n                        result += ' + ';\r\n                    }\r\n                }\r\n                if (degree === 0 || coefficient !== 1) {\r\n                    const alphaPower = this.field.log(coefficient);\r\n                    if (alphaPower === 0) {\r\n                        result += '1';\r\n                    } else if (alphaPower === 1) {\r\n                        result += 'a';\r\n                    } else {\r\n                        result += 'a^';\r\n                        result += alphaPower;\r\n                    }\r\n                }\r\n                if (degree !== 0) {\r\n                    if (degree === 1) {\r\n                        result += 'x';\r\n                    } else {\r\n                        result += 'x^';\r\n                        result += degree;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/reedsolomon/GenericGFPoly.ts","import System from './System';\r\n\r\nexport default class Arrays {\r\n    public static equals(first: any, second: any): boolean {\r\n        if (!first) {\r\n            return false;\r\n        }\r\n        if (!second) {\r\n            return false;\r\n        }\r\n        if (!first.length) {\r\n            return false;\r\n        }\r\n        if (!second.length) {\r\n            return false;\r\n        }\r\n        if (first.length !== second.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0, length = first.length; i < length; i++) {\r\n            if (first[i] !== second[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static hashCode(a: any) {\r\n        if (a === null) {\r\n            return 0;\r\n        }\r\n        let result = 1;\r\n        for (const element of a) {\r\n            result = 31 * result + element;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static fillUint8Array(a: Uint8Array, value: number) {\r\n        for (let i = 0; i !== a.length; i++) {\r\n            a[i] = value;\r\n        }\r\n    }\r\n\r\n    public static copyOf(original: Int32Array, newLength: number) {\r\n        const copy = new Int32Array(newLength);\r\n        System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));\r\n        return copy;\r\n    }\r\n\r\n    /*\r\n    * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\r\n    * for the new element.\r\n    * Parameters:\r\n    *     ar - A sorted array\r\n    *     el - An element to search for\r\n    *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\r\n    *        a negative number  if a is less than b;\r\n    *        0 if a is equal to b;\r\n    *        a positive number of a is greater than b.\r\n    * The array may contain duplicate elements. If there are more than one equal elements in the array,\r\n    * the returned value can be the index of any one of the equal elements.\r\n    *\r\n    * http://jsfiddle.net/aryzhov/pkfst550/\r\n    */\r\n    public static binarySearch(ar: Int32Array, el: number, comparator?: (a: number, b: number) => number): number {\r\n        if (undefined === comparator) {\r\n            comparator = Arrays.numberComparator;\r\n        }\r\n        let m = 0;\r\n        let n = ar.length - 1;\r\n        while (m <= n) {\r\n            const k = (n + m) >> 1;\r\n            const cmp = comparator(el, ar[k]);\r\n            if (cmp > 0) {\r\n                m = k + 1;\r\n            } else if (cmp < 0) {\r\n                n = k - 1;\r\n            } else {\r\n                return k;\r\n            }\r\n        }\r\n        return -m - 1;\r\n    }\r\n\r\n    public static numberComparator(a: number, b: number) {\r\n        return a - b;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/Arrays.ts","/**\r\n * Video input device metadata containing the id and label of the device if available.\r\n *\r\n * @export\r\n * @class VideoInputDevice\r\n */\r\n\r\nexport default class VideoInputDevice {\r\n    /**\r\n     * Creates an instance of VideoInputDevice.\r\n     * @param {string} deviceId the video input device id\r\n     * @param {string} label the label of the device if available\r\n     *\r\n     * @memberOf VideoInputDevice\r\n     */\r\n    public constructor(public deviceId: string, public label: string) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/VideoInputDevice.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode {*/\r\n\r\nimport BarcodeFormat from './../BarcodeFormat';\r\nimport BinaryBitmap from './../BinaryBitmap';\r\nimport DecodeHintType from './../DecodeHintType';\r\nimport Reader from './../Reader';\r\nimport Result from './../Result';\r\nimport ResultMetadataType from './../ResultMetadataType';\r\nimport ResultPoint from './../ResultPoint';\r\nimport BitMatrix from './../common/BitMatrix';\r\nimport DecoderResult from './../common/DecoderResult';\r\nimport DetectorResult from './../common/DetectorResult';\r\nimport Decoder from './decoder/Decoder';\r\nimport QRCodeDecoderMetaData from './decoder/QRCodeDecoderMetaData';\r\nimport Detector from './detector/Detector';\r\nimport Exception from './../Exception';\r\n\r\n/*import java.util.List;*/\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * This implementation can detect and decode QR Codes in an image.\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class QRCodeReader implements Reader {\r\n\r\n    private static NO_POINTS = new Array<ResultPoint>();\r\n\r\n    private decoder = new Decoder();\r\n\r\n    protected getDecoder(): Decoder {\r\n        return this.decoder;\r\n    }\r\n\r\n    /**\r\n     * Locates and decodes a QR code in an image.\r\n     *\r\n     * @return a representing: string the content encoded by the QR code\r\n     * @throws NotFoundException if a QR code cannot be found\r\n     * @throws FormatException if a QR code cannot be decoded\r\n     * @throws ChecksumException if error correction fails\r\n     */\r\n    /*@Override*/\r\n    // public decode(image: BinaryBitmap): Result /*throws NotFoundException, ChecksumException, FormatException */ {\r\n    //   return this.decode(image, null)\r\n    // }\r\n\r\n    /*@Override*/\r\n    public decode(image: BinaryBitmap, hints?: Map<DecodeHintType, any>): Result {\r\n        let decoderResult: DecoderResult;\r\n        let points: Array<ResultPoint>;\r\n        if (hints !== undefined && hints !== null && undefined !== hints.get(DecodeHintType.PURE_BARCODE)) {\r\n            const bits = QRCodeReader.extractPureBits(image.getBlackMatrix());\r\n            decoderResult = this.decoder.decodeBitMatrix(bits, hints);\r\n            points = QRCodeReader.NO_POINTS;\r\n        } else {\r\n            const detectorResult = new Detector(image.getBlackMatrix()).detect(hints);\r\n            decoderResult = this.decoder.decodeBitMatrix(detectorResult.getBits(), hints);\r\n            points = detectorResult.getPoints();\r\n        }\r\n\r\n        // If the code was mirrored: swap the bottom-left and the top-right points.\r\n        if (decoderResult.getOther() instanceof QRCodeDecoderMetaData) {\r\n            (<QRCodeDecoderMetaData>decoderResult.getOther()).applyMirroredCorrection(points);\r\n        }\r\n\r\n        const result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat.QR_CODE, undefined);\r\n        const byteSegments: Array<Uint8Array> = decoderResult.getByteSegments();\r\n        if (byteSegments !== null) {\r\n            result.putMetadata(ResultMetadataType.BYTE_SEGMENTS, byteSegments);\r\n        }\r\n        const ecLevel: string = decoderResult.getECLevel();\r\n        if (ecLevel !== null) {\r\n            result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, ecLevel);\r\n        }\r\n        if (decoderResult.hasStructuredAppend()) {\r\n            result.putMetadata(ResultMetadataType.STRUCTURED_APPEND_SEQUENCE,\r\n                decoderResult.getStructuredAppendSequenceNumber());\r\n            result.putMetadata(ResultMetadataType.STRUCTURED_APPEND_PARITY,\r\n                decoderResult.getStructuredAppendParity());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /*@Override*/\r\n    public reset(): void {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * This method detects a code in a \"pure\" image -- that is, pure monochrome image\r\n     * which contains only an unrotated, unskewed, image of a code, with some white border\r\n     * around it. This is a specialized method that works exceptionally fast in this special\r\n     * case.\r\n     *\r\n     * @see com.google.zxing.datamatrix.DataMatrixReader#extractPureBits(BitMatrix)\r\n     */\r\n    private static extractPureBits(image: BitMatrix): BitMatrix /*throws NotFoundException */ {\r\n\r\n        const leftTopBlack: Int32Array = image.getTopLeftOnBit();\r\n        const rightBottomBlack: Int32Array = image.getBottomRightOnBit();\r\n        if (leftTopBlack === null || rightBottomBlack === null) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        const moduleSize: number /*float*/ = this.moduleSize(leftTopBlack, image);\r\n\r\n        let top = leftTopBlack[1];\r\n        let bottom = rightBottomBlack[1];\r\n        let left = leftTopBlack[0];\r\n        let right = rightBottomBlack[0];\r\n\r\n        // Sanity check!\r\n        if (left >= right || top >= bottom) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        if (bottom - top !== right - left) {\r\n            // Special case, where bottom-right module wasn't black so we found something else in the last row\r\n            // Assume it's a square, so use height as the width\r\n            right = left + (bottom - top);\r\n            if (right >= image.getWidth()) {\r\n                // Abort if that would not make sense -- off image\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n        }\r\n\r\n        const matrixWidth = Math.round((right - left + 1) / moduleSize);\r\n        const matrixHeight = Math.round((bottom - top + 1) / moduleSize);\r\n        if (matrixWidth <= 0 || matrixHeight <= 0) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n        if (matrixHeight !== matrixWidth) {\r\n            // Only possibly decode square regions\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        // Push in the \"border\" by half the module width so that we start\r\n        // sampling in the middle of the module. Just in case the image is a\r\n        // little off, this will help recover.\r\n        const nudge = /*(int) */Math.floor(moduleSize / 2.0);\r\n        top += nudge;\r\n        left += nudge;\r\n\r\n        // But careful that this does not sample off the edge\r\n        // \"right\" is the farthest-right valid pixel location -- right+1 is not necessarily\r\n        // This is positive by how much the inner x loop below would be too large\r\n        const nudgedTooFarRight = left + /*(int) */Math.floor((matrixWidth - 1) * moduleSize) - right;\r\n        if (nudgedTooFarRight > 0) {\r\n            if (nudgedTooFarRight > nudge) {\r\n                // Neither way fits; abort\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n            left -= nudgedTooFarRight;\r\n        }\r\n        // See logic above\r\n        const nudgedTooFarDown = top + /*(int) */Math.floor((matrixHeight - 1) * moduleSize) - bottom;\r\n        if (nudgedTooFarDown > 0) {\r\n            if (nudgedTooFarDown > nudge) {\r\n                // Neither way fits; abort\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n            top -= nudgedTooFarDown;\r\n        }\r\n\r\n        // Now just read off the bits\r\n        const bits = new BitMatrix(matrixWidth, matrixHeight);\r\n        for (let y = 0; y < matrixHeight; y++) {\r\n            const iOffset = top + /*(int) */Math.floor(y * moduleSize);\r\n            for (let x = 0; x < matrixWidth; x++) {\r\n                if (image.get(left + /*(int) */Math.floor(x * moduleSize), iOffset)) {\r\n                    bits.set(x, y);\r\n                }\r\n            }\r\n        }\r\n        return bits;\r\n    }\r\n\r\n    private static moduleSize(leftTopBlack: Int32Array, image: BitMatrix): number/*float*/ /*throws NotFoundException */ {\r\n        const height: number /*int*/ = image.getHeight();\r\n        const width: number /*int*/ = image.getWidth();\r\n        let x = leftTopBlack[0];\r\n        let y = leftTopBlack[1];\r\n        let inBlack: boolean = true;\r\n        let transitions = 0;\r\n        while (x < width && y < height) {\r\n            if (inBlack !== image.get(x, y)) {\r\n                if (++transitions === 5) {\r\n                    break;\r\n                }\r\n                inBlack = !inBlack;\r\n            }\r\n            x++;\r\n            y++;\r\n        }\r\n        if (x === width || y === height) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n        return (x - leftTopBlack[0]) / 7.0;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/QRCodeReader.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport Exception from './../../Exception';\r\nimport ErrorCorrectionLevel from './ErrorCorrectionLevel';\r\nimport FormatInformation from './FormatInformation';\r\nimport ECBlocks from './ECBlocks';\r\nimport ECB from './ECB';\r\n\r\n/**\r\n * See ISO 18004:2006 Annex D\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class Version {\r\n\r\n    /**\r\n       * See ISO 18004:2006 Annex D.\r\n       * Element i represents the raw version bits that specify version i + 7\r\n       */\r\n    private static VERSION_DECODE_INFO = Int32Array.from([\r\n        0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6,\r\n        0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78,\r\n        0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683,\r\n        0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,\r\n        0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250,\r\n        0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B,\r\n        0x2542E, 0x26A64, 0x27541, 0x28C69]);\r\n\r\n    /**\r\n       * See ISO 18004:2006 6.5.1 Table 9\r\n       */\r\n    private static VERSIONS: Version[] = [\r\n        new Version(1, new Int32Array(0),\r\n            new ECBlocks(7, new ECB(1, 19)),\r\n            new ECBlocks(10, new ECB(1, 16)),\r\n            new ECBlocks(13, new ECB(1, 13)),\r\n            new ECBlocks(17, new ECB(1, 9))),\r\n        new Version(2, Int32Array.from([6, 18]),\r\n            new ECBlocks(10, new ECB(1, 34)),\r\n            new ECBlocks(16, new ECB(1, 28)),\r\n            new ECBlocks(22, new ECB(1, 22)),\r\n            new ECBlocks(28, new ECB(1, 16))),\r\n        new Version(3, Int32Array.from([6, 22]),\r\n            new ECBlocks(15, new ECB(1, 55)),\r\n            new ECBlocks(26, new ECB(1, 44)),\r\n            new ECBlocks(18, new ECB(2, 17)),\r\n            new ECBlocks(22, new ECB(2, 13))),\r\n        new Version(4, Int32Array.from([6, 26]),\r\n            new ECBlocks(20, new ECB(1, 80)),\r\n            new ECBlocks(18, new ECB(2, 32)),\r\n            new ECBlocks(26, new ECB(2, 24)),\r\n            new ECBlocks(16, new ECB(4, 9))),\r\n        new Version(5, Int32Array.from([6, 30]),\r\n            new ECBlocks(26, new ECB(1, 108)),\r\n            new ECBlocks(24, new ECB(2, 43)),\r\n            new ECBlocks(18, new ECB(2, 15),\r\n                new ECB(2, 16)),\r\n            new ECBlocks(22, new ECB(2, 11),\r\n                new ECB(2, 12))),\r\n        new Version(6, Int32Array.from([6, 34]),\r\n            new ECBlocks(18, new ECB(2, 68)),\r\n            new ECBlocks(16, new ECB(4, 27)),\r\n            new ECBlocks(24, new ECB(4, 19)),\r\n            new ECBlocks(28, new ECB(4, 15))),\r\n        new Version(7, Int32Array.from([6, 22, 38]),\r\n            new ECBlocks(20, new ECB(2, 78)),\r\n            new ECBlocks(18, new ECB(4, 31)),\r\n            new ECBlocks(18, new ECB(2, 14),\r\n                new ECB(4, 15)),\r\n            new ECBlocks(26, new ECB(4, 13),\r\n                new ECB(1, 14))),\r\n        new Version(8, Int32Array.from([6, 24, 42]),\r\n            new ECBlocks(24, new ECB(2, 97)),\r\n            new ECBlocks(22, new ECB(2, 38),\r\n                new ECB(2, 39)),\r\n            new ECBlocks(22, new ECB(4, 18),\r\n                new ECB(2, 19)),\r\n            new ECBlocks(26, new ECB(4, 14),\r\n                new ECB(2, 15))),\r\n        new Version(9, Int32Array.from([6, 26, 46]),\r\n            new ECBlocks(30, new ECB(2, 116)),\r\n            new ECBlocks(22, new ECB(3, 36),\r\n                new ECB(2, 37)),\r\n            new ECBlocks(20, new ECB(4, 16),\r\n                new ECB(4, 17)),\r\n            new ECBlocks(24, new ECB(4, 12),\r\n                new ECB(4, 13))),\r\n        new Version(10, Int32Array.from([6, 28, 50]),\r\n            new ECBlocks(18, new ECB(2, 68),\r\n                new ECB(2, 69)),\r\n            new ECBlocks(26, new ECB(4, 43),\r\n                new ECB(1, 44)),\r\n            new ECBlocks(24, new ECB(6, 19),\r\n                new ECB(2, 20)),\r\n            new ECBlocks(28, new ECB(6, 15),\r\n                new ECB(2, 16))),\r\n        new Version(11, Int32Array.from([6, 30, 54]),\r\n            new ECBlocks(20, new ECB(4, 81)),\r\n            new ECBlocks(30, new ECB(1, 50),\r\n                new ECB(4, 51)),\r\n            new ECBlocks(28, new ECB(4, 22),\r\n                new ECB(4, 23)),\r\n            new ECBlocks(24, new ECB(3, 12),\r\n                new ECB(8, 13))),\r\n        new Version(12, Int32Array.from([6, 32, 58]),\r\n            new ECBlocks(24, new ECB(2, 92),\r\n                new ECB(2, 93)),\r\n            new ECBlocks(22, new ECB(6, 36),\r\n                new ECB(2, 37)),\r\n            new ECBlocks(26, new ECB(4, 20),\r\n                new ECB(6, 21)),\r\n            new ECBlocks(28, new ECB(7, 14),\r\n                new ECB(4, 15))),\r\n        new Version(13, Int32Array.from([6, 34, 62]),\r\n            new ECBlocks(26, new ECB(4, 107)),\r\n            new ECBlocks(22, new ECB(8, 37),\r\n                new ECB(1, 38)),\r\n            new ECBlocks(24, new ECB(8, 20),\r\n                new ECB(4, 21)),\r\n            new ECBlocks(22, new ECB(12, 11),\r\n                new ECB(4, 12))),\r\n        new Version(14, Int32Array.from([6, 26, 46, 66]),\r\n            new ECBlocks(30, new ECB(3, 115),\r\n                new ECB(1, 116)),\r\n            new ECBlocks(24, new ECB(4, 40),\r\n                new ECB(5, 41)),\r\n            new ECBlocks(20, new ECB(11, 16),\r\n                new ECB(5, 17)),\r\n            new ECBlocks(24, new ECB(11, 12),\r\n                new ECB(5, 13))),\r\n        new Version(15, Int32Array.from([6, 26, 48, 70]),\r\n            new ECBlocks(22, new ECB(5, 87),\r\n                new ECB(1, 88)),\r\n            new ECBlocks(24, new ECB(5, 41),\r\n                new ECB(5, 42)),\r\n            new ECBlocks(30, new ECB(5, 24),\r\n                new ECB(7, 25)),\r\n            new ECBlocks(24, new ECB(11, 12),\r\n                new ECB(7, 13))),\r\n        new Version(16, Int32Array.from([6, 26, 50, 74]),\r\n            new ECBlocks(24, new ECB(5, 98),\r\n                new ECB(1, 99)),\r\n            new ECBlocks(28, new ECB(7, 45),\r\n                new ECB(3, 46)),\r\n            new ECBlocks(24, new ECB(15, 19),\r\n                new ECB(2, 20)),\r\n            new ECBlocks(30, new ECB(3, 15),\r\n                new ECB(13, 16))),\r\n        new Version(17, Int32Array.from([6, 30, 54, 78]),\r\n            new ECBlocks(28, new ECB(1, 107),\r\n                new ECB(5, 108)),\r\n            new ECBlocks(28, new ECB(10, 46),\r\n                new ECB(1, 47)),\r\n            new ECBlocks(28, new ECB(1, 22),\r\n                new ECB(15, 23)),\r\n            new ECBlocks(28, new ECB(2, 14),\r\n                new ECB(17, 15))),\r\n        new Version(18, Int32Array.from([6, 30, 56, 82]),\r\n            new ECBlocks(30, new ECB(5, 120),\r\n                new ECB(1, 121)),\r\n            new ECBlocks(26, new ECB(9, 43),\r\n                new ECB(4, 44)),\r\n            new ECBlocks(28, new ECB(17, 22),\r\n                new ECB(1, 23)),\r\n            new ECBlocks(28, new ECB(2, 14),\r\n                new ECB(19, 15))),\r\n        new Version(19, Int32Array.from([6, 30, 58, 86]),\r\n            new ECBlocks(28, new ECB(3, 113),\r\n                new ECB(4, 114)),\r\n            new ECBlocks(26, new ECB(3, 44),\r\n                new ECB(11, 45)),\r\n            new ECBlocks(26, new ECB(17, 21),\r\n                new ECB(4, 22)),\r\n            new ECBlocks(26, new ECB(9, 13),\r\n                new ECB(16, 14))),\r\n        new Version(20, Int32Array.from([6, 34, 62, 90]),\r\n            new ECBlocks(28, new ECB(3, 107),\r\n                new ECB(5, 108)),\r\n            new ECBlocks(26, new ECB(3, 41),\r\n                new ECB(13, 42)),\r\n            new ECBlocks(30, new ECB(15, 24),\r\n                new ECB(5, 25)),\r\n            new ECBlocks(28, new ECB(15, 15),\r\n                new ECB(10, 16))),\r\n        new Version(21, Int32Array.from([6, 28, 50, 72, 94]),\r\n            new ECBlocks(28, new ECB(4, 116),\r\n                new ECB(4, 117)),\r\n            new ECBlocks(26, new ECB(17, 42)),\r\n            new ECBlocks(28, new ECB(17, 22),\r\n                new ECB(6, 23)),\r\n            new ECBlocks(30, new ECB(19, 16),\r\n                new ECB(6, 17))),\r\n        new Version(22, Int32Array.from([6, 26, 50, 74, 98]),\r\n            new ECBlocks(28, new ECB(2, 111),\r\n                new ECB(7, 112)),\r\n            new ECBlocks(28, new ECB(17, 46)),\r\n            new ECBlocks(30, new ECB(7, 24),\r\n                new ECB(16, 25)),\r\n            new ECBlocks(24, new ECB(34, 13))),\r\n        new Version(23, Int32Array.from([6, 30, 54, 78, 102]),\r\n            new ECBlocks(30, new ECB(4, 121),\r\n                new ECB(5, 122)),\r\n            new ECBlocks(28, new ECB(4, 47),\r\n                new ECB(14, 48)),\r\n            new ECBlocks(30, new ECB(11, 24),\r\n                new ECB(14, 25)),\r\n            new ECBlocks(30, new ECB(16, 15),\r\n                new ECB(14, 16))),\r\n        new Version(24, Int32Array.from([6, 28, 54, 80, 106]),\r\n            new ECBlocks(30, new ECB(6, 117),\r\n                new ECB(4, 118)),\r\n            new ECBlocks(28, new ECB(6, 45),\r\n                new ECB(14, 46)),\r\n            new ECBlocks(30, new ECB(11, 24),\r\n                new ECB(16, 25)),\r\n            new ECBlocks(30, new ECB(30, 16),\r\n                new ECB(2, 17))),\r\n        new Version(25, Int32Array.from([6, 32, 58, 84, 110]),\r\n            new ECBlocks(26, new ECB(8, 106),\r\n                new ECB(4, 107)),\r\n            new ECBlocks(28, new ECB(8, 47),\r\n                new ECB(13, 48)),\r\n            new ECBlocks(30, new ECB(7, 24),\r\n                new ECB(22, 25)),\r\n            new ECBlocks(30, new ECB(22, 15),\r\n                new ECB(13, 16))),\r\n        new Version(26, Int32Array.from([6, 30, 58, 86, 114]),\r\n            new ECBlocks(28, new ECB(10, 114),\r\n                new ECB(2, 115)),\r\n            new ECBlocks(28, new ECB(19, 46),\r\n                new ECB(4, 47)),\r\n            new ECBlocks(28, new ECB(28, 22),\r\n                new ECB(6, 23)),\r\n            new ECBlocks(30, new ECB(33, 16),\r\n                new ECB(4, 17))),\r\n        new Version(27, Int32Array.from([6, 34, 62, 90, 118]),\r\n            new ECBlocks(30, new ECB(8, 122),\r\n                new ECB(4, 123)),\r\n            new ECBlocks(28, new ECB(22, 45),\r\n                new ECB(3, 46)),\r\n            new ECBlocks(30, new ECB(8, 23),\r\n                new ECB(26, 24)),\r\n            new ECBlocks(30, new ECB(12, 15),\r\n                new ECB(28, 16))),\r\n        new Version(28, Int32Array.from([6, 26, 50, 74, 98, 122]),\r\n            new ECBlocks(30, new ECB(3, 117),\r\n                new ECB(10, 118)),\r\n            new ECBlocks(28, new ECB(3, 45),\r\n                new ECB(23, 46)),\r\n            new ECBlocks(30, new ECB(4, 24),\r\n                new ECB(31, 25)),\r\n            new ECBlocks(30, new ECB(11, 15),\r\n                new ECB(31, 16))),\r\n        new Version(29, Int32Array.from([6, 30, 54, 78, 102, 126]),\r\n            new ECBlocks(30, new ECB(7, 116),\r\n                new ECB(7, 117)),\r\n            new ECBlocks(28, new ECB(21, 45),\r\n                new ECB(7, 46)),\r\n            new ECBlocks(30, new ECB(1, 23),\r\n                new ECB(37, 24)),\r\n            new ECBlocks(30, new ECB(19, 15),\r\n                new ECB(26, 16))),\r\n        new Version(30, Int32Array.from([6, 26, 52, 78, 104, 130]),\r\n            new ECBlocks(30, new ECB(5, 115),\r\n                new ECB(10, 116)),\r\n            new ECBlocks(28, new ECB(19, 47),\r\n                new ECB(10, 48)),\r\n            new ECBlocks(30, new ECB(15, 24),\r\n                new ECB(25, 25)),\r\n            new ECBlocks(30, new ECB(23, 15),\r\n                new ECB(25, 16))),\r\n        new Version(31, Int32Array.from([6, 30, 56, 82, 108, 134]),\r\n            new ECBlocks(30, new ECB(13, 115),\r\n                new ECB(3, 116)),\r\n            new ECBlocks(28, new ECB(2, 46),\r\n                new ECB(29, 47)),\r\n            new ECBlocks(30, new ECB(42, 24),\r\n                new ECB(1, 25)),\r\n            new ECBlocks(30, new ECB(23, 15),\r\n                new ECB(28, 16))),\r\n        new Version(32, Int32Array.from([6, 34, 60, 86, 112, 138]),\r\n            new ECBlocks(30, new ECB(17, 115)),\r\n            new ECBlocks(28, new ECB(10, 46),\r\n                new ECB(23, 47)),\r\n            new ECBlocks(30, new ECB(10, 24),\r\n                new ECB(35, 25)),\r\n            new ECBlocks(30, new ECB(19, 15),\r\n                new ECB(35, 16))),\r\n        new Version(33, Int32Array.from([6, 30, 58, 86, 114, 142]),\r\n            new ECBlocks(30, new ECB(17, 115),\r\n                new ECB(1, 116)),\r\n            new ECBlocks(28, new ECB(14, 46),\r\n                new ECB(21, 47)),\r\n            new ECBlocks(30, new ECB(29, 24),\r\n                new ECB(19, 25)),\r\n            new ECBlocks(30, new ECB(11, 15),\r\n                new ECB(46, 16))),\r\n        new Version(34, Int32Array.from([6, 34, 62, 90, 118, 146]),\r\n            new ECBlocks(30, new ECB(13, 115),\r\n                new ECB(6, 116)),\r\n            new ECBlocks(28, new ECB(14, 46),\r\n                new ECB(23, 47)),\r\n            new ECBlocks(30, new ECB(44, 24),\r\n                new ECB(7, 25)),\r\n            new ECBlocks(30, new ECB(59, 16),\r\n                new ECB(1, 17))),\r\n        new Version(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]),\r\n            new ECBlocks(30, new ECB(12, 121),\r\n                new ECB(7, 122)),\r\n            new ECBlocks(28, new ECB(12, 47),\r\n                new ECB(26, 48)),\r\n            new ECBlocks(30, new ECB(39, 24),\r\n                new ECB(14, 25)),\r\n            new ECBlocks(30, new ECB(22, 15),\r\n                new ECB(41, 16))),\r\n        new Version(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]),\r\n            new ECBlocks(30, new ECB(6, 121),\r\n                new ECB(14, 122)),\r\n            new ECBlocks(28, new ECB(6, 47),\r\n                new ECB(34, 48)),\r\n            new ECBlocks(30, new ECB(46, 24),\r\n                new ECB(10, 25)),\r\n            new ECBlocks(30, new ECB(2, 15),\r\n                new ECB(64, 16))),\r\n        new Version(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]),\r\n            new ECBlocks(30, new ECB(17, 122),\r\n                new ECB(4, 123)),\r\n            new ECBlocks(28, new ECB(29, 46),\r\n                new ECB(14, 47)),\r\n            new ECBlocks(30, new ECB(49, 24),\r\n                new ECB(10, 25)),\r\n            new ECBlocks(30, new ECB(24, 15),\r\n                new ECB(46, 16))),\r\n        new Version(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]),\r\n            new ECBlocks(30, new ECB(4, 122),\r\n                new ECB(18, 123)),\r\n            new ECBlocks(28, new ECB(13, 46),\r\n                new ECB(32, 47)),\r\n            new ECBlocks(30, new ECB(48, 24),\r\n                new ECB(14, 25)),\r\n            new ECBlocks(30, new ECB(42, 15),\r\n                new ECB(32, 16))),\r\n        new Version(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]),\r\n            new ECBlocks(30, new ECB(20, 117),\r\n                new ECB(4, 118)),\r\n            new ECBlocks(28, new ECB(40, 47),\r\n                new ECB(7, 48)),\r\n            new ECBlocks(30, new ECB(43, 24),\r\n                new ECB(22, 25)),\r\n            new ECBlocks(30, new ECB(10, 15),\r\n                new ECB(67, 16))),\r\n        new Version(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]),\r\n            new ECBlocks(30, new ECB(19, 118),\r\n                new ECB(6, 119)),\r\n            new ECBlocks(28, new ECB(18, 47),\r\n                new ECB(31, 48)),\r\n            new ECBlocks(30, new ECB(34, 24),\r\n                new ECB(34, 25)),\r\n            new ECBlocks(30, new ECB(20, 15),\r\n                new ECB(61, 16)))\r\n    ];\r\n\r\n    private ecBlocks: ECBlocks[];\r\n    private totalCodewords: number; /*int*/\r\n\r\n    private constructor(private versionNumber: number /*int*/,\r\n        private alignmentPatternCenters: Int32Array,\r\n        ...ecBlocks: ECBlocks[]) {\r\n        this.ecBlocks = ecBlocks;\r\n        let total = 0;\r\n        const ecCodewords = ecBlocks[0].getECCodewordsPerBlock();\r\n        const ecbArray: ECB[] = ecBlocks[0].getECBlocks();\r\n        for (const ecBlock of ecbArray) {\r\n            total += ecBlock.getCount() * (ecBlock.getDataCodewords() + ecCodewords);\r\n        }\r\n        this.totalCodewords = total;\r\n    }\r\n\r\n    public getVersionNumber(): number /*int*/ {\r\n        return this.versionNumber;\r\n    }\r\n\r\n    public getAlignmentPatternCenters(): Int32Array {\r\n        return this.alignmentPatternCenters;\r\n    }\r\n\r\n    public getTotalCodewords(): number /*int*/ {\r\n        return this.totalCodewords;\r\n    }\r\n\r\n    public getDimensionForVersion(): number /*int*/ {\r\n        return 17 + 4 * this.versionNumber;\r\n    }\r\n\r\n    public getECBlocksForLevel(ecLevel: ErrorCorrectionLevel): ECBlocks {\r\n        return this.ecBlocks[ecLevel.getValue()];\r\n        // TYPESCRIPTPORT: original was using ordinal, and using the order of levels as defined in ErrorCorrectionLevel enum (LMQH)\r\n        // I will use the direct value from ErrorCorrectionLevelValues enum which in typescript goes to a number\r\n    }\r\n\r\n    /**\r\n     * <p>Deduces version information purely from QR Code dimensions.</p>\r\n     *\r\n     * @param dimension dimension in modules\r\n     * @return Version for a QR Code of that dimension\r\n     * @throws FormatException if dimension is not 1 mod 4\r\n     */\r\n    public static getProvisionalVersionForDimension(dimension: number /*int*/): Version /*throws FormatException */ {\r\n        if (dimension % 4 !== 1) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n        try {\r\n            return this.getVersionForNumber((dimension - 17) / 4);\r\n        } catch (ignored/*: IllegalArgumentException*/) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n    }\r\n\r\n    public static getVersionForNumber(versionNumber: number /*int*/): Version {\r\n        if (versionNumber < 1 || versionNumber > 40) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        return Version.VERSIONS[versionNumber - 1];\r\n    }\r\n\r\n    public static decodeVersionInformation(versionBits: number /*int*/): Version {\r\n        let bestDifference = Number.MAX_SAFE_INTEGER;\r\n        let bestVersion = 0;\r\n        for (let i = 0; i < Version.VERSION_DECODE_INFO.length; i++) {\r\n            const targetVersion = Version.VERSION_DECODE_INFO[i];\r\n            // Do the version info bits match exactly? done.\r\n            if (targetVersion === versionBits) {\r\n                return Version.getVersionForNumber(i + 7);\r\n            }\r\n            // Otherwise see if this is the closest to a real version info bit string\r\n            // we have seen so far\r\n            const bitsDifference = FormatInformation.numBitsDiffering(versionBits, targetVersion);\r\n            if (bitsDifference < bestDifference) {\r\n                bestVersion = i + 7;\r\n                bestDifference = bitsDifference;\r\n            }\r\n        }\r\n        // We can tolerate up to 3 bits of error since no two version info codewords will\r\n        // differ in less than 8 bits.\r\n        if (bestDifference <= 3) {\r\n            return Version.getVersionForNumber(bestVersion);\r\n        }\r\n        // If we didn't find a close enough match, fail\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * See ISO 18004:2006 Annex E\r\n     */\r\n    public buildFunctionPattern(): BitMatrix {\r\n        const dimension = this.getDimensionForVersion();\r\n        const bitMatrix = new BitMatrix(dimension);\r\n\r\n        // Top left finder pattern + separator + format\r\n        bitMatrix.setRegion(0, 0, 9, 9);\r\n        // Top right finder pattern + separator + format\r\n        bitMatrix.setRegion(dimension - 8, 0, 8, 9);\r\n        // Bottom left finder pattern + separator + format\r\n        bitMatrix.setRegion(0, dimension - 8, 9, 8);\r\n\r\n        // Alignment patterns\r\n        const max = this.alignmentPatternCenters.length;\r\n        for (let x = 0; x < max; x++) {\r\n            const i = this.alignmentPatternCenters[x] - 2;\r\n            for (let y = 0; y < max; y++) {\r\n                if ((x === 0 && (y === 0 || y === max - 1)) || (x === max - 1 && y === 0)) {\r\n                    // No alignment patterns near the three finder patterns\r\n                    continue;\r\n                }\r\n                bitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\r\n            }\r\n        }\r\n\r\n        // Vertical timing pattern\r\n        bitMatrix.setRegion(6, 9, 1, dimension - 17);\r\n        // Horizontal timing pattern\r\n        bitMatrix.setRegion(9, 6, dimension - 17, 1);\r\n\r\n        if (this.versionNumber > 6) {\r\n            // Version info, top right\r\n            bitMatrix.setRegion(dimension - 11, 0, 3, 6);\r\n            // Version info, bottom left\r\n            bitMatrix.setRegion(0, dimension - 11, 6, 3);\r\n        }\r\n\r\n        return bitMatrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        return '' + this.versionNumber;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/Version.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport Exception from './../../Exception';\r\n\r\nexport const enum ErrorCorrectionLevelValues {\r\n    L,\r\n    M,\r\n    Q,\r\n    H\r\n}\r\n\r\n/**\r\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\r\n * defined by the QR code standard.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class ErrorCorrectionLevel {\r\n\r\n    private static FOR_BITS = new Map<number, ErrorCorrectionLevel>();\r\n    private static FOR_VALUE = new Map<ErrorCorrectionLevelValues, ErrorCorrectionLevel>();\r\n\r\n    /** L = ~7% correction */\r\n    public static L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\r\n    /** M = ~15% correction */\r\n    public static M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\r\n    /** Q = ~25% correction */\r\n    public static Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\r\n    /** H = ~30% correction */\r\n    public static H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\r\n\r\n    private constructor(private value: ErrorCorrectionLevelValues, private stringValue: string, private bits: number /*int*/) {\r\n        ErrorCorrectionLevel.FOR_BITS.set(bits, this);\r\n        ErrorCorrectionLevel.FOR_VALUE.set(value, this);\r\n    }\r\n\r\n    public getValue(): ErrorCorrectionLevelValues/*int*/ {\r\n        return this.value;\r\n    }\r\n\r\n    public getBits(): number /*int*/ {\r\n        return this.bits;\r\n    }\r\n\r\n    public static fromString(s: string): ErrorCorrectionLevel {\r\n        switch (s) {\r\n            case 'L': return ErrorCorrectionLevel.L;\r\n            case 'M': return ErrorCorrectionLevel.M;\r\n            case 'Q': return ErrorCorrectionLevel.Q;\r\n            case 'H': return ErrorCorrectionLevel.H;\r\n            default: throw new Exception(Exception.ArgumentException, s + 'not available');\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.stringValue;\r\n    }\r\n\r\n    public equals(o: any): boolean {\r\n        if (!(o instanceof ErrorCorrectionLevel)) {\r\n            return false;\r\n        }\r\n        const other = <ErrorCorrectionLevel>o;\r\n        return this.value === other.value;\r\n    }\r\n    /**\r\n     * @param bits int containing the two bits encoding a QR Code's error correction level\r\n     * @return ErrorCorrectionLevel representing the encoded error correction level\r\n     */\r\n    public static forBits(bits: number /*int*/): ErrorCorrectionLevel {\r\n        if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        return ErrorCorrectionLevel.FOR_BITS.get(bits);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/ErrorCorrectionLevel.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\n/**\r\n * <p>This class implements a perspective transform in two dimensions. Given four source and four\r\n * destination points, it will compute the transformation implied between them. The code is based\r\n * directly upon section 3.4.2 of George Wolberg's \"Digital Image Warping\"; see pages 54-56.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class PerspectiveTransform {\r\n\r\n    private constructor(private a11: number/*float*/, private a21: number/*float*/, private a31: number/*float*/,\r\n        private a12: number/*float*/, private a22: number/*float*/, private a32: number/*float*/,\r\n        private a13: number/*float*/, private a23: number/*float*/, private a33: number/*float*/) { }\r\n\r\n    public static quadrilateralToQuadrilateral(\r\n        x0: number/*float*/, y0: number/*float*/,\r\n        x1: number/*float*/, y1: number/*float*/,\r\n        x2: number/*float*/, y2: number/*float*/,\r\n        x3: number/*float*/, y3: number/*float*/,\r\n        x0p: number/*float*/, y0p: number/*float*/,\r\n        x1p: number/*float*/, y1p: number/*float*/,\r\n        x2p: number/*float*/, y2p: number/*float*/,\r\n        x3p: number/*float*/, y3p: number/*float*/\r\n    ): PerspectiveTransform {\r\n\r\n        const qToS = PerspectiveTransform.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\r\n        const sToQ = PerspectiveTransform.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\r\n\r\n        return sToQ.times(qToS);\r\n    }\r\n\r\n    public transformPoints(points: Float32Array): void {\r\n\r\n        const max = points.length;\r\n\r\n        const a11 = this.a11;\r\n        const a12 = this.a12;\r\n        const a13 = this.a13;\r\n        const a21 = this.a21;\r\n        const a22 = this.a22;\r\n        const a23 = this.a23;\r\n        const a31 = this.a31;\r\n        const a32 = this.a32;\r\n        const a33 = this.a33;\r\n\r\n        for (let i = 0; i < max; i += 2) {\r\n            const x = points[i];\r\n            const y = points[i + 1];\r\n            const denominator = a13 * x + a23 * y + a33;\r\n            points[i] = (a11 * x + a21 * y + a31) / denominator;\r\n            points[i + 1] = (a12 * x + a22 * y + a32) / denominator;\r\n        }\r\n    }\r\n\r\n    public transformPointsWithValues(xValues: Float32Array, yValues: Float32Array): void {\r\n\r\n        const a11 = this.a11;\r\n        const a12 = this.a12;\r\n        const a13 = this.a13;\r\n        const a21 = this.a21;\r\n        const a22 = this.a22;\r\n        const a23 = this.a23;\r\n        const a31 = this.a31;\r\n        const a32 = this.a32;\r\n        const a33 = this.a33;\r\n\r\n        const n = xValues.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const x = xValues[i];\r\n            const y = yValues[i];\r\n            const denominator = a13 * x + a23 * y + a33;\r\n\r\n            xValues[i] = (a11 * x + a21 * y + a31) / denominator;\r\n            yValues[i] = (a12 * x + a22 * y + a32) / denominator;\r\n        }\r\n    }\r\n\r\n    public static squareToQuadrilateral(\r\n        x0: number/*float*/, y0: number/*float*/,\r\n        x1: number/*float*/, y1: number/*float*/,\r\n        x2: number/*float*/, y2: number/*float*/,\r\n        x3: number/*float*/, y3: number/*float*/\r\n    ): PerspectiveTransform {\r\n\r\n        const dx3 = x0 - x1 + x2 - x3;\r\n        const dy3 = y0 - y1 + y2 - y3;\r\n\r\n        if (dx3 === 0.0 && dy3 === 0.0) {\r\n            // Affine\r\n            return new PerspectiveTransform(x1 - x0, x2 - x1, x0,\r\n                y1 - y0, y2 - y1, y0,\r\n                0.0, 0.0, 1.0);\r\n        } else {\r\n            const dx1 = x1 - x2;\r\n            const dx2 = x3 - x2;\r\n            const dy1 = y1 - y2;\r\n            const dy2 = y3 - y2;\r\n\r\n            const denominator = dx1 * dy2 - dx2 * dy1;\r\n\r\n            const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\r\n            const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\r\n\r\n            return new PerspectiveTransform(\r\n                x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0,\r\n                y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0,\r\n                a13, a23, 1.0\r\n            );\r\n        }\r\n    }\r\n\r\n    public static quadrilateralToSquare(\r\n        x0: number/*float*/, y0: number/*float*/,\r\n        x1: number/*float*/, y1: number/*float*/,\r\n        x2: number/*float*/, y2: number/*float*/,\r\n        x3: number/*float*/, y3: number/*float*/\r\n    ): PerspectiveTransform {\r\n        // Here, the adjoint serves as the inverse:\r\n        return PerspectiveTransform.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\r\n    }\r\n\r\n    protected buildAdjoint(): PerspectiveTransform {\r\n        // Adjoint is the transpose of the cofactor matrix:\r\n        return new PerspectiveTransform(\r\n            this.a22 * this.a33 - this.a23 * this.a32,\r\n            this.a23 * this.a31 - this.a21 * this.a33,\r\n            this.a21 * this.a32 - this.a22 * this.a31,\r\n            this.a13 * this.a32 - this.a12 * this.a33,\r\n            this.a11 * this.a33 - this.a13 * this.a31,\r\n            this.a12 * this.a31 - this.a11 * this.a32,\r\n            this.a12 * this.a23 - this.a13 * this.a22,\r\n            this.a13 * this.a21 - this.a11 * this.a23,\r\n            this.a11 * this.a22 - this.a12 * this.a21\r\n        );\r\n    }\r\n\r\n    protected times(other: PerspectiveTransform): PerspectiveTransform {\r\n        return new PerspectiveTransform(\r\n            this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13,\r\n            this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23,\r\n            this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33,\r\n            this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13,\r\n            this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23,\r\n            this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33,\r\n            this.a13 * other.a11 + this.a23 * other.a12 + this.a33 * other.a13,\r\n            this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23,\r\n            this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33\r\n        );\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/PerspectiveTransform.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/**\r\n * These are a set of hints that you may pass to Writers to specify their behavior.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nenum EncodeHintType {\r\n\r\n    /**\r\n     * Specifies what degree of error correction to use, for example in QR Codes.\r\n     * Type depends on the encoder. For example for QR codes it's type\r\n     * {@link com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ErrorCorrectionLevel}.\r\n     * For Aztec it is of type {@link Integer}, representing the minimal percentage of error correction words.\r\n     * For PDF417 it is of type {@link Integer}, valid values being 0 to 8.\r\n     * In all cases, it can also be a {@link String} representation of the desired value as well.\r\n     * Note: an Aztec symbol should have a minimum of 25% EC words.\r\n     */\r\n    ERROR_CORRECTION,\r\n\r\n    /**\r\n     * Specifies what character encoding to use where applicable (type {@link String})\r\n     */\r\n    CHARACTER_SET,\r\n\r\n    /**\r\n     * Specifies the matrix shape for Data Matrix (type {@link com.google.zxing.datamatrix.encoder.SymbolShapeHint})\r\n     */\r\n    DATA_MATRIX_SHAPE,\r\n\r\n    /**\r\n     * Specifies a minimum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n     *\r\n     * @deprecated use width/height params in\r\n     * {@link com.google.zxing.datamatrix.DataMatrixWriter#encode(String, BarcodeFormat, int, int)}\r\n     */\r\n    /*@Deprecated*/\r\n    MIN_SIZE,\r\n\r\n    /**\r\n     * Specifies a maximum barcode size (type {@link Dimension}). Only applicable to Data Matrix now.\r\n     *\r\n     * @deprecated without replacement\r\n     */\r\n    /*@Deprecated*/\r\n    MAX_SIZE,\r\n\r\n    /**\r\n     * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary\r\n     * by format; for example it controls margin before and after the barcode horizontally for\r\n     * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    MARGIN,\r\n\r\n    /**\r\n     * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or \"true\" or \"false\"\r\n     * {@link String} value).\r\n     */\r\n    PDF417_COMPACT,\r\n\r\n    /**\r\n     * Specifies what compaction mode to use for PDF417 (type\r\n     * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its\r\n     * enum values).\r\n     */\r\n    PDF417_COMPACTION,\r\n\r\n    /**\r\n     * Specifies the minimum and maximum number of rows and columns for PDF417 (type\r\n     * {@link com.google.zxing.pdf417.encoder.Dimensions Dimensions}).\r\n     */\r\n    PDF417_DIMENSIONS,\r\n\r\n    /**\r\n     * Specifies the required number of layers for an Aztec code.\r\n     * A negative number (-1, -2, -3, -4) specifies a compact Aztec code.\r\n     * 0 indicates to use the minimum number of layers (the default).\r\n     * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code.\r\n     * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    AZTEC_LAYERS,\r\n\r\n    /**\r\n     * Specifies the exact version of QR code to be encoded.\r\n     * (Type {@link Integer}, or {@link String} representation of the integer value).\r\n     */\r\n    QR_VERSION,\r\n}\r\n\r\nexport default EncodeHintType;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/EncodeHintType.ts","import Reader from './../core/Reader';\r\nimport BinaryBitmap from './../core/BinaryBitmap';\r\nimport HybridBinarizer from './../core/common/HybridBinarizer';\r\nimport Result from './../core/Result';\r\nimport Exception from './../core/Exception';\r\nimport HTMLCanvasElementLuminanceSource from './HTMLCanvasElementLuminanceSource';\r\nimport VideoInputDevice from './VideoInputDevice';\r\n\r\n/**\r\n * Base class for browser code reader.\r\n *\r\n * @export\r\n * @class BrowserCodeReader\r\n */\r\nexport default class BrowserCodeReader {\r\n    private videoElement: HTMLVideoElement;\r\n    private imageElement: HTMLImageElement;\r\n    private canvasElement: HTMLCanvasElement;\r\n    private canvasElementContext: CanvasRenderingContext2D;\r\n    private timeoutHandler: number;\r\n    private stream: MediaStream;\r\n    private videoPlayEndedEventListener: EventListener;\r\n    private videoPlayingEventListener: EventListener;\r\n    private imageLoadedEventListener: EventListener;\r\n\r\n    /**\r\n     * Creates an instance of BrowserCodeReader.\r\n     * @param {Reader} reader The reader instance to decode the barcode\r\n     * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public constructor(private reader: Reader, private timeBetweenScansMillis: number = 500) { }\r\n\r\n    /**\r\n     * Obtain the list of available devices with type 'videoinput'.\r\n     *\r\n     * @returns {Promise<VideoInputDevice[]>} an array of available video input devices\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public getVideoInputDevices(): Promise<VideoInputDevice[]> {\r\n        return new Promise<VideoInputDevice[]>((resolve, reject) => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then((devices: MediaDeviceInfo[]) => {\r\n                    const sources = new Array<VideoInputDevice>();\r\n                    let c = 0;\r\n                    for (let i = 0, length = devices.length; i !== length; i++) {\r\n                        const device = devices[i];\r\n                        if (device.kind === 'videoinput') {\r\n                            sources.push(new VideoInputDevice(device.deviceId, device.label || `Video source ${c}`));\r\n                            c++;\r\n                        }\r\n                    }\r\n                    resolve(sources);\r\n                })\r\n                .catch((err: any) => {\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Decodes the barcode from the device specified by deviceId while showing the video in the specified video element.\r\n     *\r\n     * @param {string} [deviceId] the id of one of the devices obtained after calling getVideoInputDevices. Can be undefined, in this case it will decode from one of the available devices, preffering the main camera (environment facing) if available.\r\n     * @param {(string|HTMLVideoElement)} [videoElement] the video element in page where to show the video while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in which case no video will be shown.\r\n     * @returns {Promise<Result>} The decoding result.\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public decodeFromInputVideoDevice(deviceId?: string, videoElement?: string | HTMLVideoElement): Promise<Result> {\r\n        this.reset();\r\n\r\n        this.prepareVideoElement(videoElement);\r\n\r\n        let constraints: MediaStreamConstraints;\r\n        if (undefined === deviceId) {\r\n            constraints = {\r\n                video: { facingMode: 'environment' }\r\n            };\r\n        } else {\r\n            constraints = {\r\n                video: { deviceId: { exact: deviceId } }\r\n            };\r\n        }\r\n\r\n        const me = this;\r\n        return new Promise<Result>((resolve, reject) => {\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then((stream: MediaStream) => {\r\n                    me.stream = stream;\r\n                    me.videoElement.srcObject = stream;\r\n\r\n                    me.videoPlayingEventListener = () => {\r\n                        me.decodeOnceWithDelay(resolve, reject);\r\n                    };\r\n                    me.videoElement.addEventListener('playing', me.videoPlayingEventListener);\r\n                    me.videoElement.play();\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Decodes a barcode form a video url.\r\n     *\r\n     * @param {string} videoUrl The video url to decode from, required.\r\n     * @param {(string|HTMLVideoElement)} [videoElement] The video element where to play the video while decoding. Can be undefined in which case no video is shown.\r\n     * @returns {Promise<Result>} The decoding result.\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public decodeFromVideoSource(videoUrl: string, videoElement?: string | HTMLVideoElement): Promise<Result> {\r\n        this.reset();\r\n\r\n        this.prepareVideoElement(videoElement);\r\n\r\n        const me = this;\r\n        return new Promise<Result>((resolve, reject) => {\r\n            me.videoPlayEndedEventListener = () => {\r\n                me.stop();\r\n                reject(new Exception(Exception.NotFoundException));\r\n            };\r\n            me.videoElement.addEventListener('ended', me.videoPlayEndedEventListener);\r\n\r\n            me.videoPlayingEventListener = () => {\r\n                me.decodeOnceWithDelay(resolve, reject);\r\n            };\r\n            me.videoElement.addEventListener('playing', me.videoPlayingEventListener);\r\n\r\n            me.videoElement.setAttribute('autoplay', 'true');\r\n            me.videoElement.setAttribute('src', videoUrl);\r\n        });\r\n    }\r\n\r\n    private prepareVideoElement(videoElement?: string | HTMLVideoElement) {\r\n        if (undefined === videoElement) {\r\n            this.videoElement = document.createElement('video');\r\n            this.videoElement.width = 200;\r\n            this.videoElement.height = 200;\r\n        } else if (typeof videoElement === 'string') {\r\n            this.videoElement = <HTMLVideoElement>this.getMediaElement(videoElement, 'video');\r\n        } else {\r\n            this.videoElement = videoElement;\r\n        }\r\n        // Needed for iOS 11\r\n        this.videoElement.setAttribute('autoplay', 'true');\r\n        this.videoElement.setAttribute('muted', 'true');\r\n        this.videoElement.setAttribute('playsinline', 'true');\r\n        this.videoElement.setAttribute('autofocus', 'true');\r\n    }\r\n\r\n    private getMediaElement(mediaElementId: string, type: string) {\r\n        const mediaElement = document.getElementById(mediaElementId);\r\n        if (null === mediaElement) {\r\n            throw new Exception(Exception.ArgumentException, `element with id '${mediaElementId}' not found`);\r\n        }\r\n        if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\r\n            console.log(mediaElement.nodeName);\r\n            throw new Exception(Exception.ArgumentException, `element with id '${mediaElementId}' must be an ${type} element`);\r\n        }\r\n        return mediaElement;\r\n    }\r\n\r\n    /**\r\n     * Decodes the barcode from an image.\r\n     *\r\n     * @param {(string|HTMLImageElement)} [imageElement] The image element that can be either an element id or the element itself. Can be undefined in which case the decoding will be done from the imageUrl parameter.\r\n     * @param {string} [imageUrl]\r\n     * @returns {Promise<Result>} The decoding result.\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public decodeFromImage(imageElement?: string | HTMLImageElement, imageUrl?: string): Promise<Result> {\r\n        this.reset();\r\n\r\n        if (undefined === imageElement && undefined === imageUrl) {\r\n            throw new Exception(Exception.ArgumentException, 'either imageElement with a src set or an url must be provided');\r\n        }\r\n\r\n        this.prepareImageElement(imageElement);\r\n\r\n        const me = this;\r\n        return new Promise<Result>((resolve, reject) => {\r\n            if (undefined !== imageUrl) {\r\n                me.imageLoadedEventListener = () => {\r\n                    me.decodeOnce(resolve, reject, false, true);\r\n                };\r\n                me.imageElement.addEventListener('load', me.imageLoadedEventListener);\r\n\r\n                me.imageElement.src = imageUrl;\r\n            } else if (this.isImageLoaded(this.imageElement)) {\r\n                me.decodeOnce(resolve, reject, false, true);\r\n            } else {\r\n                throw new Exception(Exception.ArgumentException, `either src or a loaded img should be provided`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private isImageLoaded(img: HTMLImageElement) {\r\n        // During the onload event, IE correctly identifies any images that\r\n        // weren’t downloaded as not complete. Others should too. Gecko-based\r\n        // browsers act like NS4 in that they report this incorrectly.\r\n        if (!img.complete) {\r\n            return false;\r\n        }\r\n\r\n        // However, they do have two very useful properties: naturalWidth and\r\n        // naturalHeight. These give the true size of the image. If it failed\r\n        // to load, either of these should be zero.\r\n\r\n        if (img.naturalWidth === 0) {\r\n            return false;\r\n        }\r\n\r\n        // No other way of checking: assume it’s ok.\r\n        return true;\r\n    }\r\n\r\n    private prepareImageElement(imageElement?: string | HTMLImageElement) {\r\n        if (undefined === imageElement) {\r\n            this.imageElement = document.createElement('img');\r\n            this.imageElement.width = 200;\r\n            this.imageElement.height = 200;\r\n        } else if (typeof imageElement === 'string') {\r\n            this.imageElement = <HTMLImageElement>this.getMediaElement(imageElement, 'img');\r\n        } else {\r\n            this.imageElement = imageElement;\r\n        }\r\n    }\r\n\r\n    private decodeOnceWithDelay(resolve: (result: Result) => any, reject: (error: any) => any): void {\r\n        this.timeoutHandler = window.setTimeout(this.decodeOnce.bind(this, resolve, reject), this.timeBetweenScansMillis);\r\n    }\r\n\r\n    private decodeOnce(resolve: (result: Result) => any, reject: (error: any) => any, retryIfNotFound: boolean = true, retryIfChecksumOrFormatError: boolean = true): void {\r\n        if (undefined === this.canvasElementContext) {\r\n            this.prepareCaptureCanvas();\r\n        }\r\n\r\n        this.canvasElementContext.drawImage(this.videoElement || this.imageElement, 0, 0);\r\n\r\n        const luminanceSource = new HTMLCanvasElementLuminanceSource(this.canvasElement);\r\n        const binaryBitmap = new BinaryBitmap(new HybridBinarizer(luminanceSource));\r\n        try {\r\n            const result = this.readerDecode(binaryBitmap);\r\n            resolve(result);\r\n        } catch (re) {\r\n            console.log(retryIfChecksumOrFormatError, re);\r\n            if (retryIfNotFound && Exception.isOfType(re, Exception.NotFoundException)) {\r\n                console.log('not found, trying again...');\r\n                this.decodeOnceWithDelay(resolve, reject);\r\n            } else if (retryIfChecksumOrFormatError && (Exception.isOfType(re, Exception.ChecksumException) || Exception.isOfType(re, Exception.FormatException))) {\r\n                console.log('checksum or format error, trying again...', re);\r\n                this.decodeOnceWithDelay(resolve, reject);\r\n            } else {\r\n                reject(re);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected readerDecode(binaryBitmap: BinaryBitmap): Result {\r\n        return this.reader.decode(binaryBitmap);\r\n    }\r\n\r\n    private prepareCaptureCanvas() {\r\n        const canvasElement = document.createElement('canvas');\r\n        let width, height;\r\n        if (undefined !== this.videoElement) {\r\n            width = this.videoElement.videoWidth;\r\n            height = this.videoElement.videoHeight;\r\n        } else {\r\n            width = this.imageElement.naturalWidth || this.imageElement.width;\r\n            height = this.imageElement.naturalHeight || this.imageElement.height;\r\n        }\r\n        canvasElement.style.width = `${width}px`;\r\n        canvasElement.style.height = `${height}px`;\r\n        canvasElement.width = width;\r\n        canvasElement.height = height;\r\n\r\n        this.canvasElement = canvasElement;\r\n        this.canvasElementContext = canvasElement.getContext('2d');\r\n\r\n        // this.videoElement.parentElement.appendChild(this.canvasElement)\r\n    }\r\n\r\n    private stop() {\r\n        if (undefined !== this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = undefined;\r\n        }\r\n        if (undefined !== this.stream) {\r\n            this.stream.getTracks()[0].stop();\r\n            this.stream = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the code reader to the initial state. Cancels any ongoing barcode scanning from video or camera.\r\n     *\r\n     * @memberOf BrowserCodeReader\r\n     */\r\n    public reset() {\r\n        this.stop();\r\n\r\n        if (undefined !== this.videoPlayEndedEventListener && undefined !== this.videoElement) {\r\n            this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);\r\n        }\r\n        if (undefined !== this.videoPlayingEventListener && undefined !== this.videoElement) {\r\n            this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);\r\n        }\r\n        if (undefined !== this.videoElement) {\r\n            this.videoElement.srcObject = undefined;\r\n            this.videoElement.removeAttribute('src');\r\n            this.videoElement = undefined;\r\n        }\r\n        if (undefined !== this.videoPlayEndedEventListener && undefined !== this.imageElement) {\r\n            this.imageElement.removeEventListener('load', this.imageLoadedEventListener);\r\n        }\r\n        if (undefined !== this.imageElement) {\r\n            this.imageElement.src = undefined;\r\n            this.imageElement.removeAttribute('src');\r\n            this.imageElement = undefined;\r\n        }\r\n        this.canvasElementContext = undefined;\r\n        this.canvasElement = undefined;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/BrowserCodeReader.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects\r\n * accept a BinaryBitmap and attempt to decode it.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport Exception from './Exception';\r\nimport Binarizer from './Binarizer';\r\nimport BitArray from './common/BitArray';\r\nimport BitMatrix from './common/BitMatrix';\r\nimport LuminanceSource from './LuminanceSource';\r\n\r\nexport default class BinaryBitmap {\r\n    private matrix: BitMatrix;\r\n\r\n    public constructor(private binarizer: Binarizer) {\r\n        if (binarizer === null) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Binarizer must be non-null.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return The width of the bitmap.\r\n     */\r\n    public getWidth(): number /*int*/ {\r\n        return this.binarizer.getWidth();\r\n    }\r\n\r\n    /**\r\n     * @return The height of the bitmap.\r\n     */\r\n    public getHeight(): number /*int*/ {\r\n        return this.binarizer.getHeight();\r\n    }\r\n\r\n    /**\r\n     * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return\r\n     * cached data. Callers should assume this method is expensive and call it as seldom as possible.\r\n     * This method is intended for decoding 1D barcodes and may choose to apply sharpening.\r\n     *\r\n     * @param y The row to fetch, which must be in [0, bitmap height)\r\n     * @param row An optional preallocated array. If null or too small, it will be ignored.\r\n     *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.\r\n     * @return The array of bits for this row (true means black).\r\n     * @throws NotFoundException if row can't be binarized\r\n     */\r\n    public getBlackRow(y: number /*int*/, row: BitArray): BitArray  /*throws NotFoundException */ {\r\n        return this.binarizer.getBlackRow(y, row);\r\n    }\r\n\r\n    /**\r\n     * Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive\r\n     * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or\r\n     * may not apply sharpening. Therefore, a row from this matrix may not be identical to one\r\n     * fetched using getBlackRow(), so don't mix and match between them.\r\n     *\r\n     * @return The 2D array of bits for the image (true means black).\r\n     * @throws NotFoundException if image can't be binarized to make a matrix\r\n     */\r\n    public getBlackMatrix(): BitMatrix /*throws NotFoundException*/ {\r\n        // The matrix is created on demand the first time it is requested, then cached. There are two\r\n        // reasons for this:\r\n        // 1. This work will never be done if the caller only installs 1D Reader objects, or if a\r\n        //    1D Reader finds a barcode before the 2D Readers run.\r\n        // 2. This work will only be done once even if the caller installs multiple 2D Readers.\r\n        if (this.matrix === null || this.matrix === undefined) {\r\n            this.matrix = this.binarizer.getBlackMatrix();\r\n        }\r\n        return this.matrix;\r\n    }\r\n\r\n    /**\r\n     * @return Whether this bitmap can be cropped.\r\n     */\r\n    public isCropSupported(): boolean {\r\n        return this.binarizer.getLuminanceSource().isCropSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns a new object with cropped image data. Implementations may keep a reference to the\r\n     * original data rather than a copy. Only callable if isCropSupported() is true.\r\n     *\r\n     * @param left The left coordinate, which must be in [0,getWidth())\r\n     * @param top The top coordinate, which must be in [0,getHeight())\r\n     * @param width The width of the rectangle to crop.\r\n     * @param height The height of the rectangle to crop.\r\n     * @return A cropped version of this object.\r\n     */\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): BinaryBitmap {\r\n        const newSource: LuminanceSource = this.binarizer.getLuminanceSource().crop(left, top, width, height);\r\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\r\n    }\r\n\r\n    /**\r\n     * @return Whether this bitmap supports counter-clockwise rotation.\r\n     */\r\n    public isRotateSupported(): boolean {\r\n        return this.binarizer.getLuminanceSource().isRotateSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns a new object with rotated image data by 90 degrees counterclockwise.\r\n     * Only callable if {@link #isRotateSupported()} is true.\r\n     *\r\n     * @return A rotated version of this object.\r\n     */\r\n    public rotateCounterClockwise(): BinaryBitmap {\r\n        const newSource: LuminanceSource = this.binarizer.getLuminanceSource().rotateCounterClockwise();\r\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\r\n    }\r\n\r\n    /**\r\n     * Returns a new object with rotated image data by 45 degrees counterclockwise.\r\n     * Only callable if {@link #isRotateSupported()} is true.\r\n     *\r\n     * @return A rotated version of this object.\r\n     */\r\n    public rotateCounterClockwise45(): BinaryBitmap {\r\n        const newSource: LuminanceSource = this.binarizer.getLuminanceSource().rotateCounterClockwise45();\r\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        try {\r\n            return this.getBlackMatrix().toString();\r\n        } catch (e /*: NotFoundException*/) {\r\n            return '';\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/BinaryBitmap.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport Binarizer from './../Binarizer';\r\nimport LuminanceSource from './../LuminanceSource';\r\nimport GlobalHistogramBinarizer from './GlobalHistogramBinarizer';\r\nimport BitMatrix from './BitMatrix';\r\n\r\n/**\r\n * This class implements a local thresholding algorithm, which while slower than the\r\n * GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for\r\n * high frequency images of barcodes with black data on white backgrounds. For this application,\r\n * it does a much better job than a global blackpoint with severe shadows and gradients.\r\n * However it tends to produce artifacts on lower frequency images and is therefore not\r\n * a good general purpose binarizer for uses outside ZXing.\r\n *\r\n * This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers,\r\n * and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already\r\n * inherently local, and only fails for horizontal gradients. We can revisit that problem later,\r\n * but for now it was not a win to use local blocks for 1D.\r\n *\r\n * This Binarizer is the default for the unit tests and the recommended class for library users.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class HybridBinarizer extends GlobalHistogramBinarizer {\r\n\r\n    // This class uses 5x5 blocks to compute local luminance, where each block is 8x8 pixels.\r\n    // So this is the smallest dimension in each axis we can accept.\r\n    private static BLOCK_SIZE_POWER = 3;\r\n    private static BLOCK_SIZE = 1 << HybridBinarizer.BLOCK_SIZE_POWER; // ...0100...00\r\n    private static BLOCK_SIZE_MASK = HybridBinarizer.BLOCK_SIZE - 1;   // ...0011...11\r\n    private static MINIMUM_DIMENSION = HybridBinarizer.BLOCK_SIZE * 5;\r\n    private static MIN_DYNAMIC_RANGE = 24;\r\n\r\n    private matrix: BitMatrix | null = null;\r\n\r\n    public constructor(source: LuminanceSource) {\r\n        super(source);\r\n    }\r\n\r\n    /**\r\n     * Calculates the final BitMatrix once for all requests. This could be called once from the\r\n     * constructor instead, but there are some advantages to doing it lazily, such as making\r\n     * profiling easier, and not doing heavy lifting when callers don't expect it.\r\n     */\r\n    /*@Override*/\r\n    public getBlackMatrix(): BitMatrix /*throws NotFoundException*/ {\r\n        if (this.matrix !== null) {\r\n            return this.matrix;\r\n        }\r\n        const source = this.getLuminanceSource();\r\n        const width = source.getWidth();\r\n        const height = source.getHeight();\r\n        if (width >= HybridBinarizer.MINIMUM_DIMENSION && height >= HybridBinarizer.MINIMUM_DIMENSION) {\r\n            const luminances = source.getMatrix();\r\n            let subWidth = width >> HybridBinarizer.BLOCK_SIZE_POWER;\r\n            if ((width & HybridBinarizer.BLOCK_SIZE_MASK) !== 0) {\r\n                subWidth++;\r\n            }\r\n            let subHeight = height >> HybridBinarizer.BLOCK_SIZE_POWER;\r\n            if ((height & HybridBinarizer.BLOCK_SIZE_MASK) !== 0) {\r\n                subHeight++;\r\n            }\r\n            const blackPoints = HybridBinarizer.calculateBlackPoints(luminances, subWidth, subHeight, width, height);\r\n\r\n            const newMatrix = new BitMatrix(width, height);\r\n            HybridBinarizer.calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints, newMatrix);\r\n            this.matrix = newMatrix;\r\n        } else {\r\n            // If the image is too small, fall back to the global histogram approach.\r\n            this.matrix = super.getBlackMatrix();\r\n        }\r\n        return this.matrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public createBinarizer(source: LuminanceSource): Binarizer {\r\n        return new HybridBinarizer(source);\r\n    }\r\n\r\n    /**\r\n     * For each block in the image, calculate the average black point using a 5x5 grid\r\n     * of the blocks around it. Also handles the corner cases (fractional blocks are computed based\r\n     * on the last pixels in the row/column which are also used in the previous block).\r\n     */\r\n    private static calculateThresholdForBlock(luminances: Uint8ClampedArray,\r\n        subWidth: number /*int*/,\r\n        subHeight: number /*int*/,\r\n        width: number /*int*/,\r\n        height: number /*int*/,\r\n        blackPoints: Int32Array[],\r\n        matrix: BitMatrix): void {\r\n        const maxYOffset = height - HybridBinarizer.BLOCK_SIZE;\r\n        const maxXOffset = width - HybridBinarizer.BLOCK_SIZE;\r\n        for (let y = 0; y < subHeight; y++) {\r\n            let yoffset = y << HybridBinarizer.BLOCK_SIZE_POWER;\r\n            if (yoffset > maxYOffset) {\r\n                yoffset = maxYOffset;\r\n            }\r\n            const top = HybridBinarizer.cap(y, 2, subHeight - 3);\r\n            for (let x = 0; x < subWidth; x++) {\r\n                let xoffset = x << HybridBinarizer.BLOCK_SIZE_POWER;\r\n                if (xoffset > maxXOffset) {\r\n                    xoffset = maxXOffset;\r\n                }\r\n                const left = HybridBinarizer.cap(x, 2, subWidth - 3);\r\n                let sum = 0;\r\n                for (let z = -2; z <= 2; z++) {\r\n                    const blackRow = blackPoints[top + z];\r\n                    sum += blackRow[left - 2] + blackRow[left - 1] + blackRow[left] + blackRow[left + 1] + blackRow[left + 2];\r\n                }\r\n                const average = sum / 25;\r\n                HybridBinarizer.thresholdBlock(luminances, xoffset, yoffset, average, width, matrix);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static cap(value: number /*int*/, min: number /*int*/, max: number /*int*/): number /*int*/ {\r\n        return value < min ? min : value > max ? max : value;\r\n    }\r\n\r\n    /**\r\n     * Applies a single threshold to a block of pixels.\r\n     */\r\n    private static thresholdBlock(luminances: Uint8ClampedArray,\r\n        xoffset: number /*int*/,\r\n        yoffset: number /*int*/,\r\n        threshold: number /*int*/,\r\n        stride: number /*int*/,\r\n        matrix: BitMatrix): void {\r\n        for (let y = 0, offset = yoffset * stride + xoffset; y < HybridBinarizer.BLOCK_SIZE; y++ , offset += stride) {\r\n            for (let x = 0; x < HybridBinarizer.BLOCK_SIZE; x++) {\r\n                // Comparison needs to be <= so that black == 0 pixels are black even if the threshold is 0.\r\n                if ((luminances[offset + x] & 0xFF) <= threshold) {\r\n                    matrix.set(xoffset + x, yoffset + y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a single black point for each block of pixels and saves it away.\r\n     * See the following thread for a discussion of this algorithm:\r\n     *  http://groups.google.com/group/zxing/browse_thread/thread/d06efa2c35a7ddc0\r\n     */\r\n    private static calculateBlackPoints(luminances: Uint8ClampedArray,\r\n        subWidth: number /*int*/,\r\n        subHeight: number /*int*/,\r\n        width: number /*int*/,\r\n        height: number /*int*/): Int32Array[] {\r\n        const maxYOffset = height - HybridBinarizer.BLOCK_SIZE;\r\n        const maxXOffset = width - HybridBinarizer.BLOCK_SIZE;\r\n        // tslint:disable-next-line:whitespace\r\n        const blackPoints = new Array<Int32Array>(subHeight);// subWidth\r\n\r\n        for (let y = 0; y < subHeight; y++) {\r\n            blackPoints[y] = new Int32Array(subWidth);\r\n            let yoffset = y << HybridBinarizer.BLOCK_SIZE_POWER;\r\n            if (yoffset > maxYOffset) {\r\n                yoffset = maxYOffset;\r\n            }\r\n            for (let x = 0; x < subWidth; x++) {\r\n                let xoffset = x << HybridBinarizer.BLOCK_SIZE_POWER;\r\n                if (xoffset > maxXOffset) {\r\n                    xoffset = maxXOffset;\r\n                }\r\n                let sum = 0;\r\n                let min = 0xFF;\r\n                let max = 0;\r\n                for (let yy = 0, offset = yoffset * width + xoffset; yy < HybridBinarizer.BLOCK_SIZE; yy++ , offset += width) {\r\n                    for (let xx = 0; xx < HybridBinarizer.BLOCK_SIZE; xx++) {\r\n                        const pixel = luminances[offset + xx] & 0xFF;\r\n                        sum += pixel;\r\n                        // still looking for good contrast\r\n                        if (pixel < min) {\r\n                            min = pixel;\r\n                        }\r\n                        if (pixel > max) {\r\n                            max = pixel;\r\n                        }\r\n                    }\r\n                    // short-circuit min/max tests once dynamic range is met\r\n                    if (max - min > HybridBinarizer.MIN_DYNAMIC_RANGE) {\r\n                        // finish the rest of the rows quickly\r\n                        for (yy++ , offset += width; yy < HybridBinarizer.BLOCK_SIZE; yy++ , offset += width) {\r\n                            for (let xx = 0; xx < HybridBinarizer.BLOCK_SIZE; xx++) {\r\n                                sum += luminances[offset + xx] & 0xFF;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // The default estimate is the average of the values in the block.\r\n                let average = sum >> (HybridBinarizer.BLOCK_SIZE_POWER * 2);\r\n                if (max - min <= HybridBinarizer.MIN_DYNAMIC_RANGE) {\r\n                    // If variation within the block is low, assume this is a block with only light or only\r\n                    // dark pixels. In that case we do not want to use the average, as it would divide this\r\n                    // low contrast area into black and white pixels, essentially creating data out of noise.\r\n                    //\r\n                    // The default assumption is that the block is light/background. Since no estimate for\r\n                    // the level of dark pixels exists locally, use half the min for the block.\r\n                    average = min / 2;\r\n\r\n                    if (y > 0 && x > 0) {\r\n                        // Correct the \"white background\" assumption for blocks that have neighbors by comparing\r\n                        // the pixels in this block to the previously calculated black points. This is based on\r\n                        // the fact that dark barcode symbology is always surrounded by some amount of light\r\n                        // background for which reasonable black point estimates were made. The bp estimated at\r\n                        // the boundaries is used for the interior.\r\n\r\n                        // The (min < bp) is arbitrary but works better than other heuristics that were tried.\r\n                        const averageNeighborBlackPoint =\r\n                            (blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;\r\n                        if (min < averageNeighborBlackPoint) {\r\n                            average = averageNeighborBlackPoint;\r\n                        }\r\n                    }\r\n                }\r\n                blackPoints[y][x] = average;\r\n            }\r\n        }\r\n        return blackPoints;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/HybridBinarizer.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport Binarizer from './../Binarizer';\r\nimport LuminanceSource from './../LuminanceSource';\r\nimport BitArray from './BitArray';\r\nimport BitMatrix from './BitMatrix';\r\nimport Exception from './../Exception';\r\n\r\n/**\r\n * This Binarizer implementation uses the old ZXing global histogram approach. It is suitable\r\n * for low-end mobile devices which don't have enough CPU or memory to use a local thresholding\r\n * algorithm. However, because it picks a global black point, it cannot handle difficult shadows\r\n * and gradients.\r\n *\r\n * Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n * @author Sean Owen\r\n */\r\nexport default class GlobalHistogramBinarizer extends Binarizer {\r\n\r\n    private static LUMINANCE_BITS = 5;\r\n    private static LUMINANCE_SHIFT = 8 - GlobalHistogramBinarizer.LUMINANCE_BITS;\r\n    private static LUMINANCE_BUCKETS = 1 << GlobalHistogramBinarizer.LUMINANCE_BITS;\r\n    private static EMPTY = Uint8ClampedArray.from([0]);\r\n\r\n    private luminances: Uint8ClampedArray;\r\n    private buckets: Int32Array;\r\n\r\n    public constructor(source: LuminanceSource) {\r\n        super(source);\r\n        this.luminances = GlobalHistogramBinarizer.EMPTY;\r\n        this.buckets = new Int32Array(GlobalHistogramBinarizer.LUMINANCE_BUCKETS);\r\n    }\r\n\r\n    // Applies simple sharpening to the row data to improve performance of the 1D Readers.\r\n    /*@Override*/\r\n    public getBlackRow(y: number /*int*/, row: BitArray): BitArray /*throws NotFoundException*/ {\r\n        const source = this.getLuminanceSource();\r\n        const width = source.getWidth();\r\n        if (row === undefined || row === null || row.getSize() < width) {\r\n            row = new BitArray(width);\r\n        } else {\r\n            row.clear();\r\n        }\r\n\r\n        this.initArrays(width);\r\n        const localLuminances = source.getRow(y, this.luminances);\r\n        const localBuckets = this.buckets;\r\n        for (let x = 0; x < width; x++) {\r\n            localBuckets[(localLuminances[x] & 0xff) >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\r\n        }\r\n        const blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\r\n\r\n        if (width < 3) {\r\n            // Special case for very small images\r\n            for (let x = 0; x < width; x++) {\r\n                if ((localLuminances[x] & 0xff) < blackPoint) {\r\n                    row.set(x);\r\n                }\r\n            }\r\n        } else {\r\n            let left = localLuminances[0] & 0xff;\r\n            let center = localLuminances[1] & 0xff;\r\n            for (let x = 1; x < width - 1; x++) {\r\n                const right = localLuminances[x + 1] & 0xff;\r\n                // A simple -1 4 -1 box filter with a weight of 2.\r\n                if (((center * 4) - left - right) / 2 < blackPoint) {\r\n                    row.set(x);\r\n                }\r\n                left = center;\r\n                center = right;\r\n            }\r\n        }\r\n        return row;\r\n    }\r\n\r\n    // Does not sharpen the data, as this call is intended to only be used by 2D Readers.\r\n    /*@Override*/\r\n    public getBlackMatrix(): BitMatrix /*throws NotFoundException*/ {\r\n        const source = this.getLuminanceSource();\r\n        const width = source.getWidth();\r\n        const height = source.getHeight();\r\n        const matrix = new BitMatrix(width, height);\r\n\r\n        // Quickly calculates the histogram by sampling four rows from the image. This proved to be\r\n        // more robust on the blackbox tests than sampling a diagonal as we used to do.\r\n        this.initArrays(width);\r\n        const localBuckets = this.buckets;\r\n        for (let y = 1; y < 5; y++) {\r\n            const row = height * y / 5;\r\n            const localLuminances = source.getRow(row, this.luminances);\r\n            const right = Math.floor((width * 4) / 5);\r\n            for (let x = Math.floor(width / 5); x < right; x++) {\r\n                const pixel = localLuminances[x] & 0xff;\r\n                localBuckets[pixel >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\r\n            }\r\n        }\r\n        const blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\r\n\r\n        // We delay reading the entire image luminance until the black point estimation succeeds.\r\n        // Although we end up reading four rows twice, it is consistent with our motto of\r\n        // \"fail quickly\" which is necessary for continuous scanning.\r\n        const localLuminances = source.getMatrix();\r\n        for (let y = 0; y < height; y++) {\r\n            const offset = y * width;\r\n            for (let x = 0; x < width; x++) {\r\n                const pixel = localLuminances[offset + x] & 0xff;\r\n                if (pixel < blackPoint) {\r\n                    matrix.set(x, y);\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public createBinarizer(source: LuminanceSource): Binarizer {\r\n        return new GlobalHistogramBinarizer(source);\r\n    }\r\n\r\n    private initArrays(luminanceSize: number /*int*/): void {\r\n        if (this.luminances.length < luminanceSize) {\r\n            this.luminances = new Uint8ClampedArray(luminanceSize);\r\n        }\r\n        const buckets = this.buckets;\r\n        for (let x = 0; x < GlobalHistogramBinarizer.LUMINANCE_BUCKETS; x++) {\r\n            buckets[x] = 0;\r\n        }\r\n    }\r\n\r\n    private static estimateBlackPoint(buckets: Int32Array): number /*int*/ /*throws NotFoundException*/ {\r\n        // Find the tallest peak in the histogram.\r\n        const numBuckets = buckets.length;\r\n        let maxBucketCount = 0;\r\n        let firstPeak = 0;\r\n        let firstPeakSize = 0;\r\n        for (let x = 0; x < numBuckets; x++) {\r\n            if (buckets[x] > firstPeakSize) {\r\n                firstPeak = x;\r\n                firstPeakSize = buckets[x];\r\n            }\r\n            if (buckets[x] > maxBucketCount) {\r\n                maxBucketCount = buckets[x];\r\n            }\r\n        }\r\n\r\n        // Find the second-tallest peak which is somewhat far from the tallest peak.\r\n        let secondPeak = 0;\r\n        let secondPeakScore = 0;\r\n\r\n        for (let x = 0; x < numBuckets; x++) {\r\n            const distanceToBiggest = x - firstPeak;\r\n            // Encourage more distant second peaks by multiplying by square of distance.\r\n            const score = buckets[x] * distanceToBiggest * distanceToBiggest;\r\n            if (score > secondPeakScore) {\r\n                secondPeak = x;\r\n                secondPeakScore = score;\r\n            }\r\n        }\r\n\r\n        // Make sure firstPeak corresponds to the black peak.\r\n        if (firstPeak > secondPeak) {\r\n            const temp = firstPeak;\r\n            firstPeak = secondPeak;\r\n            secondPeak = temp;\r\n        }\r\n\r\n        // If there is too little contrast in the image to pick a meaningful black point, throw rather\r\n        // than waste time trying to decode the image, and risk false positives.\r\n        if (secondPeak - firstPeak <= numBuckets / 16) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        // Find a valley between them that is low and closer to the white peak.\r\n        let bestValley = secondPeak - 1;\r\n        let bestValleyScore = -1;\r\n        for (let x = secondPeak - 1; x > firstPeak; x--) {\r\n            const fromFirst = x - firstPeak;\r\n            const score = fromFirst * fromFirst * (secondPeak - x) * (maxBucketCount - buckets[x]);\r\n            if (score > bestValleyScore) {\r\n                bestValley = x;\r\n                bestValleyScore = score;\r\n            }\r\n        }\r\n\r\n        return bestValley << GlobalHistogramBinarizer.LUMINANCE_SHIFT;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/GlobalHistogramBinarizer.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport LuminanceSource from './LuminanceSource';\r\nimport BitArray from './common/BitArray';\r\nimport BitMatrix from './common/BitMatrix';\r\n\r\n/**\r\n * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.\r\n * It allows the algorithm to vary polymorphically, for example allowing a very expensive\r\n * thresholding technique for servers and a fast one for mobile. It also permits the implementation\r\n * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nabstract class Binarizer {\r\n\r\n    protected constructor(private source: LuminanceSource) { }\r\n\r\n    public getLuminanceSource(): LuminanceSource {\r\n        return this.source;\r\n    }\r\n\r\n    /**\r\n     * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return\r\n     * cached data. Callers should assume this method is expensive and call it as seldom as possible.\r\n     * This method is intended for decoding 1D barcodes and may choose to apply sharpening.\r\n     * For callers which only examine one row of pixels at a time, the same BitArray should be reused\r\n     * and passed in with each call for performance. However it is legal to keep more than one row\r\n     * at a time if needed.\r\n     *\r\n     * @param y The row to fetch, which must be in [0, bitmap height)\r\n     * @param row An optional preallocated array. If null or too small, it will be ignored.\r\n     *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.\r\n     * @return The array of bits for this row (true means black).\r\n     * @throws NotFoundException if row can't be binarized\r\n     */\r\n    public abstract getBlackRow(y: number/*iny*/, row: BitArray): BitArray; /*throws NotFoundException*/\r\n\r\n    /**\r\n     * Converts a 2D array of luminance data to 1 bit data. As above, assume this method is expensive\r\n     * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or\r\n     * may not apply sharpening. Therefore, a row from this matrix may not be identical to one\r\n     * fetched using getBlackRow(), so don't mix and match between them.\r\n     *\r\n     * @return The 2D array of bits for the image (true means black).\r\n     * @throws NotFoundException if image can't be binarized to make a matrix\r\n     */\r\n    public abstract getBlackMatrix(): BitMatrix; /*throws NotFoundException*/\r\n\r\n    /**\r\n     * Creates a new object with the same type as this Binarizer implementation, but with pristine\r\n     * state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache\r\n     * of 1 bit data. See Effective Java for why we can't use Java's clone() method.\r\n     *\r\n     * @param source The LuminanceSource this Binarizer will operate on.\r\n     * @return A new concrete Binarizer implementation object.\r\n     */\r\n    public abstract createBinarizer(source: LuminanceSource): Binarizer;\r\n\r\n    public getWidth(): number /*int*/ {\r\n        return this.source.getWidth();\r\n    }\r\n\r\n    public getHeight(): number /*int*/ {\r\n        return this.source.getHeight();\r\n    }\r\n}\r\n\r\nexport default Binarizer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Binarizer.ts","import InvertedLuminanceSource from './../core/InvertedLuminanceSource';\r\nimport LuminanceSource from './../core/LuminanceSource';\r\nimport Exception from './../core/Exception';\r\n\r\nexport default class HTMLCanvasElementLuminanceSource extends LuminanceSource {\r\n    private buffer: Uint8ClampedArray;\r\n\r\n    private static DEGREE_TO_RADIANS = Math.PI / 180;\r\n\r\n    private tempCanvasElement: HTMLCanvasElement = null;\r\n\r\n    public constructor(private canvas: HTMLCanvasElement) {\r\n        super(canvas.width, canvas.height);\r\n\r\n        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\r\n    }\r\n\r\n    private static makeBufferFromCanvasImageData(canvas: HTMLCanvasElement): Uint8ClampedArray {\r\n        const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\r\n        return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\r\n    }\r\n\r\n    private static toGrayscaleBuffer(imageBuffer: Uint8ClampedArray, width: number, height: number): Uint8ClampedArray {\r\n        const grayscaleBuffer = new Uint8ClampedArray(width * height);\r\n        for (let i = 0, j = 0, length = imageBuffer.length; i < length; i += 4, j++) {\r\n            let gray;\r\n            const alpha = imageBuffer[i + 3];\r\n            // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\r\n            // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\r\n            // barcode image. Force any such pixel to be white:\r\n            if (alpha === 0) {\r\n                gray = 0xFF;\r\n            } else {\r\n                const pixelR = imageBuffer[i];\r\n                const pixelG = imageBuffer[i + 1];\r\n                const pixelB = imageBuffer[i + 2];\r\n                // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\r\n                // (306*R) >> 10 is approximately equal to R*0.299, and so on.\r\n                // 0x200 >> 10 is 0.5, it implements rounding.\r\n                gray = (306 * pixelR +\r\n                    601 * pixelG +\r\n                    117 * pixelB +\r\n                    0x200) >> 10;\r\n            }\r\n            grayscaleBuffer[j] = gray;\r\n        }\r\n        return grayscaleBuffer;\r\n    }\r\n\r\n    public getRow(y: number /*int*/, row: Uint8ClampedArray): Uint8ClampedArray {\r\n        if (y < 0 || y >= this.getHeight()) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Requested row is outside the image: ' + y);\r\n        }\r\n        const width: number /*int*/ = this.getWidth();\r\n        const start = y * width;\r\n        if (row === null) {\r\n            row = this.buffer.slice(start, start + width);\r\n        } else {\r\n            if (row.length < width) {\r\n                row = new Uint8ClampedArray(width);\r\n            }\r\n            // The underlying raster of image consists of bytes with the luminance values\r\n            // TODO: can avoid set/slice?\r\n            row.set(this.buffer.slice(start, start + width));\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    public getMatrix(): Uint8ClampedArray {\r\n        return this.buffer;\r\n    }\r\n\r\n    public isCropSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): LuminanceSource {\r\n        this.crop(left, top, width, height);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This is always true, since the image is a gray-scale image.\r\n     *\r\n     * @return true\r\n     */\r\n    public isRotateSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public rotateCounterClockwise(): LuminanceSource {\r\n        this.rotate(-90);\r\n        return this;\r\n    }\r\n\r\n    public rotateCounterClockwise45(): LuminanceSource {\r\n        this.rotate(-45);\r\n        return this;\r\n    }\r\n\r\n    private getTempCanvasElement() {\r\n        if (null === this.tempCanvasElement) {\r\n            const tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\r\n            tempCanvasElement.style.width = `${this.canvas.width}px`;\r\n            tempCanvasElement.style.height = `${this.canvas.height}px`;\r\n        }\r\n\r\n        return this.tempCanvasElement;\r\n    }\r\n\r\n    private rotate(angle: number) {\r\n        const tempCanvasElement = this.getTempCanvasElement();\r\n        const tempContext = tempCanvasElement.getContext('2d');\r\n        tempContext.rotate(angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS);\r\n        tempContext.drawImage(this.canvas, 0, 0);\r\n        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\r\n        return this;\r\n    }\r\n\r\n    public invert(): LuminanceSource {\r\n        return new InvertedLuminanceSource(this);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/HTMLCanvasElementLuminanceSource.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/*import java.util.EnumMap;*/\r\n/*import java.util.Map;*/\r\nimport ResultPoint from './ResultPoint';\r\nimport BarcodeFormat from './BarcodeFormat';\r\nimport System from './util/System';\r\nimport ResultMetadataType from './ResultMetadataType';\r\n\r\n/**\r\n * <p>Encapsulates the result of decoding a barcode within an image.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class Result {\r\n\r\n    private resultMetadata: Map<ResultMetadataType, Object>;\r\n\r\n    // public constructor(private text: string,\r\n    //               Uint8Array rawBytes,\r\n    //               ResultPoconst resultPoints: Int32Array,\r\n    //               BarcodeFormat format) {\r\n    //   this(text, rawBytes, resultPoints, format, System.currentTimeMillis())\r\n    // }\r\n\r\n    // public constructor(text: string,\r\n    //               Uint8Array rawBytes,\r\n    //               ResultPoconst resultPoints: Int32Array,\r\n    //               BarcodeFormat format,\r\n    //               long timestamp) {\r\n    //   this(text, rawBytes, rawBytes == null ? 0 : 8 * rawBytes.length,\r\n    //        resultPoints, format, timestamp)\r\n    // }\r\n\r\n    public constructor(private text: string,\r\n        private rawBytes: Uint8Array,\r\n        private numBits: number /*int*/,\r\n        private resultPoints: Array<ResultPoint>,\r\n        private format: BarcodeFormat,\r\n        private timestamp: number/*long*/) {\r\n        this.text = text;\r\n        this.rawBytes = rawBytes;\r\n        if (undefined === numBits || null === numBits) {\r\n            this.numBits = (rawBytes === null || rawBytes === undefined) ? 0 : 8 * rawBytes.length;\r\n        } else {\r\n            this.numBits = numBits;\r\n        }\r\n        this.resultPoints = resultPoints;\r\n        this.format = format;\r\n        this.resultMetadata = null;\r\n        if (undefined === timestamp || null === timestamp) {\r\n            this.timestamp = System.currentTimeMillis();\r\n        } else {\r\n            this.timestamp = timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return raw text encoded by the barcode\r\n     */\r\n    public getText(): string {\r\n        return this.text;\r\n    }\r\n\r\n    /**\r\n     * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}\r\n     */\r\n    public getRawBytes(): Uint8Array {\r\n        return this.rawBytes;\r\n    }\r\n\r\n    /**\r\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\r\n     * @since 3.3.0\r\n     */\r\n    public getNumBits(): number /*int*/ {\r\n        return this.numBits;\r\n    }\r\n\r\n    /**\r\n     * @return points related to the barcode in the image. These are typically points\r\n     *         identifying finder patterns or the corners of the barcode. The exact meaning is\r\n     *         specific to the type of barcode that was decoded.\r\n     */\r\n    public getResultPoints(): Array<ResultPoint> {\r\n        return this.resultPoints;\r\n    }\r\n\r\n    /**\r\n     * @return {@link BarcodeFormat} representing the format of the barcode that was decoded\r\n     */\r\n    public getBarcodeFormat(): BarcodeFormat {\r\n        return this.format;\r\n    }\r\n\r\n    /**\r\n     * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be\r\n     *   {@code null}. This contains optional metadata about what was detected about the barcode,\r\n     *   like orientation.\r\n     */\r\n    public getResultMetadata(): Map<ResultMetadataType, Object> {\r\n        return this.resultMetadata;\r\n    }\r\n\r\n    public putMetadata(type: ResultMetadataType, value: Object): void {\r\n        if (this.resultMetadata === null) {\r\n            this.resultMetadata = new Map<ResultMetadataType, Object>();\r\n        }\r\n        this.resultMetadata.set(type, value);\r\n    }\r\n\r\n    public putAllMetadata(metadata: Map<ResultMetadataType, Object>): void {\r\n        if (metadata !== null) {\r\n            if (this.resultMetadata === null) {\r\n                this.resultMetadata = metadata;\r\n            } else {\r\n                this.resultMetadata = new Map(metadata);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addResultPoints(newPoints: Array<ResultPoint>): void {\r\n        const oldPoints = this.resultPoints;\r\n        if (oldPoints === null) {\r\n            this.resultPoints = newPoints;\r\n        } else if (newPoints !== null && newPoints.length > 0) {\r\n            const allPoints = new ResultPoint[oldPoints.length + newPoints.length];\r\n            System.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);\r\n            System.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);\r\n            this.resultPoints = allPoints;\r\n        }\r\n    }\r\n\r\n    public getTimestamp(): number/*long*/ {\r\n        return this.timestamp;\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/Result.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/**\r\n * Represents some type of metadata about the result of the decoding that the decoder\r\n * wishes to communicate back to the caller.\r\n *\r\n * @author Sean Owen\r\n */\r\nenum ResultMetadataType {\r\n\r\n    /**\r\n     * Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.\r\n     */\r\n    OTHER,\r\n\r\n    /**\r\n     * Denotes the likely approximate orientation of the barcode in the image. This value\r\n     * is given as degrees rotated clockwise from the normal, upright orientation.\r\n     * For example a 1D barcode which was found by reading top-to-bottom would be\r\n     * said to have orientation \"90\". This key maps to an {@link Integer} whose\r\n     * value is in the range [0,360).\r\n     */\r\n    ORIENTATION,\r\n\r\n    /**\r\n     * <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'\r\n     * which is sometimes used to encode binary data. While {@link Result} makes available\r\n     * the complete raw bytes in the barcode for these formats, it does not offer the bytes\r\n     * from the byte segments alone.</p>\r\n     *\r\n     * <p>This maps to a {@link java.util.List} of byte arrays corresponding to the\r\n     * raw bytes in the byte segments in the barcode, in order.</p>\r\n     */\r\n    BYTE_SEGMENTS,\r\n\r\n    /**\r\n     * Error correction level used, if applicable. The value type depends on the\r\n     * format, but is typically a String.\r\n     */\r\n    ERROR_CORRECTION_LEVEL,\r\n\r\n    /**\r\n     * For some periodicals, indicates the issue number as an {@link Integer}.\r\n     */\r\n    ISSUE_NUMBER,\r\n\r\n    /**\r\n     * For some products, indicates the suggested retail price in the barcode as a\r\n     * formatted {@link String}.\r\n     */\r\n    SUGGESTED_PRICE,\r\n\r\n    /**\r\n     * For some products, the possible country of manufacture as a {@link String} denoting the\r\n     * ISO country code. Some map to multiple possible countries, like \"US/CA\".\r\n     */\r\n    POSSIBLE_COUNTRY,\r\n\r\n    /**\r\n     * For some products, the extension text\r\n     */\r\n    UPC_EAN_EXTENSION,\r\n\r\n    /**\r\n     * PDF417-specific metadata\r\n     */\r\n    PDF417_EXTRA_METADATA,\r\n\r\n    /**\r\n     * If the code format supports structured append and the current scanned code is part of one then the\r\n     * sequence number is given with it.\r\n     */\r\n    STRUCTURED_APPEND_SEQUENCE,\r\n\r\n    /**\r\n     * If the code format supports structured append and the current scanned code is part of one then the\r\n     * parity is given with it.\r\n     */\r\n    STRUCTURED_APPEND_PARITY,\r\n\r\n}\r\n\r\nexport default ResultMetadataType;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/ResultMetadataType.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.reedsolomon {*/\r\n\r\nimport GenericGF from './GenericGF';\r\nimport GenericGFPoly from './GenericGFPoly';\r\nimport Exception from './../../Exception';\r\n\r\n/**\r\n * <p>Implements Reed-Solomon decoding, as the name implies.</p>\r\n *\r\n * <p>The algorithm will not be explained here, but the following references were helpful\r\n * in creating this implementation:</p>\r\n *\r\n * <ul>\r\n * <li>Bruce Maggs.\r\n * <a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps\">\r\n * \"Decoding Reed-Solomon Codes\"</a> (see discussion of Forney's Formula)</li>\r\n * <li>J.I. Hall. <a href=\"www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf\">\r\n * \"Chapter 5. Generalized Reed-Solomon Codes\"</a>\r\n * (see discussion of Euclidean algorithm)</li>\r\n * </ul>\r\n *\r\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\r\n * port of his C++ Reed-Solomon implementation.</p>\r\n *\r\n * @author Sean Owen\r\n * @author William Rucklidge\r\n * @author sanfordsquires\r\n */\r\nexport default class ReedSolomonDecoder {\r\n\r\n    public constructor(private field: GenericGF) { }\r\n\r\n    /**\r\n     * <p>Decodes given set of received codewords, which include both data and error-correction\r\n     * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\r\n     * in the input.</p>\r\n     *\r\n     * @param received data and error-correction codewords\r\n     * @param twoS number of error-correction codewords available\r\n     * @throws ReedSolomonException if decoding fails for any reason\r\n     */\r\n    public decode(received: Int32Array, twoS: number /*int*/): void /*throws ReedSolomonException*/ {\r\n        const field = this.field;\r\n        const poly = new GenericGFPoly(field, received);\r\n        const syndromeCoefficients = new Int32Array(twoS);\r\n        let noError: boolean = true;\r\n        for (let i = 0; i < twoS; i++) {\r\n            const evalResult = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\r\n            syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalResult;\r\n            if (evalResult !== 0) {\r\n                noError = false;\r\n            }\r\n        }\r\n        if (noError) {\r\n            return;\r\n        }\r\n        const syndrome = new GenericGFPoly(field, syndromeCoefficients);\r\n        const sigmaOmega = this.runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\r\n        const sigma = sigmaOmega[0];\r\n        const omega = sigmaOmega[1];\r\n        const errorLocations = this.findErrorLocations(sigma);\r\n        const errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);\r\n        for (let i = 0; i < errorLocations.length; i++) {\r\n            const position = received.length - 1 - field.log(errorLocations[i]);\r\n            if (position < 0) {\r\n                throw new Exception(Exception.ReedSolomonException, 'Bad error location');\r\n            }\r\n            received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\r\n        }\r\n    }\r\n\r\n    private runEuclideanAlgorithm(a: GenericGFPoly, b: GenericGFPoly, R: number /*int*/): GenericGFPoly[] {\r\n        // Assume a's degree is >= b's\r\n        if (a.getDegree() < b.getDegree()) {\r\n            const temp = a;\r\n            a = b;\r\n            b = temp;\r\n        }\r\n\r\n        const field = this.field;\r\n\r\n        let rLast = a;\r\n        let r = b;\r\n        let tLast = field.getZero();\r\n        let t = field.getOne();\r\n\r\n        // Run Euclidean algorithm until r's degree is less than R/2\r\n        while (r.getDegree() >= R / 2) {\r\n            let rLastLast = rLast;\r\n            let tLastLast = tLast;\r\n            rLast = r;\r\n            tLast = t;\r\n\r\n            // Divide rLastLast by rLast, with quotient in q and remainder in r\r\n            if (rLast.isZero()) {\r\n                // Oops, Euclidean algorithm already terminated?\r\n                throw new Exception(Exception.ReedSolomonException, 'r_{i-1} was zero');\r\n            }\r\n            r = rLastLast;\r\n            let q = field.getZero();\r\n            const denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());\r\n            const dltInverse = field.inverse(denominatorLeadingTerm);\r\n            while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {\r\n                const degreeDiff = r.getDegree() - rLast.getDegree();\r\n                const scale = field.multiply(r.getCoefficient(r.getDegree()), dltInverse);\r\n                q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\r\n                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\r\n            }\r\n\r\n            t = q.multiply(tLast).addOrSubtract(tLastLast);\r\n\r\n            if (r.getDegree() >= rLast.getDegree()) {\r\n                throw new Exception(Exception.IllegalStateException, 'Division algorithm failed to reduce polynomial?');\r\n            }\r\n        }\r\n\r\n        const sigmaTildeAtZero = t.getCoefficient(0);\r\n        if (sigmaTildeAtZero === 0) {\r\n            throw new Exception(Exception.ReedSolomonException, 'sigmaTilde(0) was zero');\r\n        }\r\n\r\n        const inverse = field.inverse(sigmaTildeAtZero);\r\n        const sigma = t.multiplyScalar(inverse);\r\n        const omega = r.multiplyScalar(inverse);\r\n        return [sigma, omega];\r\n    }\r\n\r\n    private findErrorLocations(errorLocator: GenericGFPoly): Int32Array /*throws ReedSolomonException*/ {\r\n        // This is a direct application of Chien's search\r\n        const numErrors = errorLocator.getDegree();\r\n        if (numErrors === 1) { // shortcut\r\n            return Int32Array.from([errorLocator.getCoefficient(1)]);\r\n        }\r\n        const result = new Int32Array(numErrors);\r\n        let e = 0;\r\n        const field = this.field;\r\n        for (let i = 1; i < field.getSize() && e < numErrors; i++) {\r\n            if (errorLocator.evaluateAt(i) === 0) {\r\n                result[e] = field.inverse(i);\r\n                e++;\r\n            }\r\n        }\r\n        if (e !== numErrors) {\r\n            throw new Exception(Exception.ReedSolomonException, 'Error locator degree does not match number of roots');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private findErrorMagnitudes(errorEvaluator: GenericGFPoly, errorLocations: Int32Array): Int32Array {\r\n        // This is directly applying Forney's Formula\r\n        const s = errorLocations.length;\r\n        const result = new Int32Array(s);\r\n        const field = this.field;\r\n        for (let i = 0; i < s; i++) {\r\n            const xiInverse = field.inverse(errorLocations[i]);\r\n            let denominator = 1;\r\n            for (let j = 0; j < s; j++) {\r\n                if (i !== j) {\r\n                    // denominator = field.multiply(denominator,\r\n                    //    GenericGF.addOrSubtract(1, field.multiply(errorLocations[j], xiInverse)))\r\n                    // Above should work but fails on some Apple and Linux JDKs due to a Hotspot bug.\r\n                    // Below is a funny-looking workaround from Steven Parkes\r\n                    const term = field.multiply(errorLocations[j], xiInverse);\r\n                    const termPlus1 = (term & 0x1) === 0 ? term | 1 : term & ~1;\r\n                    denominator = field.multiply(denominator, termPlus1);\r\n                }\r\n            }\r\n            result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse),\r\n                field.inverse(denominator));\r\n            if (field.getGeneratorBase() !== 0) {\r\n                result[i] = field.multiply(result[i], xiInverse);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/reedsolomon/ReedSolomonDecoder.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport ErrorCorrectionLevel from './ErrorCorrectionLevel';\r\nimport Integer from './../../util/Integer';\r\n\r\n/**\r\n * <p>Encapsulates a QR Code's format information, including the data mask used and\r\n * error correction level.</p>\r\n *\r\n * @author Sean Owen\r\n * @see DataMask\r\n * @see ErrorCorrectionLevel\r\n */\r\nexport default class FormatInformation {\r\n\r\n    private static FORMAT_INFO_MASK_QR = 0x5412;\r\n\r\n    /**\r\n     * See ISO 18004:2006, Annex C, Table C.1\r\n     */\r\n    private static FORMAT_INFO_DECODE_LOOKUP = [\r\n        Int32Array.from([0x5412, 0x00]),\r\n        Int32Array.from([0x5125, 0x01]),\r\n        Int32Array.from([0x5E7C, 0x02]),\r\n        Int32Array.from([0x5B4B, 0x03]),\r\n        Int32Array.from([0x45F9, 0x04]),\r\n        Int32Array.from([0x40CE, 0x05]),\r\n        Int32Array.from([0x4F97, 0x06]),\r\n        Int32Array.from([0x4AA0, 0x07]),\r\n        Int32Array.from([0x77C4, 0x08]),\r\n        Int32Array.from([0x72F3, 0x09]),\r\n        Int32Array.from([0x7DAA, 0x0A]),\r\n        Int32Array.from([0x789D, 0x0B]),\r\n        Int32Array.from([0x662F, 0x0C]),\r\n        Int32Array.from([0x6318, 0x0D]),\r\n        Int32Array.from([0x6C41, 0x0E]),\r\n        Int32Array.from([0x6976, 0x0F]),\r\n        Int32Array.from([0x1689, 0x10]),\r\n        Int32Array.from([0x13BE, 0x11]),\r\n        Int32Array.from([0x1CE7, 0x12]),\r\n        Int32Array.from([0x19D0, 0x13]),\r\n        Int32Array.from([0x0762, 0x14]),\r\n        Int32Array.from([0x0255, 0x15]),\r\n        Int32Array.from([0x0D0C, 0x16]),\r\n        Int32Array.from([0x083B, 0x17]),\r\n        Int32Array.from([0x355F, 0x18]),\r\n        Int32Array.from([0x3068, 0x19]),\r\n        Int32Array.from([0x3F31, 0x1A]),\r\n        Int32Array.from([0x3A06, 0x1B]),\r\n        Int32Array.from([0x24B4, 0x1C]),\r\n        Int32Array.from([0x2183, 0x1D]),\r\n        Int32Array.from([0x2EDA, 0x1E]),\r\n        Int32Array.from([0x2BED, 0x1F]),\r\n    ];\r\n\r\n    private errorCorrectionLevel: ErrorCorrectionLevel;\r\n    private dataMask: number; /*byte*/\r\n\r\n    private constructor(formatInfo: number /*int*/) {\r\n        // Bits 3,4\r\n        this.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);\r\n        // Bottom 3 bits\r\n        this.dataMask = /*(byte) */(formatInfo & 0x07);\r\n    }\r\n\r\n    public static numBitsDiffering(a: number /*int*/, b: number /*int*/): number /*int*/ {\r\n        return Integer.bitCount(a ^ b);\r\n    }\r\n\r\n    /**\r\n     * @param maskedFormatInfo1 format info indicator, with mask still applied\r\n     * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\r\n     *  to establish best match\r\n     * @return information about the format it specifies, or {@code null}\r\n     *  if doesn't seem to match any known pattern\r\n     */\r\n    public static decodeFormatInformation(maskedFormatInfo1: number /*int*/, maskedFormatInfo2: number /*int*/): FormatInformation {\r\n        const formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\r\n        if (formatInfo !== null) {\r\n            return formatInfo;\r\n        }\r\n        // Should return null, but, some QR codes apparently\r\n        // do not mask this info. Try again by actually masking the pattern\r\n        // first\r\n        return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR,\r\n            maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\r\n    }\r\n\r\n    private static doDecodeFormatInformation(maskedFormatInfo1: number /*int*/, maskedFormatInfo2: number /*int*/): FormatInformation {\r\n        // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\r\n        let bestDifference = Number.MAX_SAFE_INTEGER;\r\n        let bestFormatInfo = 0;\r\n        for (const decodeInfo of FormatInformation.FORMAT_INFO_DECODE_LOOKUP) {\r\n            const targetInfo = decodeInfo[0];\r\n            if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\r\n                // Found an exact match\r\n                return new FormatInformation(decodeInfo[1]);\r\n            }\r\n            let bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\r\n            if (bitsDifference < bestDifference) {\r\n                bestFormatInfo = decodeInfo[1];\r\n                bestDifference = bitsDifference;\r\n            }\r\n            if (maskedFormatInfo1 !== maskedFormatInfo2) {\r\n                // also try the other option\r\n                bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\r\n                if (bitsDifference < bestDifference) {\r\n                    bestFormatInfo = decodeInfo[1];\r\n                    bestDifference = bitsDifference;\r\n                }\r\n            }\r\n        }\r\n        // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\r\n        // differing means we found a match\r\n        if (bestDifference <= 3) {\r\n            return new FormatInformation(bestFormatInfo);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getErrorCorrectionLevel(): ErrorCorrectionLevel {\r\n        return this.errorCorrectionLevel;\r\n    }\r\n\r\n    public getDataMask(): number/*byte*/ {\r\n        return this.dataMask;\r\n    }\r\n\r\n    /*@Override*/\r\n    public hashCode(): number /*int*/ {\r\n        return (this.errorCorrectionLevel.getBits() << 3) | this.dataMask;\r\n    }\r\n\r\n    /*@Override*/\r\n    public equals(o: Object): boolean {\r\n        if (!(o instanceof FormatInformation)) {\r\n            return false;\r\n        }\r\n        const other = <FormatInformation>o;\r\n        return this.errorCorrectionLevel === other.errorCorrectionLevel &&\r\n            this.dataMask === other.dataMask;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/FormatInformation.ts","/*\r\n * Copyright 2013 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport ResultPoint from './../../ResultPoint';\r\n\r\n/**\r\n * Meta-data container for QR Code decoding. Instances of this class may be used to convey information back to the\r\n * decoding caller. Callers are expected to process this.\r\n *\r\n * @see com.google.zxing.common.DecoderResult#getOther()\r\n */\r\nexport default class QRCodeDecoderMetaData {\r\n\r\n\r\n    public constructor(private mirrored: boolean) { }\r\n\r\n    /**\r\n     * @return true if the QR Code was mirrored.\r\n     */\r\n    public isMirrored(): boolean {\r\n        return this.mirrored;\r\n    }\r\n\r\n    /**\r\n     * Apply the result points' order correction due to mirroring.\r\n     *\r\n     * @param points Array of points to apply mirror correction to.\r\n     */\r\n    public applyMirroredCorrection(points: Array<ResultPoint>): void {\r\n        if (!this.mirrored || points === null || points.length < 3) {\r\n            return;\r\n        }\r\n        const bottomLeft = points[0];\r\n        points[0] = points[2];\r\n        points[2] = bottomLeft;\r\n        // No need to 'fix' top-left and alignment pattern.\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/QRCodeDecoderMetaData.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport Exception from './../Exception';\r\n\r\n/**\r\n * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the\r\n * number of bits read is not often a multiple of 8.</p>\r\n *\r\n * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array\r\n * it passed in, in which case all bets are off.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class BitSource {\r\n\r\n    private byteOffset: number; /*int*/\r\n    private bitOffset: number; /*int*/\r\n\r\n    /**\r\n     * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.\r\n     * Bits are read within a byte from most-significant to least-significant bit.\r\n     */\r\n    public constructor(private bytes: Uint8Array) {\r\n        this.byteOffset = 0;\r\n        this.bitOffset = 0;\r\n    }\r\n\r\n    /**\r\n     * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.\r\n     */\r\n    public getBitOffset(): number /*int*/ {\r\n        return this.bitOffset;\r\n    }\r\n\r\n    /**\r\n     * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.\r\n     */\r\n    public getByteOffset(): number /*int*/ {\r\n        return this.byteOffset;\r\n    }\r\n\r\n    /**\r\n     * @param numBits number of bits to read\r\n     * @return int representing the bits read. The bits will appear as the least-significant\r\n     *         bits of the int\r\n     * @throws IllegalArgumentException if numBits isn't in [1,32] or more than is available\r\n     */\r\n    public readBits(numBits: number /*int*/): number /*int*/ {\r\n        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\r\n            throw new Exception(Exception.IllegalArgumentException, '' + numBits);\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        let bitOffset = this.bitOffset;\r\n        let byteOffset = this.byteOffset;\r\n\r\n        const bytes = this.bytes;\r\n        // First, read remainder from current byte\r\n        if (bitOffset > 0) {\r\n            const bitsLeft = 8 - bitOffset;\r\n            const toRead = numBits < bitsLeft ? numBits : bitsLeft;\r\n            const bitsToNotRead = bitsLeft - toRead;\r\n            const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\r\n\r\n            result = (bytes[byteOffset] & mask) >> bitsToNotRead;\r\n            numBits -= toRead;\r\n            bitOffset += toRead;\r\n\r\n            if (bitOffset === 8) {\r\n                bitOffset = 0;\r\n                byteOffset++;\r\n            }\r\n        }\r\n\r\n        // Next read whole bytes\r\n        if (numBits > 0) {\r\n\r\n            while (numBits >= 8) {\r\n                result = (result << 8) | (bytes[byteOffset] & 0xFF);\r\n                byteOffset++;\r\n                numBits -= 8;\r\n            }\r\n\r\n            // Finally read a partial byte\r\n            if (numBits > 0) {\r\n                const bitsToNotRead = 8 - numBits;\r\n                const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\r\n\r\n                result = (result << numBits) | ((bytes[byteOffset] & mask) >> bitsToNotRead);\r\n                bitOffset += numBits;\r\n            }\r\n        }\r\n\r\n        this.bitOffset = bitOffset;\r\n        this.byteOffset = byteOffset;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @return number of bits that can be read successfully\r\n     */\r\n    public available(): number /*int*/ {\r\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/BitSource.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\n/*import java.util.List;*/\r\n\r\n/**\r\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\r\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\r\n * as well as a String interpretation of those bytes, if applicable.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class DecoderResult {\r\n\r\n    private numBits: number; /*int*/\r\n    private errorsCorrected: number; /*Integer*/\r\n    private erasures: number; /*Integer*/\r\n    private other: any;\r\n\r\n    // public constructor(rawBytes: Uint8Array,\r\n    //                      text: string,\r\n    //                      List<Uint8Array> byteSegments,\r\n    //                      String ecLevel) {\r\n    //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\r\n    // }\r\n\r\n    public constructor(private rawBytes: Uint8Array,\r\n        private text: string,\r\n        private byteSegments: Uint8Array[],\r\n        private ecLevel: string,\r\n        private structuredAppendSequenceNumber: number /*int*/ = -1,\r\n        private structuredAppendParity: number /*int*/ = -1) {\r\n        this.numBits = (rawBytes === undefined || rawBytes === null) ? 0 : 8 * rawBytes.length;\r\n    }\r\n\r\n    /**\r\n     * @return raw bytes representing the result, or {@code null} if not applicable\r\n     */\r\n    public getRawBytes(): Uint8Array {\r\n        return this.rawBytes;\r\n    }\r\n\r\n    /**\r\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\r\n     * @since 3.3.0\r\n     */\r\n    public getNumBits(): number /*int*/ {\r\n        return this.numBits;\r\n    }\r\n\r\n    /**\r\n     * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\r\n     * @since 3.3.0\r\n     */\r\n    public setNumBits(numBits: number /*int*/): void {\r\n        this.numBits = numBits;\r\n    }\r\n\r\n    /**\r\n     * @return text representation of the result\r\n     */\r\n    public getText(): string {\r\n        return this.text;\r\n    }\r\n\r\n    /**\r\n     * @return list of byte segments in the result, or {@code null} if not applicable\r\n     */\r\n    public getByteSegments(): Uint8Array[] {\r\n        return this.byteSegments;\r\n    }\r\n\r\n    /**\r\n     * @return name of error correction level used, or {@code null} if not applicable\r\n     */\r\n    public getECLevel(): string {\r\n        return this.ecLevel;\r\n    }\r\n\r\n    /**\r\n     * @return number of errors corrected, or {@code null} if not applicable\r\n     */\r\n    public getErrorsCorrected(): number/*Integer*/ {\r\n        return this.errorsCorrected;\r\n    }\r\n\r\n    public setErrorsCorrected(errorsCorrected: number/*Integer*/): void {\r\n        this.errorsCorrected = errorsCorrected;\r\n    }\r\n\r\n    /**\r\n     * @return number of erasures corrected, or {@code null} if not applicable\r\n     */\r\n    public getErasures(): number/*Integer*/ {\r\n        return this.erasures;\r\n    }\r\n\r\n    public setErasures(erasures: number/*Integer*/): void {\r\n        this.erasures = erasures;\r\n    }\r\n\r\n    /**\r\n     * @return arbitrary additional metadata\r\n     */\r\n    public getOther(): any {\r\n        return this.other;\r\n    }\r\n\r\n    public setOther(other: any): void {\r\n        this.other = other;\r\n    }\r\n\r\n    public hasStructuredAppend(): boolean {\r\n        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\r\n    }\r\n\r\n    public getStructuredAppendParity(): number /*int*/ {\r\n        return this.structuredAppendParity;\r\n    }\r\n\r\n    public getStructuredAppendSequenceNumber(): number /*int*/ {\r\n        return this.structuredAppendSequenceNumber;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/DecoderResult.ts","/*\r\n * Copyright (C) 2010 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\n/*import java.nio.charset.Charset;*/\r\n/*import java.util.Map;*/\r\n\r\nimport DecodeHintType from './../DecodeHintType';\r\nimport CharacterSetECI from './CharacterSetECI';\r\n\r\n/**\r\n * Common string-related functions.\r\n *\r\n * @author Sean Owen\r\n * @author Alex Dupre\r\n */\r\nexport default class StringUtils {\r\n\r\n    public static SHIFT_JIS = CharacterSetECI.SJIS.getName(); // \"SJIS\"\r\n    public static GB2312 = 'GB2312';\r\n    private static EUC_JP = 'EUC_JP';\r\n    private static UTF8 = CharacterSetECI.UTF8.getName(); // \"UTF8\"\r\n    private static PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\r\n    private static ISO88591 = CharacterSetECI.ISO8859_1.getName(); // \"ISO8859_1\"\r\n    private static ASSUME_SHIFT_JIS = false;\r\n    // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\r\n    // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\r\n\r\n    private StringUtils() { }\r\n\r\n    /**\r\n     * @param bytes bytes encoding a string, whose encoding should be guessed\r\n     * @param hints decode hints if applicable\r\n     * @return name of guessed encoding; at the moment will only guess one of:\r\n     *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\r\n     *  default encoding if none of these can possibly be correct\r\n     */\r\n    public static guessEncoding(bytes: Uint8Array, hints: Map<DecodeHintType, any>): string {\r\n        if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType.CHARACTER_SET)) {\r\n            return hints.get(DecodeHintType.CHARACTER_SET).toString();\r\n        }\r\n        // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\r\n        // which should be by far the most common encodings.\r\n        const length = bytes.length;\r\n        let canBeISO88591 = true;\r\n        let canBeShiftJIS = true;\r\n        let canBeUTF8 = true;\r\n        let utf8BytesLeft = 0;\r\n        // int utf8LowChars = 0\r\n        let utf2BytesChars = 0;\r\n        let utf3BytesChars = 0;\r\n        let utf4BytesChars = 0;\r\n        let sjisBytesLeft = 0;\r\n        // int sjisLowChars = 0\r\n        let sjisKatakanaChars = 0;\r\n        // int sjisDoubleBytesChars = 0\r\n        let sjisCurKatakanaWordLength = 0;\r\n        let sjisCurDoubleBytesWordLength = 0;\r\n        let sjisMaxKatakanaWordLength = 0;\r\n        let sjisMaxDoubleBytesWordLength = 0;\r\n        // int isoLowChars = 0\r\n        // int isoHighChars = 0\r\n        let isoHighOther = 0;\r\n\r\n        const utf8bom = bytes.length > 3 &&\r\n            bytes[0] === /*(byte) */0xEF &&\r\n            bytes[1] === /*(byte) */0xBB &&\r\n            bytes[2] === /*(byte) */0xBF;\r\n\r\n        for (let i = 0;\r\n            i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8);\r\n            i++) {\r\n\r\n            const value = bytes[i] & 0xFF;\r\n\r\n            // UTF-8 stuff\r\n            if (canBeUTF8) {\r\n                if (utf8BytesLeft > 0) {\r\n                    if ((value & 0x80) === 0) {\r\n                        canBeUTF8 = false;\r\n                    } else {\r\n                        utf8BytesLeft--;\r\n                    }\r\n                } else if ((value & 0x80) !== 0) {\r\n                    if ((value & 0x40) === 0) {\r\n                        canBeUTF8 = false;\r\n                    } else {\r\n                        utf8BytesLeft++;\r\n                        if ((value & 0x20) === 0) {\r\n                            utf2BytesChars++;\r\n                        } else {\r\n                            utf8BytesLeft++;\r\n                            if ((value & 0x10) === 0) {\r\n                                utf3BytesChars++;\r\n                            } else {\r\n                                utf8BytesLeft++;\r\n                                if ((value & 0x08) === 0) {\r\n                                    utf4BytesChars++;\r\n                                } else {\r\n                                    canBeUTF8 = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } // else {\r\n                // utf8LowChars++\r\n                // }\r\n            }\r\n\r\n            // ISO-8859-1 stuff\r\n            if (canBeISO88591) {\r\n                if (value > 0x7F && value < 0xA0) {\r\n                    canBeISO88591 = false;\r\n                } else if (value > 0x9F) {\r\n                    if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\r\n                        isoHighOther++;\r\n                    } // else {\r\n                    // isoHighChars++\r\n                    // }\r\n                } // else {\r\n                // isoLowChars++\r\n                // }\r\n            }\r\n\r\n            // Shift_JIS stuff\r\n            if (canBeShiftJIS) {\r\n                if (sjisBytesLeft > 0) {\r\n                    if (value < 0x40 || value === 0x7F || value > 0xFC) {\r\n                        canBeShiftJIS = false;\r\n                    } else {\r\n                        sjisBytesLeft--;\r\n                    }\r\n                } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\r\n                    canBeShiftJIS = false;\r\n                } else if (value > 0xA0 && value < 0xE0) {\r\n                    sjisKatakanaChars++;\r\n                    sjisCurDoubleBytesWordLength = 0;\r\n                    sjisCurKatakanaWordLength++;\r\n                    if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\r\n                        sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\r\n                    }\r\n                } else if (value > 0x7F) {\r\n                    sjisBytesLeft++;\r\n                    // sjisDoubleBytesChars++\r\n                    sjisCurKatakanaWordLength = 0;\r\n                    sjisCurDoubleBytesWordLength++;\r\n                    if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\r\n                        sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\r\n                    }\r\n                } else {\r\n                    // sjisLowChars++\r\n                    sjisCurKatakanaWordLength = 0;\r\n                    sjisCurDoubleBytesWordLength = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (canBeUTF8 && utf8BytesLeft > 0) {\r\n            canBeUTF8 = false;\r\n        }\r\n        if (canBeShiftJIS && sjisBytesLeft > 0) {\r\n            canBeShiftJIS = false;\r\n        }\r\n\r\n        // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\r\n        if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\r\n            return StringUtils.UTF8;\r\n        }\r\n        // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\r\n        if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\r\n            return StringUtils.SHIFT_JIS;\r\n        }\r\n        // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\r\n        // - If we saw\r\n        //   - only two consecutive katakana chars in the whole text, or\r\n        //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\r\n        // - then we conclude Shift_JIS, else ISO-8859-1\r\n        if (canBeISO88591 && canBeShiftJIS) {\r\n            return (sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2) || isoHighOther * 10 >= length\r\n                ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\r\n        }\r\n\r\n        // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\r\n        if (canBeISO88591) {\r\n            return StringUtils.ISO88591;\r\n        }\r\n        if (canBeShiftJIS) {\r\n            return StringUtils.SHIFT_JIS;\r\n        }\r\n        if (canBeUTF8) {\r\n            return StringUtils.UTF8;\r\n        }\r\n        // Otherwise, we take a wild guess with platform encoding\r\n        return StringUtils.PLATFORM_DEFAULT_ENCODING;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/StringUtils.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport Exception from './../../Exception';\r\nimport Version from './Version';\r\n\r\nexport const enum ModeValues {\r\n    TERMINATOR, // Not really a mode...\r\n    NUMERIC,\r\n    ALPHANUMERIC,\r\n    STRUCTURED_APPEND, // Not supported\r\n    BYTE,\r\n    ECI, // character counts don't apply\r\n    KANJI,\r\n    FNC1_FIRST_POSITION,\r\n    FNC1_SECOND_POSITION,\r\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\r\n    HANZI\r\n}\r\n\r\n/**\r\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\r\n * data can be encoded to bits in the QR code standard.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class Mode {\r\n\r\n    private static FOR_BITS = new Map<number, Mode>();\r\n    private static FOR_VALUE = new Map<ModeValues, Mode>();\r\n\r\n    public static TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\r\n    public static NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\r\n    public static ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\r\n    public static STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\r\n    public static BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\r\n    public static ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\r\n    public static KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\r\n    public static FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\r\n    public static FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\r\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\r\n    public static HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\r\n\r\n    private constructor(private value: ModeValues, private stringValue: string, private characterCountBitsForVersions: Int32Array, private bits: number /*int*/) {\r\n        Mode.FOR_BITS.set(bits, this);\r\n        Mode.FOR_VALUE.set(value, this);\r\n    }\r\n\r\n    /**\r\n     * @param bits four bits encoding a QR Code data mode\r\n     * @return Mode encoded by these bits\r\n     * @throws IllegalArgumentException if bits do not correspond to a known mode\r\n     */\r\n    public static forBits(bits: number /*int*/): Mode {\r\n        const mode = Mode.FOR_BITS.get(bits);\r\n        if (undefined === mode) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n        return mode;\r\n    }\r\n\r\n    /**\r\n     * @param version version in question\r\n     * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\r\n     *         count of characters that will follow encoded in this Mode\r\n     */\r\n    public getCharacterCountBits(version: Version): number /*int*/ {\r\n        const versionNumber = version.getVersionNumber();\r\n\r\n        let offset;\r\n\r\n        if (versionNumber <= 9) {\r\n            offset = 0;\r\n        } else if (versionNumber <= 26) {\r\n            offset = 1;\r\n        } else {\r\n            offset = 2;\r\n        }\r\n\r\n        return this.characterCountBitsForVersions[offset];\r\n    }\r\n\r\n    public getValue(): ModeValues/*int*/ {\r\n        return this.value;\r\n    }\r\n\r\n    public getBits(): number /*int*/ {\r\n        return this.bits;\r\n    }\r\n\r\n    public equals(o: any): boolean {\r\n        if (!(o instanceof Mode)) {\r\n            return false;\r\n        }\r\n        const other = <Mode>o;\r\n        return this.value === other.value;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.stringValue;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/Mode.ts","// declare require to support dynamic text-encoding module loading in node\r\ndeclare function require(moduleName: string): any;\r\n\r\n// declare window to use in browser\r\ndeclare var window: any;\r\n\r\nimport { TextDecoder as TextDecoderFromTE, TextEncoder as TextEncoderFromTE } from 'text-encoding';\r\nimport CharacterSetECI from './../common/CharacterSetECI';\r\nimport Exception from './../Exception';\r\n\r\nexport default class StringEncoding {\r\n    public static decode(bytes: Uint8Array, encoding: string | CharacterSetECI): string {\r\n        let encodingString: string;\r\n        if (typeof encoding === 'string') {\r\n            encodingString = encoding;\r\n        } else {\r\n            encodingString = encoding.getName();\r\n        }\r\n        if (StringEncoding.isBrowser()) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            const TextDecoderBrowser = window['TextDecoder'];\r\n            // use TextEncoder if is available (should be in newer browsers)\r\n            if (undefined !== TextDecoderBrowser) {\r\n                // console.log(TextDecoderBrowser)\r\n                return new TextDecoderBrowser(encoding).decode(bytes);\r\n            } else {\r\n                // fall back to minimal decoding\r\n                return StringEncoding.decodeFallBack(bytes, encodingString);\r\n            }\r\n        } else {\r\n            const TextDecoderFromTEClass: typeof TextDecoderFromTE = require('text-encoding').TextDecoder;\r\n            return new TextDecoderFromTEClass(encodingString).decode(bytes);\r\n        }\r\n    }\r\n\r\n    public static encode(s: string, encoding: string | CharacterSetECI): Uint8Array {\r\n        let encodingString: string;\r\n        if (typeof encoding === 'string') {\r\n            encodingString = encoding;\r\n        } else {\r\n            encodingString = encoding.getName();\r\n        }\r\n        if (StringEncoding.isBrowser()) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            const TextEncoderBrowser = window['TextEncoder'];\r\n            // use TextEncoder if is available (should be in newer browsers)\r\n            const ec = CharacterSetECI.getCharacterSetECIByName(encodingString);\r\n            if (undefined !== TextEncoderBrowser) {\r\n                // TODO: TextEncoder only supports utf-8 encoding as per specs\r\n                return new TextEncoderBrowser(encoding).encode(s);\r\n            } else {\r\n                // fall back to minimal decoding\r\n                return StringEncoding.encodeFallBack(s, encodingString);\r\n            }\r\n        } else {\r\n            // Note: NONSTANDARD_allowLegacyEncoding is required for other encodings than UTF8\r\n            // TextEncoder only encodes to UTF8 by default as specified by encoding.spec.whatwg.org\r\n            const TextEncoderFromTEClass: typeof TextEncoderFromTE = require('text-encoding').TextEncoder;\r\n            return new TextEncoderFromTEClass(encodingString, { NONSTANDARD_allowLegacyEncoding: true }).encode(s);\r\n        }\r\n    }\r\n\r\n    private static isBrowser(): boolean {\r\n        return typeof window !== 'undefined' && ({}).toString.call(window) === '[object Window]';\r\n    }\r\n\r\n    private static decodeFallBack(bytes: Uint8Array, encoding: string): string {\r\n        const ec = CharacterSetECI.getCharacterSetECIByName(encoding);\r\n        if (ec.equals(CharacterSetECI.UTF8) ||\r\n            ec.equals(CharacterSetECI.ISO8859_1) ||\r\n            ec.equals(CharacterSetECI.ASCII)) {\r\n            let s = '';\r\n            for (let i = 0, length = bytes.length; i < length; i++) {\r\n                let h = bytes[i].toString(16);\r\n                if (h.length < 2) {\r\n                    h = '0' + h;\r\n                }\r\n                s += '%' + h;\r\n            }\r\n            return decodeURIComponent(s);\r\n        } else if (ec.equals(CharacterSetECI.UnicodeBigUnmarked)) {\r\n            return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\r\n        } else {\r\n            throw new Exception(Exception.UnsupportedOperationException, `encoding ${encoding} not supported`);\r\n        }\r\n    }\r\n\r\n    private static encodeFallBack(s: string, encoding: string): Uint8Array {\r\n        // TODO: encode\r\n        return null;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/StringEncoding.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"text-encoding\",\"commonjs2\":\"text-encoding\",\"amd\":\"text-encoding\",\"root\":\"text-encoding\"}\n// module id = 36\n// module chunks = 0","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport ResultPoint from './../ResultPoint';\r\nimport BitMatrix from './BitMatrix';\r\n\r\n/**\r\n * <p>Encapsulates the result of detecting a barcode in an image. This includes the raw\r\n * matrix of black/white pixels corresponding to the barcode, and possibly points of interest\r\n * in the image, like the location of finder patterns or corners of the barcode in the image.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class DetectorResult {\r\n\r\n    private bits: BitMatrix;\r\n    private points: Array<ResultPoint>;\r\n\r\n    public constructor(bits: BitMatrix, points: Array<ResultPoint>) {\r\n        this.bits = bits;\r\n        this.points = points;\r\n    }\r\n\r\n    public getBits(): BitMatrix {\r\n        return this.bits;\r\n    }\r\n\r\n    public getPoints(): Array<ResultPoint> {\r\n        return this.points;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/DetectorResult.ts","import GridSampler from './GridSampler';\r\nimport DefaultGridSampler from './DefaultGridSampler';\r\n\r\nexport default class GridSamplerInstance {\r\n\r\n    private static gridSampler: GridSampler = new DefaultGridSampler();\r\n\r\n    /**\r\n     * Sets the implementation of GridSampler used by the library. One global\r\n     * instance is stored, which may sound problematic. But, the implementation provided\r\n     * ought to be appropriate for the entire platform, and all uses of this library\r\n     * in the whole lifetime of the JVM. For instance, an Android activity can swap in\r\n     * an implementation that takes advantage of native platform libraries.\r\n     *\r\n     * @param newGridSampler The platform-specific object to install.\r\n     */\r\n    public static setGridSampler(newGridSampler: GridSampler): void {\r\n        GridSamplerInstance.gridSampler = newGridSampler;\r\n    }\r\n\r\n    /**\r\n     * @return the current implementation of GridSampler\r\n     */\r\n    public static getInstance(): GridSampler {\r\n        return GridSamplerInstance.gridSampler;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/GridSamplerInstance.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport GridSampler from './GridSampler';\r\nimport BitMatrix from './BitMatrix';\r\nimport PerspectiveTransform from './PerspectiveTransform';\r\nimport Exception from './../Exception';\r\n\r\n/**\r\n * @author Sean Owen\r\n */\r\nexport default class DefaultGridSampler extends GridSampler {\r\n\r\n    /*@Override*/\r\n    public sampleGrid(image: BitMatrix,\r\n        dimensionX: number /*int*/,\r\n        dimensionY: number /*int*/,\r\n        p1ToX: number/*float*/, p1ToY: number/*float*/,\r\n        p2ToX: number/*float*/, p2ToY: number/*float*/,\r\n        p3ToX: number/*float*/, p3ToY: number/*float*/,\r\n        p4ToX: number/*float*/, p4ToY: number/*float*/,\r\n        p1FromX: number/*float*/, p1FromY: number/*float*/,\r\n        p2FromX: number/*float*/, p2FromY: number/*float*/,\r\n        p3FromX: number/*float*/, p3FromY: number/*float*/,\r\n        p4FromX: number/*float*/, p4FromY: number/*float*/): BitMatrix /*throws NotFoundException*/ {\r\n\r\n        const transform = PerspectiveTransform.quadrilateralToQuadrilateral(\r\n            p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY,\r\n            p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\r\n\r\n        return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);\r\n    }\r\n\r\n    /*@Override*/\r\n    public sampleGridWithTransform(image: BitMatrix,\r\n        dimensionX: number /*int*/,\r\n        dimensionY: number /*int*/,\r\n        transform: PerspectiveTransform): BitMatrix /*throws NotFoundException*/ {\r\n        if (dimensionX <= 0 || dimensionY <= 0) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n        const bits = new BitMatrix(dimensionX, dimensionY);\r\n        const points = new Float32Array(2 * dimensionX);\r\n        for (let y = 0; y < dimensionY; y++) {\r\n            const max = points.length;\r\n            const iValue: number /*float*/ = y + 0.5;\r\n            for (let x = 0; x < max; x += 2) {\r\n                points[x] = /*(float)*/ (x / 2) + 0.5;\r\n                points[x + 1] = iValue;\r\n            }\r\n            transform.transformPoints(points);\r\n            // Quick check to see if points transformed to something inside the image\r\n            // sufficient to check the endpoints\r\n            GridSampler.checkAndNudgePoints(image, points);\r\n            try {\r\n                for (let x = 0; x < max; x += 2) {\r\n                    if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {\r\n                        // Black(-ish) pixel\r\n                        bits.set(x / 2, y);\r\n                    }\r\n                }\r\n            } catch (aioobe/*: ArrayIndexOutOfBoundsException*/) {\r\n                // This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\r\n                // transform gets \"twisted\" such that it maps a straight line of points to a set of points\r\n                // whose endpoints are in bounds, but others are not. There is probably some mathematical\r\n                // way to detect this about the transformation that I don't know yet.\r\n                // This results in an ugly runtime exception despite our clever checks above -- can't have\r\n                // that. We could check each point's coordinates but that feels duplicative. We settle for\r\n                // catching and wrapping ArrayIndexOutOfBoundsException.\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n        }\r\n        return bits;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/DefaultGridSampler.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common {*/\r\n\r\nimport BitMatrix from './BitMatrix';\r\nimport PerspectiveTransform from './PerspectiveTransform';\r\nimport Exception from './../Exception';\r\n\r\n/**\r\n * Implementations of this class can, given locations of finder patterns for a QR code in an\r\n * image, sample the right points in the image to reconstruct the QR code, accounting for\r\n * perspective distortion. It is abstracted since it is relatively expensive and should be allowed\r\n * to take advantage of platform-specific optimized implementations, like Sun's Java Advanced\r\n * Imaging library, but which may not be available in other environments such as J2ME, and vice\r\n * versa.\r\n *\r\n * The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}\r\n * with an instance of a class which implements this interface.\r\n *\r\n * @author Sean Owen\r\n */\r\nabstract class GridSampler {\r\n\r\n    /**\r\n     * Samples an image for a rectangular matrix of bits of the given dimension. The sampling\r\n     * transformation is determined by the coordinates of 4 points, in the original and transformed\r\n     * image space.\r\n     *\r\n     * @param image image to sample\r\n     * @param dimensionX width of {@link BitMatrix} to sample from image\r\n     * @param dimensionY height of {@link BitMatrix} to sample from image\r\n     * @param p1ToX point 1 preimage X\r\n     * @param p1ToY point 1 preimage Y\r\n     * @param p2ToX point 2 preimage X\r\n     * @param p2ToY point 2 preimage Y\r\n     * @param p3ToX point 3 preimage X\r\n     * @param p3ToY point 3 preimage Y\r\n     * @param p4ToX point 4 preimage X\r\n     * @param p4ToY point 4 preimage Y\r\n     * @param p1FromX point 1 image X\r\n     * @param p1FromY point 1 image Y\r\n     * @param p2FromX point 2 image X\r\n     * @param p2FromY point 2 image Y\r\n     * @param p3FromX point 3 image X\r\n     * @param p3FromY point 3 image Y\r\n     * @param p4FromX point 4 image X\r\n     * @param p4FromY point 4 image Y\r\n     *\r\n     * @return {@link BitMatrix} representing a grid of points sampled from the image within a region\r\n     *   defined by the \"from\" parameters\r\n     *\r\n     * @throws NotFoundException if image can't be sampled, for example, if the transformation defined\r\n     *   by the given points is invalid or results in sampling outside the image boundaries\r\n     */\r\n    public abstract sampleGrid(\r\n        image: BitMatrix,\r\n        dimensionX: number /*int*/,\r\n        dimensionY: number /*int*/,\r\n        p1ToX: number/*float*/, p1ToY: number/*float*/,\r\n        p2ToX: number/*float*/, p2ToY: number/*float*/,\r\n        p3ToX: number/*float*/, p3ToY: number/*float*/,\r\n        p4ToX: number/*float*/, p4ToY: number/*float*/,\r\n        p1FromX: number/*float*/, p1FromY: number/*float*/,\r\n        p2FromX: number/*float*/, p2FromY: number/*float*/,\r\n        p3FromX: number/*float*/, p3FromY: number/*float*/,\r\n        p4FromX: number/*float*/, p4FromY: number/*float*/\r\n    ): BitMatrix; /*throws NotFoundException*/\r\n\r\n    public abstract sampleGridWithTransform(\r\n        image: BitMatrix,\r\n        dimensionX: number /*int*/,\r\n        dimensionY: number /*int*/,\r\n        transform: PerspectiveTransform\r\n    ): BitMatrix; /*throws NotFoundException*/\r\n\r\n    /**\r\n     * <p>Checks a set of points that have been transformed to sample points on an image against\r\n     * the image's dimensions to see if the point are even within the image.</p>\r\n     *\r\n     * <p>This method will actually \"nudge\" the endpoints back onto the image if they are found to be\r\n     * barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder\r\n     * patterns in an image where the QR Code runs all the way to the image border.</p>\r\n     *\r\n     * <p>For efficiency, the method will check points from either end of the line until one is found\r\n     * to be within the image. Because the set of points are assumed to be linear, this is valid.</p>\r\n     *\r\n     * @param image image into which the points should map\r\n     * @param points actual points in x1,y1,...,xn,yn form\r\n     * @throws NotFoundException if an endpoint is lies outside the image boundaries\r\n     */\r\n    protected static checkAndNudgePoints(\r\n        image: BitMatrix,\r\n        points: Float32Array\r\n    ): void /*throws NotFoundException*/ {\r\n\r\n        const width: number /*int*/ = image.getWidth();\r\n        const height: number /*int*/ = image.getHeight();\r\n\r\n        // Check and nudge points from start until we see some that are OK:\r\n        let nudged: boolean = true;\r\n\r\n        for (let offset = 0; offset < points.length && nudged; offset += 2) {\r\n\r\n            const x = Math.floor(points[offset]);\r\n            const y = Math.floor(points[offset + 1]);\r\n\r\n            if (x < -1 || x > width || y < -1 || y > height) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            nudged = false;\r\n\r\n            if (x === -1) {\r\n                points[offset] = 0.0;\r\n                nudged = true;\r\n            } else if (x === width) {\r\n                points[offset] = width - 1;\r\n                nudged = true;\r\n            }\r\n\r\n            if (y === -1) {\r\n                points[offset + 1] = 0.0;\r\n                nudged = true;\r\n            } else if (y === height) {\r\n                points[offset + 1] = height - 1;\r\n                nudged = true;\r\n            }\r\n        }\r\n\r\n        // Check and nudge points from end:\r\n        nudged = true;\r\n\r\n        for (let offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {\r\n\r\n            const x = Math.floor(points[offset]);\r\n            const y = Math.floor(points[offset + 1]);\r\n\r\n            if (x < -1 || x > width || y < -1 || y > height) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            nudged = false;\r\n\r\n            if (x === -1) {\r\n                points[offset] = 0.0;\r\n                nudged = true;\r\n            } else if (x === width) {\r\n                points[offset] = width - 1;\r\n                nudged = true;\r\n            }\r\n\r\n            if (y === -1) {\r\n                points[offset + 1] = 0.0;\r\n                nudged = true;\r\n            } else if (y === height) {\r\n                points[offset + 1] = height - 1;\r\n                nudged = true;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default GridSampler;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/GridSampler.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\nimport EncodeHintType from './../../EncodeHintType';\r\nimport BitArray from './../../common/BitArray';\r\nimport CharacterSetECI from './../../common/CharacterSetECI';\r\nimport GenericGF from './../../common/reedsolomon/GenericGF';\r\nimport ReedSolomonEncoder from './../../common/reedsolomon/ReedSolomonEncoder';\r\nimport ErrorCorrectionLevel from './../decoder/ErrorCorrectionLevel';\r\nimport Mode from './../decoder/Mode';\r\nimport Version from './../decoder/Version';\r\nimport MaskUtil from './MaskUtil';\r\nimport ByteMatrix from './ByteMatrix';\r\nimport QRCode from './QRCode';\r\nimport Exception from './../../Exception';\r\nimport ECBlocks from './../decoder/ECBlocks';\r\nimport MatrixUtil from './MatrixUtil';\r\nimport StringEncoding from './../../util/StringEncoding';\r\nimport BlockPair from './BlockPair';\r\n\r\n/*import java.io.UnsupportedEncodingException;*/\r\n/*import java.util.ArrayList;*/\r\n/*import java.util.Collection;*/\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * @author satorux@google.com (Satoru Takabayashi) - creator\r\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\r\n */\r\nexport default class Encoder {\r\n\r\n    // The original table is defined in the table 5 of JISX0510:2004 (p.19).\r\n    private static ALPHANUMERIC_TABLE = Int32Array.from([\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // 0x00-0x0f\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // 0x10-0x1f\r\n        36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,  // 0x20-0x2f\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1,  // 0x30-0x3f\r\n        -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,  // 0x40-0x4f\r\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1,  // 0x50-0x5f\r\n    ]);\r\n\r\n    public static DEFAULT_BYTE_MODE_ENCODING = CharacterSetECI.UTF8.getName(); // \"ISO-8859-1\"\r\n    // TYPESCRIPTPORT: changed to UTF8, the default for js\r\n\r\n    private constructor() { }\r\n\r\n    // The mask penalty calculation is complicated.  See Table 21 of JISX0510:2004 (p.45) for details.\r\n    // Basically it applies four rules and summate all penalties.\r\n    private static calculateMaskPenalty(matrix: ByteMatrix): number /*int*/ {\r\n        return MaskUtil.applyMaskPenaltyRule1(matrix)\r\n            + MaskUtil.applyMaskPenaltyRule2(matrix)\r\n            + MaskUtil.applyMaskPenaltyRule3(matrix)\r\n            + MaskUtil.applyMaskPenaltyRule4(matrix);\r\n    }\r\n\r\n    /**\r\n     * @param content text to encode\r\n     * @param ecLevel error correction level to use\r\n     * @return {@link QRCode} representing the encoded QR code\r\n     * @throws WriterException if encoding can't succeed, because of for example invalid content\r\n     *   or configuration\r\n     */\r\n    // public static encode(content: string, ecLevel: ErrorCorrectionLevel): QRCode /*throws WriterException*/ {\r\n    //   return encode(content, ecLevel, null)\r\n    // }\r\n\r\n    public static encode(content: string,\r\n        ecLevel: ErrorCorrectionLevel,\r\n        hints: Map<EncodeHintType, any> = null): QRCode /*throws WriterException*/ {\r\n\r\n        // Determine what character encoding has been specified by the caller, if any\r\n        let encoding: string = Encoder.DEFAULT_BYTE_MODE_ENCODING;\r\n        const hasEncodingHint: boolean = hints !== null && undefined !== hints.get(EncodeHintType.CHARACTER_SET);\r\n        if (hasEncodingHint) {\r\n            encoding = hints.get(EncodeHintType.CHARACTER_SET).toString();\r\n        }\r\n\r\n        // Pick an encoding mode appropriate for the content. Note that this will not attempt to use\r\n        // multiple modes / segments even if that were more efficient. Twould be nice.\r\n        const mode: Mode = this.chooseMode(content, encoding);\r\n\r\n        // This will store the header information, like mode and\r\n        // length, as well as \"header\" segments like an ECI segment.\r\n        const headerBits = new BitArray();\r\n\r\n        // Append ECI segment if applicable\r\n        if (mode === Mode.BYTE && (hasEncodingHint || Encoder.DEFAULT_BYTE_MODE_ENCODING !== encoding)) {\r\n            const eci = CharacterSetECI.getCharacterSetECIByName(encoding);\r\n            if (eci !== undefined) {\r\n                this.appendECI(eci, headerBits);\r\n            }\r\n        }\r\n\r\n        // (With ECI in place,) Write the mode marker\r\n        this.appendModeInfo(mode, headerBits);\r\n\r\n        // Collect data within the main segment, separately, to count its size if needed. Don't add it to\r\n        // main payload yet.\r\n        const dataBits = new BitArray();\r\n        this.appendBytes(content, mode, dataBits, encoding);\r\n\r\n        let version: Version;\r\n        if (hints !== null && undefined !== hints.get(EncodeHintType.QR_VERSION)) {\r\n            const versionNumber = Number.parseInt(hints.get(EncodeHintType.QR_VERSION).toString(), 10);\r\n            version = Version.getVersionForNumber(versionNumber);\r\n            const bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, version);\r\n            if (!this.willFit(bitsNeeded, version, ecLevel)) {\r\n                throw new Exception(Exception.WriterException, 'Data too big for requested version');\r\n            }\r\n        } else {\r\n            version = this.recommendVersion(ecLevel, mode, headerBits, dataBits);\r\n        }\r\n\r\n        const headerAndDataBits = new BitArray();\r\n        headerAndDataBits.appendBitArray(headerBits);\r\n        // Find \"length\" of main segment and write it\r\n        const numLetters = mode === Mode.BYTE ? dataBits.getSizeInBytes() : content.length;\r\n        this.appendLengthInfo(numLetters, version, mode, headerAndDataBits);\r\n        // Put data together into the overall payload\r\n        headerAndDataBits.appendBitArray(dataBits);\r\n\r\n        const ecBlocks: ECBlocks = version.getECBlocksForLevel(ecLevel);\r\n        const numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();\r\n\r\n        // Terminate the bits properly.\r\n        this.terminateBits(numDataBytes, headerAndDataBits);\r\n\r\n        // Interleave data bits with error correction code.\r\n        const finalBits: BitArray = this.interleaveWithECBytes(headerAndDataBits,\r\n            version.getTotalCodewords(),\r\n            numDataBytes,\r\n            ecBlocks.getNumBlocks());\r\n\r\n        const qrCode = new QRCode();\r\n\r\n        qrCode.setECLevel(ecLevel);\r\n        qrCode.setMode(mode);\r\n        qrCode.setVersion(version);\r\n\r\n        //  Choose the mask pattern and set to \"qrCode\".\r\n        const dimension = version.getDimensionForVersion();\r\n        const matrix: ByteMatrix = new ByteMatrix(dimension, dimension);\r\n        const maskPattern = this.chooseMaskPattern(finalBits, ecLevel, version, matrix);\r\n        qrCode.setMaskPattern(maskPattern);\r\n\r\n        // Build the matrix and set it to \"qrCode\".\r\n        MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);\r\n        qrCode.setMatrix(matrix);\r\n\r\n        return qrCode;\r\n    }\r\n\r\n    /**\r\n     * Decides the smallest version of QR code that will contain all of the provided data.\r\n     *\r\n     * @throws WriterException if the data cannot fit in any version\r\n     */\r\n    private static recommendVersion(ecLevel: ErrorCorrectionLevel,\r\n        mode: Mode,\r\n        headerBits: BitArray,\r\n        dataBits: BitArray): Version /*throws WriterException*/ {\r\n        // Hard part: need to know version to know how many bits length takes. But need to know how many\r\n        // bits it takes to know version. First we take a guess at version by assuming version will be\r\n        // the minimum, 1:\r\n        const provisionalBitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, Version.getVersionForNumber(1));\r\n        const provisionalVersion = this.chooseVersion(provisionalBitsNeeded, ecLevel);\r\n\r\n        // Use that guess to calculate the right version. I am still not sure this works in 100% of cases.\r\n        const bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, provisionalVersion);\r\n        return this.chooseVersion(bitsNeeded, ecLevel);\r\n    }\r\n\r\n    private static calculateBitsNeeded(mode: Mode,\r\n        headerBits: BitArray,\r\n        dataBits: BitArray,\r\n        version: Version): number /*int*/ {\r\n        return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();\r\n    }\r\n\r\n    /**\r\n     * @return the code point of the table used in alphanumeric mode or\r\n     *  -1 if there is no corresponding code in the table.\r\n     */\r\n    public static getAlphanumericCode(code: number /*int*/): number /*int*/ {\r\n        if (code < Encoder.ALPHANUMERIC_TABLE.length) {\r\n            return Encoder.ALPHANUMERIC_TABLE[code];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // public static chooseMode(content: string): Mode {\r\n    //   return chooseMode(content, null);\r\n    // }\r\n\r\n    /**\r\n     * Choose the best mode by examining the content. Note that 'encoding' is used as a hint;\r\n     * if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.\r\n     */\r\n    public static chooseMode(content: string, encoding: string = null): Mode {\r\n        if (CharacterSetECI.SJIS.getName() === encoding && this.isOnlyDoubleByteKanji(content)) {\r\n            // Choose Kanji mode if all input are double-byte characters\r\n            return Mode.KANJI;\r\n        }\r\n        let hasNumeric: boolean = false;\r\n        let hasAlphanumeric: boolean = false;\r\n        for (let i = 0, length = content.length; i < length; ++i) {\r\n            const c: string = content.charAt(i);\r\n            if (Encoder.isDigit(c)) {\r\n                hasNumeric = true;\r\n            } else if (this.getAlphanumericCode(c.charCodeAt(0)) !== -1) {\r\n                hasAlphanumeric = true;\r\n            } else {\r\n                return Mode.BYTE;\r\n            }\r\n        }\r\n        if (hasAlphanumeric) {\r\n            return Mode.ALPHANUMERIC;\r\n        }\r\n        if (hasNumeric) {\r\n            return Mode.NUMERIC;\r\n        }\r\n        return Mode.BYTE;\r\n    }\r\n\r\n    private static isOnlyDoubleByteKanji(content: string): boolean {\r\n        let bytes: Uint8Array;\r\n        try {\r\n            bytes = StringEncoding.encode(content, CharacterSetECI.SJIS.getName()); // content.getBytes(\"Shift_JIS\"))\r\n        } catch (ignored/*: UnsupportedEncodingException*/) {\r\n            return false;\r\n        }\r\n        const length = bytes.length;\r\n        if (length % 2 !== 0) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < length; i += 2) {\r\n            const byte1 = bytes[i] & 0xFF;\r\n            if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static chooseMaskPattern(bits: BitArray,\r\n        ecLevel: ErrorCorrectionLevel,\r\n        version: Version,\r\n        matrix: ByteMatrix): number /*int*/ /*throws WriterException*/ {\r\n\r\n        let minPenalty = Number.MAX_SAFE_INTEGER;  // Lower penalty is better.\r\n        let bestMaskPattern = -1;\r\n        // We try all mask patterns to choose the best one.\r\n        for (let maskPattern = 0; maskPattern < QRCode.NUM_MASK_PATTERNS; maskPattern++) {\r\n            MatrixUtil.buildMatrix(bits, ecLevel, version, maskPattern, matrix);\r\n            let penalty = this.calculateMaskPenalty(matrix);\r\n            if (penalty < minPenalty) {\r\n                minPenalty = penalty;\r\n                bestMaskPattern = maskPattern;\r\n            }\r\n        }\r\n        return bestMaskPattern;\r\n    }\r\n\r\n    private static chooseVersion(numInputBits: number /*int*/, ecLevel: ErrorCorrectionLevel): Version /*throws WriterException*/ {\r\n        for (let versionNum = 1; versionNum <= 40; versionNum++) {\r\n            const version = Version.getVersionForNumber(versionNum);\r\n            if (Encoder.willFit(numInputBits, version, ecLevel)) {\r\n                return version;\r\n            }\r\n        }\r\n        throw new Exception(Exception.WriterException, 'Data too big');\r\n    }\r\n\r\n    /**\r\n     * @return true if the number of input bits will fit in a code with the specified version and\r\n     * error correction level.\r\n     */\r\n    private static willFit(numInputBits: number /*int*/, version: Version, ecLevel: ErrorCorrectionLevel): boolean {\r\n        // In the following comments, we use numbers of Version 7-H.\r\n        // numBytes = 196\r\n        const numBytes = version.getTotalCodewords();\r\n        // getNumECBytes = 130\r\n        const ecBlocks = version.getECBlocksForLevel(ecLevel);\r\n        const numEcBytes = ecBlocks.getTotalECCodewords();\r\n        // getNumDataBytes = 196 - 130 = 66\r\n        const numDataBytes = numBytes - numEcBytes;\r\n        const totalInputBytes = (numInputBits + 7) / 8;\r\n        return numDataBytes >= totalInputBytes;\r\n    }\r\n\r\n    /**\r\n     * Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).\r\n     */\r\n    public static terminateBits(numDataBytes: number /*int*/, bits: BitArray): void /*throws WriterException*/ {\r\n        const capacity = numDataBytes * 8;\r\n        if (bits.getSize() > capacity) {\r\n            throw new Exception(Exception.WriterException, 'data bits cannot fit in the QR Code' + bits.getSize() + ' > ' +\r\n                capacity);\r\n        }\r\n        for (let i = 0; i < 4 && bits.getSize() < capacity; ++i) {\r\n            bits.appendBit(false);\r\n        }\r\n        // Append termination bits. See 8.4.8 of JISX0510:2004 (p.24) for details.\r\n        // If the last byte isn't 8-bit aligned, we'll add padding bits.\r\n        const numBitsInLastByte = bits.getSize() & 0x07;\r\n        if (numBitsInLastByte > 0) {\r\n            for (let i = numBitsInLastByte; i < 8; i++) {\r\n                bits.appendBit(false);\r\n            }\r\n        }\r\n        // If we have more space, we'll fill the space with padding patterns defined in 8.4.9 (p.24).\r\n        const numPaddingBytes = numDataBytes - bits.getSizeInBytes();\r\n        for (let i = 0; i < numPaddingBytes; ++i) {\r\n            bits.appendBits((i & 0x01) === 0 ? 0xEC : 0x11, 8);\r\n        }\r\n        if (bits.getSize() !== capacity) {\r\n            throw new Exception(Exception.WriterException, 'Bits size does not equal capacity');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get number of data bytes and number of error correction bytes for block id \"blockID\". Store\r\n     * the result in \"numDataBytesInBlock\", and \"numECBytesInBlock\". See table 12 in 8.5.1 of\r\n     * JISX0510:2004 (p.30)\r\n     */\r\n    public static getNumDataBytesAndNumECBytesForBlockID(numTotalBytes: number /*int*/,\r\n        numDataBytes: number /*int*/,\r\n        numRSBlocks: number /*int*/,\r\n        blockID: number /*int*/,\r\n        numDataBytesInBlock: Int32Array,\r\n        numECBytesInBlock: Int32Array): void /*throws WriterException*/ {\r\n        if (blockID >= numRSBlocks) {\r\n            throw new Exception(Exception.WriterException, 'Block ID too large');\r\n        }\r\n        // numRsBlocksInGroup2 = 196 % 5 = 1\r\n        const numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;\r\n        // numRsBlocksInGroup1 = 5 - 1 = 4\r\n        const numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;\r\n        // numTotalBytesInGroup1 = 196 / 5 = 39\r\n        const numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks);\r\n        // numTotalBytesInGroup2 = 39 + 1 = 40\r\n        const numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;\r\n        // numDataBytesInGroup1 = 66 / 5 = 13\r\n        const numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks);\r\n        // numDataBytesInGroup2 = 13 + 1 = 14\r\n        const numDataBytesInGroup2 = numDataBytesInGroup1 + 1;\r\n        // numEcBytesInGroup1 = 39 - 13 = 26\r\n        const numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;\r\n        // numEcBytesInGroup2 = 40 - 14 = 26\r\n        const numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;\r\n        // Sanity checks.\r\n        // 26 = 26\r\n        if (numEcBytesInGroup1 !== numEcBytesInGroup2) {\r\n            throw new Exception(Exception.WriterException, 'EC bytes mismatch');\r\n        }\r\n        // 5 = 4 + 1.\r\n        if (numRSBlocks !== numRsBlocksInGroup1 + numRsBlocksInGroup2) {\r\n            throw new Exception(Exception.WriterException, 'RS blocks mismatch');\r\n        }\r\n        // 196 = (13 + 26) * 4 + (14 + 26) * 1\r\n        if (numTotalBytes !==\r\n            ((numDataBytesInGroup1 + numEcBytesInGroup1) *\r\n                numRsBlocksInGroup1) +\r\n            ((numDataBytesInGroup2 + numEcBytesInGroup2) *\r\n                numRsBlocksInGroup2)) {\r\n            throw new Exception(Exception.WriterException, 'Total bytes mismatch');\r\n        }\r\n\r\n        if (blockID < numRsBlocksInGroup1) {\r\n            numDataBytesInBlock[0] = numDataBytesInGroup1;\r\n            numECBytesInBlock[0] = numEcBytesInGroup1;\r\n        } else {\r\n            numDataBytesInBlock[0] = numDataBytesInGroup2;\r\n            numECBytesInBlock[0] = numEcBytesInGroup2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interleave \"bits\" with corresponding error correction bytes. On success, store the result in\r\n     * \"result\". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.\r\n     */\r\n    public static interleaveWithECBytes(bits: BitArray,\r\n        numTotalBytes: number /*int*/,\r\n        numDataBytes: number /*int*/,\r\n        numRSBlocks: number /*int*/): BitArray /*throws WriterException*/ {\r\n\r\n        // \"bits\" must have \"getNumDataBytes\" bytes of data.\r\n        if (bits.getSizeInBytes() !== numDataBytes) {\r\n            throw new Exception(Exception.WriterException, 'Number of bits and data bytes does not match');\r\n        }\r\n\r\n        // Step 1.  Divide data bytes into blocks and generate error correction bytes for them. We'll\r\n        // store the divided data bytes blocks and error correction bytes blocks into \"blocks\".\r\n        let dataBytesOffset = 0;\r\n        let maxNumDataBytes = 0;\r\n        let maxNumEcBytes = 0;\r\n\r\n        // Since, we know the number of reedsolmon blocks, we can initialize the vector with the number.\r\n        const blocks = new Array<BlockPair>();  // new Array<BlockPair>(numRSBlocks)\r\n\r\n        for (let i = 0; i < numRSBlocks; ++i) {\r\n            const numDataBytesInBlock: Int32Array = new Int32Array(1);\r\n            const numEcBytesInBlock: Int32Array = new Int32Array(1);\r\n            Encoder.getNumDataBytesAndNumECBytesForBlockID(\r\n                numTotalBytes, numDataBytes, numRSBlocks, i,\r\n                numDataBytesInBlock, numEcBytesInBlock);\r\n\r\n            const size = numDataBytesInBlock[0];\r\n            const dataBytes = new Uint8Array(size);\r\n            bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);\r\n            const ecBytes: Uint8Array = Encoder.generateECBytes(dataBytes, numEcBytesInBlock[0]);\r\n            blocks.push(new BlockPair(dataBytes, ecBytes));\r\n\r\n            maxNumDataBytes = Math.max(maxNumDataBytes, size);\r\n            maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);\r\n            dataBytesOffset += numDataBytesInBlock[0];\r\n        }\r\n        if (numDataBytes !== dataBytesOffset) {\r\n            throw new Exception(Exception.WriterException, 'Data bytes does not match offset');\r\n        }\r\n\r\n        const result = new BitArray();\r\n\r\n        // First, place data blocks.\r\n        for (let i = 0; i < maxNumDataBytes; ++i) {\r\n            for (const block of blocks) {\r\n                const dataBytes = block.getDataBytes();\r\n                if (i < dataBytes.length) {\r\n                    result.appendBits(dataBytes[i], 8);\r\n                }\r\n            }\r\n        }\r\n        // Then, place error correction blocks.\r\n        for (let i = 0; i < maxNumEcBytes; ++i) {\r\n            for (const block of blocks) {\r\n                const ecBytes = block.getErrorCorrectionBytes();\r\n                if (i < ecBytes.length) {\r\n                    result.appendBits(ecBytes[i], 8);\r\n                }\r\n            }\r\n        }\r\n        if (numTotalBytes !== result.getSizeInBytes()) {  // Should be same.\r\n            throw new Exception('WriterException', 'Interleaving error: ' + numTotalBytes + ' and ' +\r\n                result.getSizeInBytes() + ' differ.');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static generateECBytes(dataBytes: Uint8Array, numEcBytesInBlock: number /*int*/): Uint8Array {\r\n        const numDataBytes = dataBytes.length;\r\n        const toEncode: Int32Array = new Int32Array(numDataBytes + numEcBytesInBlock); // int[numDataBytes + numEcBytesInBlock]\r\n        for (let i = 0; i < numDataBytes; i++) {\r\n            toEncode[i] = dataBytes[i] & 0xFF;\r\n        }\r\n        new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256).encode(toEncode, numEcBytesInBlock);\r\n\r\n        const ecBytes = new Uint8Array(numEcBytesInBlock);\r\n        for (let i = 0; i < numEcBytesInBlock; i++) {\r\n            ecBytes[i] = /*(byte) */toEncode[numDataBytes + i];\r\n        }\r\n        return ecBytes;\r\n    }\r\n\r\n    /**\r\n     * Append mode info. On success, store the result in \"bits\".\r\n     */\r\n    public static appendModeInfo(mode: Mode, bits: BitArray): void {\r\n        bits.appendBits(mode.getBits(), 4);\r\n    }\r\n\r\n\r\n    /**\r\n     * Append length info. On success, store the result in \"bits\".\r\n     */\r\n    public static appendLengthInfo(numLetters: number /*int*/, version: Version, mode: Mode, bits: BitArray): void /*throws WriterException*/ {\r\n        const numBits = mode.getCharacterCountBits(version);\r\n        if (numLetters >= (1 << numBits)) {\r\n            throw new Exception(Exception.WriterException, numLetters + ' is bigger than ' + ((1 << numBits) - 1));\r\n        }\r\n        bits.appendBits(numLetters, numBits);\r\n    }\r\n\r\n    /**\r\n     * Append \"bytes\" in \"mode\" mode (encoding) into \"bits\". On success, store the result in \"bits\".\r\n     */\r\n    public static appendBytes(content: string,\r\n        mode: Mode,\r\n        bits: BitArray,\r\n        encoding: string): void /*throws WriterException*/ {\r\n        switch (mode) {\r\n            case Mode.NUMERIC:\r\n                Encoder.appendNumericBytes(content, bits);\r\n                break;\r\n            case Mode.ALPHANUMERIC:\r\n                Encoder.appendAlphanumericBytes(content, bits);\r\n                break;\r\n            case Mode.BYTE:\r\n                Encoder.append8BitBytes(content, bits, encoding);\r\n                break;\r\n            case Mode.KANJI:\r\n                Encoder.appendKanjiBytes(content, bits);\r\n                break;\r\n            default:\r\n                throw new Exception(Exception.WriterException, 'Invalid mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    private static getDigit(singleCharacter: string): number {\r\n        return singleCharacter.charCodeAt(0) - 48;\r\n    }\r\n\r\n    private static isDigit(singleCharacter: string): boolean {\r\n        const cn = Encoder.getDigit(singleCharacter);\r\n        return cn >= 0 && cn <= 9;\r\n    }\r\n\r\n    public static appendNumericBytes(content: string, bits: BitArray): void {\r\n        const length = content.length;\r\n        let i = 0;\r\n        while (i < length) {\r\n            const num1 = Encoder.getDigit(content.charAt(i));\r\n            if (i + 2 < length) {\r\n                // Encode three numeric letters in ten bits.\r\n                const num2 = Encoder.getDigit(content.charAt(i + 1));\r\n                const num3 = Encoder.getDigit(content.charAt(i + 2));\r\n                bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);\r\n                i += 3;\r\n            } else if (i + 1 < length) {\r\n                // Encode two numeric letters in seven bits.\r\n                const num2 = Encoder.getDigit(content.charAt(i + 1));\r\n                bits.appendBits(num1 * 10 + num2, 7);\r\n                i += 2;\r\n            } else {\r\n                // Encode one numeric letter in four bits.\r\n                bits.appendBits(num1, 4);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static appendAlphanumericBytes(content: string, bits: BitArray): void /*throws WriterException*/ {\r\n        const length = content.length;\r\n        let i = 0;\r\n        while (i < length) {\r\n            const code1 = Encoder.getAlphanumericCode(content.charCodeAt(i));\r\n            if (code1 === -1) {\r\n                throw new Exception(Exception.WriterException);\r\n            }\r\n            if (i + 1 < length) {\r\n                const code2 = Encoder.getAlphanumericCode(content.charCodeAt(i + 1));\r\n                if (code2 === -1) {\r\n                    throw new Exception(Exception.WriterException);\r\n                }\r\n                // Encode two alphanumeric letters in 11 bits.\r\n                bits.appendBits(code1 * 45 + code2, 11);\r\n                i += 2;\r\n            } else {\r\n                // Encode one alphanumeric letter in six bits.\r\n                bits.appendBits(code1, 6);\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static append8BitBytes(content: string, bits: BitArray, encoding: string): void {\r\n        let bytes: Uint8Array;\r\n        try {\r\n            bytes = StringEncoding.encode(content, encoding);\r\n        } catch (uee/*: UnsupportedEncodingException*/) {\r\n            throw new Exception(Exception.WriterException, uee);\r\n        }\r\n        for (let i = 0, length = bytes.length; i !== length; i++) {\r\n            const b = bytes[i];\r\n            bits.appendBits(b, 8);\r\n        }\r\n    }\r\n\r\n    public static appendKanjiBytes(content: string, bits: BitArray): void /*throws WriterException*/ {\r\n        let bytes: Uint8Array;\r\n        try {\r\n            bytes = StringEncoding.encode(content, CharacterSetECI.SJIS.getName());\r\n        } catch (uee/*: UnsupportedEncodingException*/) {\r\n            throw new Exception(Exception.WriterException, uee);\r\n        }\r\n        const length = bytes.length;\r\n        for (let i = 0; i < length; i += 2) {\r\n            const byte1 = bytes[i] & 0xFF;\r\n            const byte2 = bytes[i + 1] & 0xFF;\r\n            const code = ((byte1 << 8) & 0xFFFFFFFF) | byte2;\r\n            let subtracted = -1;\r\n            if (code >= 0x8140 && code <= 0x9ffc) {\r\n                subtracted = code - 0x8140;\r\n            } else if (code >= 0xe040 && code <= 0xebbf) {\r\n                subtracted = code - 0xc140;\r\n            }\r\n            if (subtracted === -1) {\r\n                throw new Exception(Exception.WriterException, 'Invalid byte sequence');\r\n            }\r\n            const encoded = ((subtracted >> 8) * 0xc0) + (subtracted & 0xff);\r\n            bits.appendBits(encoded, 13);\r\n        }\r\n    }\r\n\r\n    private static appendECI(eci: CharacterSetECI, bits: BitArray): void {\r\n        bits.appendBits(Mode.ECI.getBits(), 4);\r\n        // This is correct for values up to 127, which is all we need now.\r\n        bits.appendBits(eci.getValue(), 8);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/Encoder.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.reedsolomon {*/\r\n\r\n/*import java.util.ArrayList;*/\r\n/*import java.util.List;*/\r\n\r\nimport GenericGF from './GenericGF';\r\nimport GenericGFPoly from './GenericGFPoly';\r\nimport Exception from './../../Exception';\r\nimport System from './../../util/System';\r\n\r\n/**\r\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\r\n *\r\n * @author Sean Owen\r\n * @author William Rucklidge\r\n */\r\nexport default class ReedSolomonEncoder {\r\n\r\n    private field: GenericGF;\r\n    private cachedGenerators: GenericGFPoly[];\r\n\r\n    public constructor(field: GenericGF) {\r\n        this.field = field;\r\n        this.cachedGenerators = [];\r\n        this.cachedGenerators.push(new GenericGFPoly(field, Int32Array.from([1])));\r\n    }\r\n\r\n    private buildGenerator(degree: number /*int*/): GenericGFPoly {\r\n        const cachedGenerators = this.cachedGenerators;\r\n        if (degree >= cachedGenerators.length) {\r\n            let lastGenerator = cachedGenerators[cachedGenerators.length - 1];\r\n            const field = this.field;\r\n            for (let d = cachedGenerators.length; d <= degree; d++) {\r\n                const nextGenerator = lastGenerator.multiply(\r\n                    new GenericGFPoly(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\r\n                cachedGenerators.push(nextGenerator);\r\n                lastGenerator = nextGenerator;\r\n            }\r\n        }\r\n        return cachedGenerators[degree];\r\n    }\r\n\r\n    public encode(toEncode: Int32Array, ecBytes: number /*int*/): void {\r\n        if (ecBytes === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'No error correction bytes');\r\n        }\r\n        const dataBytes = toEncode.length - ecBytes;\r\n        if (dataBytes <= 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'No data bytes provided');\r\n        }\r\n        const generator = this.buildGenerator(ecBytes);\r\n        const infoCoefficients: Int32Array = new Int32Array(dataBytes);\r\n        System.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\r\n        let info = new GenericGFPoly(this.field, infoCoefficients);\r\n        info = info.multiplyByMonomial(ecBytes, 1);\r\n        const remainder = info.divide(generator)[1];\r\n        const coefficients = remainder.getCoefficients();\r\n        const numZeroCoefficients = ecBytes - coefficients.length;\r\n        for (let i = 0; i < numZeroCoefficients; i++) {\r\n            toEncode[dataBytes + i] = 0;\r\n        }\r\n        System.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/reedsolomon/ReedSolomonEncoder.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\nimport ByteMatrix from './ByteMatrix';\r\nimport Exception from './../../Exception';\r\n\r\n/**\r\n * @author Satoru Takabayashi\r\n * @author Daniel Switkin\r\n * @author Sean Owen\r\n */\r\nexport default class MaskUtil {\r\n\r\n    // Penalty weights from section 6.8.2.1\r\n    private static N1 = 3;\r\n    private static N2 = 3;\r\n    private static N3 = 40;\r\n    private static N4 = 10;\r\n\r\n    private constructor() {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\r\n     * give penalty to them. Example: 00000 or 11111.\r\n     */\r\n    public static applyMaskPenaltyRule1(matrix: ByteMatrix): number /*int*/ {\r\n        return MaskUtil.applyMaskPenaltyRule1Internal(matrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(matrix, false);\r\n    }\r\n\r\n    /**\r\n     * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\r\n     * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\r\n     * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\r\n     */\r\n    public static applyMaskPenaltyRule2(matrix: ByteMatrix): number /*int*/ {\r\n        let penalty = 0;\r\n        const array: Array<Uint8Array> = matrix.getArray();\r\n        const width: number /*int*/ = matrix.getWidth();\r\n        const height: number /*int*/ = matrix.getHeight();\r\n        for (let y = 0; y < height - 1; y++) {\r\n            const arrayY = array[y];\r\n            for (let x = 0; x < width - 1; x++) {\r\n                const value = arrayY[x];\r\n                if (value === arrayY[x + 1] && value === array[y + 1][x] && value === array[y + 1][x + 1]) {\r\n                    penalty++;\r\n                }\r\n            }\r\n        }\r\n        return MaskUtil.N2 * penalty;\r\n    }\r\n\r\n    /**\r\n     * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4\r\n     * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we\r\n     * find patterns like 000010111010000, we give penalty once.\r\n     */\r\n    public static applyMaskPenaltyRule3(matrix: ByteMatrix): number /*int*/ {\r\n        let numPenalties = 0;\r\n        const array: Array<Uint8Array> = matrix.getArray();\r\n        const width: number /*int*/ = matrix.getWidth();\r\n        const height: number /*int*/ = matrix.getHeight();\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const arrayY: Uint8Array = array[y];  // We can at least optimize this access\r\n                if (x + 6 < width &&\r\n                    arrayY[x] === 1 &&\r\n                    arrayY[x + 1] === 0 &&\r\n                    arrayY[x + 2] === 1 &&\r\n                    arrayY[x + 3] === 1 &&\r\n                    arrayY[x + 4] === 1 &&\r\n                    arrayY[x + 5] === 0 &&\r\n                    arrayY[x + 6] === 1 &&\r\n                    (MaskUtil.isWhiteHorizontal(arrayY, x - 4, x) || MaskUtil.isWhiteHorizontal(arrayY, x + 7, x + 11))) {\r\n                    numPenalties++;\r\n                }\r\n                if (y + 6 < height &&\r\n                    array[y][x] === 1 &&\r\n                    array[y + 1][x] === 0 &&\r\n                    array[y + 2][x] === 1 &&\r\n                    array[y + 3][x] === 1 &&\r\n                    array[y + 4][x] === 1 &&\r\n                    array[y + 5][x] === 0 &&\r\n                    array[y + 6][x] === 1 &&\r\n                    (MaskUtil.isWhiteVertical(array, x, y - 4, y) || MaskUtil.isWhiteVertical(array, x, y + 7, y + 11))) {\r\n                    numPenalties++;\r\n                }\r\n            }\r\n        }\r\n        return numPenalties * MaskUtil.N3;\r\n    }\r\n\r\n    private static isWhiteHorizontal(rowArray: Uint8Array, from: number /*int*/, to: number /*int*/): boolean {\r\n        from = Math.max(from, 0);\r\n        to = Math.min(to, rowArray.length);\r\n        for (let i = from; i < to; i++) {\r\n            if (rowArray[i] === 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static isWhiteVertical(array: Uint8Array[], col: number /*int*/, from: number /*int*/, to: number /*int*/): boolean {\r\n        from = Math.max(from, 0);\r\n        to = Math.min(to, array.length);\r\n        for (let i = from; i < to; i++) {\r\n            if (array[i][col] === 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\r\n     * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\r\n     */\r\n    public static applyMaskPenaltyRule4(matrix: ByteMatrix): number /*int*/ {\r\n        let numDarkCells = 0;\r\n        const array: Array<Uint8Array> = matrix.getArray();\r\n        const width: number /*int*/ = matrix.getWidth();\r\n        const height: number /*int*/ = matrix.getHeight();\r\n        for (let y = 0; y < height; y++) {\r\n            const arrayY: Uint8Array = array[y];\r\n            for (let x = 0; x < width; x++) {\r\n                if (arrayY[x] === 1) {\r\n                    numDarkCells++;\r\n                }\r\n            }\r\n        }\r\n        const numTotalCells = matrix.getHeight() * matrix.getWidth();\r\n        const fivePercentVariances = Math.floor(Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells);\r\n        return fivePercentVariances * MaskUtil.N4;\r\n    }\r\n\r\n    /**\r\n     * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\r\n     * pattern conditions.\r\n     */\r\n    public static getDataMaskBit(maskPattern: number /*int*/, x: number /*int*/, y: number /*int*/): boolean {\r\n        let intermediate: number; /*int*/\r\n        let temp: number; /*int*/\r\n        switch (maskPattern) {\r\n            case 0:\r\n                intermediate = (y + x) & 0x1;\r\n                break;\r\n            case 1:\r\n                intermediate = y & 0x1;\r\n                break;\r\n            case 2:\r\n                intermediate = x % 3;\r\n                break;\r\n            case 3:\r\n                intermediate = (y + x) % 3;\r\n                break;\r\n            case 4:\r\n                intermediate = (Math.floor(y / 2) + Math.floor(x / 3)) & 0x1;\r\n                break;\r\n            case 5:\r\n                temp = y * x;\r\n                intermediate = (temp & 0x1) + (temp % 3);\r\n                break;\r\n            case 6:\r\n                temp = y * x;\r\n                intermediate = ((temp & 0x1) + (temp % 3)) & 0x1;\r\n                break;\r\n            case 7:\r\n                temp = y * x;\r\n                intermediate = ((temp % 3) + ((y + x) & 0x1)) & 0x1;\r\n                break;\r\n            default:\r\n                throw new Exception(Exception.IllegalArgumentException, 'Invalid mask pattern: ' + maskPattern);\r\n        }\r\n        return intermediate === 0;\r\n    }\r\n\r\n    /**\r\n     * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\r\n     * vertical and horizontal orders respectively.\r\n     */\r\n    private static applyMaskPenaltyRule1Internal(matrix: ByteMatrix, isHorizontal: boolean): number /*int*/ {\r\n        let penalty = 0;\r\n        const iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\r\n        const jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\r\n        const array: Array<Uint8Array> = matrix.getArray();\r\n        for (let i = 0; i < iLimit; i++) {\r\n            let numSameBitCells = 0;\r\n            let prevBit = -1;\r\n            for (let j = 0; j < jLimit; j++) {\r\n                const bit = isHorizontal ? array[i][j] : array[j][i];\r\n                if (bit === prevBit) {\r\n                    numSameBitCells++;\r\n                } else {\r\n                    if (numSameBitCells >= 5) {\r\n                        penalty += MaskUtil.N1 + (numSameBitCells - 5);\r\n                    }\r\n                    numSameBitCells = 1;  // Include the cell itself.\r\n                    prevBit = bit;\r\n                }\r\n            }\r\n            if (numSameBitCells >= 5) {\r\n                penalty += MaskUtil.N1 + (numSameBitCells - 5);\r\n            }\r\n        }\r\n        return penalty;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/MaskUtil.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\nimport ErrorCorrectionLevel from './../decoder/ErrorCorrectionLevel';\r\nimport Mode from './../decoder/Mode';\r\nimport Version from './../decoder/Version';\r\nimport StringBuilder from './../../util/StringBuilder';\r\nimport ByteMatrix from './ByteMatrix';\r\n\r\n/**\r\n * @author satorux@google.com (Satoru Takabayashi) - creator\r\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\r\n */\r\nexport default class QRCode {\r\n\r\n    public static NUM_MASK_PATTERNS = 8;\r\n\r\n    private mode: Mode;\r\n    private ecLevel: ErrorCorrectionLevel;\r\n    private version: Version;\r\n    private maskPattern: number; /*int*/\r\n    private matrix: ByteMatrix;\r\n\r\n    public constructor() {\r\n        this.maskPattern = -1;\r\n    }\r\n\r\n    public getMode(): Mode {\r\n        return this.mode;\r\n    }\r\n\r\n    public getECLevel(): ErrorCorrectionLevel {\r\n        return this.ecLevel;\r\n    }\r\n\r\n    public getVersion(): Version {\r\n        return this.version;\r\n    }\r\n\r\n    public getMaskPattern(): number /*int*/ {\r\n        return this.maskPattern;\r\n    }\r\n\r\n    public getMatrix(): ByteMatrix {\r\n        return this.matrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        const result = new StringBuilder(); // (200)\r\n        result.append('<<\\n');\r\n        result.append(' mode: ');\r\n        result.append(this.mode ? this.mode.toString() : 'null');\r\n        result.append('\\n ecLevel: ');\r\n        result.append(this.ecLevel ? this.ecLevel.toString() : 'null');\r\n        result.append('\\n version: ');\r\n        result.append(this.version ? this.version.toString() : 'null');\r\n        result.append('\\n maskPattern: ');\r\n        result.append(this.maskPattern.toString());\r\n        if (this.matrix) {\r\n            result.append('\\n matrix:\\n');\r\n            result.append(this.matrix.toString());\r\n        } else {\r\n            result.append('\\n matrix: null\\n');\r\n        }\r\n        result.append('>>\\n');\r\n        return result.toString();\r\n    }\r\n\r\n    public setMode(value: Mode): void {\r\n        this.mode = value;\r\n    }\r\n\r\n    public setECLevel(value: ErrorCorrectionLevel): void {\r\n        this.ecLevel = value;\r\n    }\r\n\r\n    public setVersion(version: Version): void {\r\n        this.version = version;\r\n    }\r\n\r\n    public setMaskPattern(value: number /*int*/): void {\r\n        this.maskPattern = value;\r\n    }\r\n\r\n    public setMatrix(value: ByteMatrix): void {\r\n        this.matrix = value;\r\n    }\r\n\r\n    // Check if \"mask_pattern\" is valid.\r\n    public static isValidMaskPattern(maskPattern: number /*int*/): boolean {\r\n        return maskPattern >= 0 && maskPattern < QRCode.NUM_MASK_PATTERNS;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/QRCode.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode {*/\r\n\r\nimport BarcodeFormat from './../BarcodeFormat';\r\nimport EncodeHintType from './../EncodeHintType';\r\nimport Writer from './../Writer';\r\nimport BitMatrix from './../common/BitMatrix';\r\nimport ByteMatrix from './encoder/ByteMatrix';\r\nimport ErrorCorrectionLevel from './decoder/ErrorCorrectionLevel';\r\nimport Encoder from './encoder/Encoder';\r\nimport QRCode from './encoder/QRCode';\r\nimport Exception from './../Exception';\r\n\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class QRCodeWriter implements Writer {\r\n\r\n    private static QUIET_ZONE_SIZE = 4;\r\n\r\n    /*@Override*/\r\n    // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\r\n    //     /*throws WriterException */ {\r\n\r\n    //   return encode(contents, format, width, height, null)\r\n    // }\r\n\r\n    /*@Override*/\r\n    public encode(contents: string,\r\n        format: BarcodeFormat,\r\n        width: number /*int*/,\r\n        height: number /*int*/,\r\n        hints: Map<EncodeHintType, any>): BitMatrix /*throws WriterException */ {\r\n\r\n        if (contents.length === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Found empty contents');\r\n        }\r\n\r\n        if (format !== BarcodeFormat.QR_CODE) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Can only encode QR_CODE, but got ' + format);\r\n        }\r\n\r\n        if (width < 0 || height < 0) {\r\n            throw new Exception('IllegalArgumentException', 'Requested dimensions are too small: ' + width + 'x' +\r\n                height);\r\n        }\r\n\r\n        let errorCorrectionLevel = ErrorCorrectionLevel.L;\r\n        let quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\r\n        if (hints !== null) {\r\n            if (undefined !== hints.get(EncodeHintType.ERROR_CORRECTION)) {\r\n                errorCorrectionLevel = ErrorCorrectionLevel.fromString(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\r\n            }\r\n            if (undefined !== hints.get(EncodeHintType.MARGIN)) {\r\n                quietZone = Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10);\r\n            }\r\n        }\r\n\r\n        const code: QRCode = Encoder.encode(contents, errorCorrectionLevel, hints);\r\n        return QRCodeWriter.renderResult(code, width, height, quietZone);\r\n    }\r\n\r\n    // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\r\n    // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\r\n    private static renderResult(code: QRCode, width: number /*int*/, height: number /*int*/, quietZone: number /*int*/): BitMatrix {\r\n        const input = code.getMatrix();\r\n        if (input === null) {\r\n            throw new Exception(Exception.IllegalStateException);\r\n        }\r\n        const inputWidth = input.getWidth();\r\n        const inputHeight = input.getHeight();\r\n        const qrWidth = inputWidth + (quietZone * 2);\r\n        const qrHeight = inputHeight + (quietZone * 2);\r\n        const outputWidth = Math.max(width, qrWidth);\r\n        const outputHeight = Math.max(height, qrHeight);\r\n\r\n        const multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\r\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\r\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\r\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\r\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\r\n        const leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\r\n        const topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\r\n\r\n        const output = new BitMatrix(outputWidth, outputHeight);\r\n\r\n        for (let inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++ , outputY += multiple) {\r\n            // Write the contents of this row of the barcode\r\n            for (let inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++ , outputX += multiple) {\r\n                if (input.get(inputX, inputY) === 1) {\r\n                    output.setRegion(outputX, outputY, multiple, multiple);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/QRCodeWriter.ts","// browser\r\nexport { default as BrowserCodeReader } from './browser/BrowserCodeReader';\r\nexport * from './browser/BrowserQRCodeReader';\r\nexport * from './browser/BrowserQRCodeSvgWriter';\r\nexport { default as HTMLCanvasElementLuminanceSource } from './browser/HTMLCanvasElementLuminanceSource';\r\nexport { default as VideoInputDevice } from './browser/VideoInputDevice';\r\n\r\n// core\r\nexport { default as BarcodeFormat } from './core/BarcodeFormat';\r\nexport { default as Binarizer } from './core/Binarizer';\r\nexport { default as BinaryBitmap } from './core/BinaryBitmap';\r\nexport { default as DecodeHintType } from './core/DecodeHintType';\r\nexport { default as Exception } from './core/Exception';\r\nexport { default as InvertedLuminanceSource } from './core/InvertedLuminanceSource';\r\nexport { default as LuminanceSource } from './core/LuminanceSource';\r\nexport { default as MultiFormatReader } from './core/MultiFormatReader';\r\nexport { default as MultiFormatWriter } from './core/MultiFormatWriter';\r\nexport { default as PlanarYUVLuminanceSource } from './core/PlanarYUVLuminanceSource';\r\nexport { default as Reader } from './core/Reader';\r\nexport { default as Result } from './core/Result';\r\nexport { default as ResultMetadataType } from './core/ResultMetadataType';\r\nexport { default as ResultPointCallback } from './core/ResultPointCallback';\r\nexport { default as RGBLuminanceSource } from './core/RGBLuminanceSource';\r\nexport { default as Writer } from './core/Writer';\r\n\r\n// core/common\r\nexport { default as BitArray } from './core/common/BitArray';\r\nexport { default as BitMatrix } from './core/common/BitMatrix';\r\nexport { default as BitSource } from './core/common/BitSource';\r\nexport { default as CharacterSetECI } from './core/common/CharacterSetECI';\r\nexport { default as DecoderResult } from './core/common/DecoderResult';\r\nexport { default as DefaultGridSampler } from './core/common/DefaultGridSampler';\r\nexport { default as DetectorResult } from './core/common/DetectorResult';\r\nexport { default as GlobalHistogramBinarizer } from './core/common/GlobalHistogramBinarizer';\r\nexport { default as GridSampler } from './core/common/GridSampler';\r\nexport { default as GridSamplerInstance } from './core/common/GridSamplerInstance';\r\nexport { default as HybridBinarizer } from './core/common/HybridBinarizer';\r\nexport { default as PerspectiveTransform } from './core/common/PerspectiveTransform';\r\nexport { default as StringUtils } from './core/common/StringUtils';\r\n\r\n// core/common/detector\r\nexport { default as MathUtils } from './core/common/detector/MathUtils';\r\n// export { default as MonochromeRectangleDetector } from './core/common/detector/MonochromeRectangleDetector';\r\nexport { default as WhiteRectangleDetector } from './core/common/detector/WhiteRectangleDetector';\r\n\r\n// core/common/reedsolomon\r\nexport { default as GenericGF } from './core/common/reedsolomon/GenericGF';\r\nexport { default as GenericGFPoly } from './core/common/reedsolomon/GenericGFPoly';\r\nexport { default as ReedSolomonDecoder } from './core/common/reedsolomon/ReedSolomonDecoder';\r\nexport { default as ReedSolomonEncoder } from './core/common/reedsolomon/ReedSolomonEncoder';\r\n\r\n// core/qrcode\r\nexport { default as QRCodeReader } from './core/qrcode/QRCodeReader';\r\nexport { default as QRCodeWriter } from './core/qrcode/QRCodeWriter';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import QRCodeReader from './../core/qrcode/QRCodeReader';\r\nimport VideoInputDevice from './VideoInputDevice';\r\nimport BrowserCodeReader from './BrowserCodeReader';\r\n\r\n/**\r\n * QR Code reader to use from browser.\r\n *\r\n * @class BrowserQRCodeReader\r\n * @extends {BrowserCodeReader}\r\n */\r\nclass BrowserQRCodeReader extends BrowserCodeReader {\r\n    /**\r\n     * Creates an instance of BrowserQRCodeReader.\r\n     * @param {number} [timeBetweenScansMillis=500] the time delay between subsequent decode tries\r\n     *\r\n     * @memberOf BrowserQRCodeReader\r\n     */\r\n    public constructor(timeBetweenScansMillis: number = 500) {\r\n        super(new QRCodeReader(), timeBetweenScansMillis);\r\n    }\r\n}\r\n\r\nexport { VideoInputDevice, BrowserQRCodeReader };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/BrowserQRCodeReader.ts","export default class Float {\r\n    public static floatToIntBits(f: number): number {\r\n        return f;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/util/Float.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport DecodeHintType from './../../DecodeHintType';\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport DecoderResult from './../../common/DecoderResult';\r\nimport GenericGF from './../../common/reedsolomon/GenericGF';\r\nimport ReedSolomonDecoder from './../../common/reedsolomon/ReedSolomonDecoder';\r\nimport BitMatrixParser from './BitMatrixParser';\r\nimport QRCodeDecoderMetaData from './QRCodeDecoderMetaData';\r\nimport DataBlock from './DataBlock';\r\nimport DecodedBitStreamParser from './DecodedBitStreamParser';\r\nimport Exception from './../../Exception';\r\n\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\r\n * the QR Code from an image.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class Decoder {\r\n\r\n    private rsDecoder: ReedSolomonDecoder;\r\n\r\n    public constructor() {\r\n        this.rsDecoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\r\n    }\r\n\r\n    // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\r\n    //   return decode(image, null)\r\n    // }\r\n\r\n    /**\r\n     * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\r\n     * \"true\" is taken to mean a black module.</p>\r\n     *\r\n     * @param image booleans representing white/black QR Code modules\r\n     * @param hints decoding hints that should be used to influence decoding\r\n     * @return text and bytes encoded within the QR Code\r\n     * @throws FormatException if the QR Code cannot be decoded\r\n     * @throws ChecksumException if error correction fails\r\n     */\r\n    public decodeBooleanArray(image: boolean[][], hints?: Map<DecodeHintType, any>): DecoderResult {\r\n        return this.decodeBitMatrix(BitMatrix.parseFromBooleanArray(image), hints);\r\n    }\r\n\r\n    // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\r\n    //   return decode(bits, null)\r\n    // }\r\n\r\n    /**\r\n     * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\r\n     *\r\n     * @param bits booleans representing white/black QR Code modules\r\n     * @param hints decoding hints that should be used to influence decoding\r\n     * @return text and bytes encoded within the QR Code\r\n     * @throws FormatException if the QR Code cannot be decoded\r\n     * @throws ChecksumException if error correction fails\r\n     */\r\n    public decodeBitMatrix(bits: BitMatrix, hints?: Map<DecodeHintType, any>): DecoderResult {\r\n\r\n        // Construct a parser and read version, error-correction level\r\n        const parser = new BitMatrixParser(bits);\r\n        let ex = null;\r\n        try {\r\n            return this.decodeBitMatrixParser(parser, hints);\r\n        } catch (e/*: FormatException, ChecksumException*/) {\r\n            ex = e;\r\n        }\r\n\r\n        try {\r\n\r\n            // Revert the bit matrix\r\n            parser.remask();\r\n\r\n            // Will be attempting a mirrored reading of the version and format info.\r\n            parser.setMirror(true);\r\n\r\n            // Preemptively read the version.\r\n            parser.readVersion();\r\n\r\n            // Preemptively read the format information.\r\n            parser.readFormatInformation();\r\n\r\n            /*\r\n             * Since we're here, this means we have successfully detected some kind\r\n             * of version and format information when mirrored. This is a good sign,\r\n             * that the QR code may be mirrored, and we should try once more with a\r\n             * mirrored content.\r\n             */\r\n            // Prepare for a mirrored reading.\r\n            parser.mirror();\r\n\r\n            const result = this.decodeBitMatrixParser(parser, hints);\r\n\r\n            // Success! Notify the caller that the code was mirrored.\r\n            result.setOther(new QRCodeDecoderMetaData(true));\r\n\r\n            return result;\r\n\r\n        } catch (e/*FormatException | ChecksumException*/) {\r\n            // Throw the exception from the original reading\r\n            if (ex !== null) {\r\n                throw ex;\r\n            }\r\n            throw e;\r\n\r\n        }\r\n    }\r\n\r\n    private decodeBitMatrixParser(parser: BitMatrixParser, hints: Map<DecodeHintType, any>): DecoderResult {\r\n        const version = parser.readVersion();\r\n        const ecLevel = parser.readFormatInformation().getErrorCorrectionLevel();\r\n\r\n        // Read codewords\r\n        const codewords = parser.readCodewords();\r\n        // Separate into data blocks\r\n        const dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);\r\n\r\n        // Count total number of data bytes\r\n        let totalBytes = 0;\r\n        for (const dataBlock of dataBlocks) {\r\n            totalBytes += dataBlock.getNumDataCodewords();\r\n        }\r\n        const resultBytes = new Uint8Array(totalBytes);\r\n        let resultOffset = 0;\r\n\r\n        // Error-correct and copy data blocks together into a stream of bytes\r\n        for (const dataBlock of dataBlocks) {\r\n            const codewordBytes = dataBlock.getCodewords();\r\n            const numDataCodewords = dataBlock.getNumDataCodewords();\r\n            this.correctErrors(codewordBytes, numDataCodewords);\r\n            for (let i = 0; i < numDataCodewords; i++) {\r\n                resultBytes[resultOffset++] = codewordBytes[i];\r\n            }\r\n        }\r\n\r\n        // Decode the contents of that stream of bytes\r\n        return DecodedBitStreamParser.decode(resultBytes, version, ecLevel, hints);\r\n    }\r\n\r\n    /**\r\n     * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\r\n     * correct the errors in-place using Reed-Solomon error correction.</p>\r\n     *\r\n     * @param codewordBytes data and error correction codewords\r\n     * @param numDataCodewords number of codewords that are data bytes\r\n     * @throws ChecksumException if error correction fails\r\n     */\r\n    private correctErrors(codewordBytes: Uint8Array, numDataCodewords: number /*int*/): void /*throws ChecksumException*/ {\r\n        const numCodewords = codewordBytes.length;\r\n        // First read into an array of ints\r\n        const codewordsInts = new Int32Array(codewordBytes);\r\n        // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\r\n        // const codewordsInts = new Int32Array(numCodewords)\r\n        // for (let i = 0; i < numCodewords; i++) {\r\n        //   codewordsInts[i] = codewordBytes[i] & 0xFF\r\n        // }\r\n        try {\r\n            this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\r\n        } catch (ignored/*: ReedSolomonException*/) {\r\n            throw new Exception(Exception.ChecksumException);\r\n        }\r\n        // Copy back into array of bytes -- only need to worry about the bytes that were data\r\n        // We don't care about errors in the error-correction codewords\r\n        for (let i = 0; i < numDataCodewords; i++) {\r\n            codewordBytes[i] = /*(byte) */codewordsInts[i];\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/Decoder.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport Version from './Version';\r\nimport FormatInformation from './FormatInformation';\r\nimport Exception from './../../Exception';\r\nimport DataMask from './DataMask';\r\n/**\r\n * @author Sean Owen\r\n */\r\nexport default class BitMatrixParser {\r\n\r\n    private bitMatrix: BitMatrix;\r\n    private parsedVersion: Version;\r\n    private parsedFormatInfo: FormatInformation;\r\n    private isMirror: boolean;\r\n\r\n    /**\r\n     * @param bitMatrix {@link BitMatrix} to parse\r\n     * @throws FormatException if dimension is not >= 21 and 1 mod 4\r\n     */\r\n    public constructor(bitMatrix: BitMatrix) /*throws FormatException*/ {\r\n        const dimension = bitMatrix.getHeight();\r\n        if (dimension < 21 || (dimension & 0x03) !== 1) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n        this.bitMatrix = bitMatrix;\r\n    }\r\n\r\n    /**\r\n     * <p>Reads format information from one of its two locations within the QR Code.</p>\r\n     *\r\n     * @return {@link FormatInformation} encapsulating the QR Code's format info\r\n     * @throws FormatException if both format information locations cannot be parsed as\r\n     * the valid encoding of format information\r\n     */\r\n    public readFormatInformation(): FormatInformation /*throws FormatException*/ {\r\n\r\n        if (this.parsedFormatInfo !== null && this.parsedFormatInfo !== undefined) {\r\n            return this.parsedFormatInfo;\r\n        }\r\n\r\n        // Read top-left format info bits\r\n        let formatInfoBits1 = 0;\r\n        for (let i = 0; i < 6; i++) {\r\n            formatInfoBits1 = this.copyBit(i, 8, formatInfoBits1);\r\n        }\r\n        // .. and skip a bit in the timing pattern ...\r\n        formatInfoBits1 = this.copyBit(7, 8, formatInfoBits1);\r\n        formatInfoBits1 = this.copyBit(8, 8, formatInfoBits1);\r\n        formatInfoBits1 = this.copyBit(8, 7, formatInfoBits1);\r\n        // .. and skip a bit in the timing pattern ...\r\n        for (let j = 5; j >= 0; j--) {\r\n            formatInfoBits1 = this.copyBit(8, j, formatInfoBits1);\r\n        }\r\n\r\n        // Read the top-right/bottom-left pattern too\r\n        const dimension = this.bitMatrix.getHeight();\r\n        let formatInfoBits2 = 0;\r\n        const jMin = dimension - 7;\r\n        for (let j = dimension - 1; j >= jMin; j--) {\r\n            formatInfoBits2 = this.copyBit(8, j, formatInfoBits2);\r\n        }\r\n        for (let i = dimension - 8; i < dimension; i++) {\r\n            formatInfoBits2 = this.copyBit(i, 8, formatInfoBits2);\r\n        }\r\n\r\n        this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);\r\n        if (this.parsedFormatInfo !== null) {\r\n            return this.parsedFormatInfo;\r\n        }\r\n        throw new Exception(Exception.FormatException);\r\n    }\r\n\r\n    /**\r\n     * <p>Reads version information from one of its two locations within the QR Code.</p>\r\n     *\r\n     * @return {@link Version} encapsulating the QR Code's version\r\n     * @throws FormatException if both version information locations cannot be parsed as\r\n     * the valid encoding of version information\r\n     */\r\n    public readVersion(): Version /*throws FormatException*/ {\r\n\r\n        if (this.parsedVersion !== null && this.parsedVersion !== undefined) {\r\n            return this.parsedVersion;\r\n        }\r\n\r\n        const dimension = this.bitMatrix.getHeight();\r\n\r\n        const provisionalVersion = Math.floor((dimension - 17) / 4);\r\n        if (provisionalVersion <= 6) {\r\n            return Version.getVersionForNumber(provisionalVersion);\r\n        }\r\n\r\n        // Read top-right version info: 3 wide by 6 tall\r\n        let versionBits = 0;\r\n        const ijMin = dimension - 11;\r\n        for (let j = 5; j >= 0; j--) {\r\n            for (let i = dimension - 9; i >= ijMin; i--) {\r\n                versionBits = this.copyBit(i, j, versionBits);\r\n            }\r\n        }\r\n\r\n        let theParsedVersion = Version.decodeVersionInformation(versionBits);\r\n        if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {\r\n            this.parsedVersion = theParsedVersion;\r\n            return theParsedVersion;\r\n        }\r\n\r\n        // Hmm, failed. Try bottom left: 6 wide by 3 tall\r\n        versionBits = 0;\r\n        for (let i = 5; i >= 0; i--) {\r\n            for (let j = dimension - 9; j >= ijMin; j--) {\r\n                versionBits = this.copyBit(i, j, versionBits);\r\n            }\r\n        }\r\n\r\n        theParsedVersion = Version.decodeVersionInformation(versionBits);\r\n        if (theParsedVersion !== null && theParsedVersion.getDimensionForVersion() === dimension) {\r\n            this.parsedVersion = theParsedVersion;\r\n            return theParsedVersion;\r\n        }\r\n        throw new Exception(Exception.FormatException);\r\n    }\r\n\r\n    private copyBit(i: number /*int*/, j: number /*int*/, versionBits: number /*int*/): number /*int*/ {\r\n        const bit: boolean = this.isMirror ? this.bitMatrix.get(j, i) : this.bitMatrix.get(i, j);\r\n        return bit ? (versionBits << 1) | 0x1 : versionBits << 1;\r\n    }\r\n\r\n    /**\r\n     * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the\r\n     * correct order in order to reconstruct the codewords bytes contained within the\r\n     * QR Code.</p>\r\n     *\r\n     * @return bytes encoded within the QR Code\r\n     * @throws FormatException if the exact number of bytes expected is not read\r\n     */\r\n    public readCodewords(): Uint8Array /*throws FormatException*/ {\r\n\r\n        const formatInfo = this.readFormatInformation();\r\n        const version = this.readVersion();\r\n\r\n        // Get the data mask for the format used in this QR Code. This will exclude\r\n        // some bits from reading as we wind through the bit matrix.\r\n        const dataMask = DataMask.values.get(formatInfo.getDataMask());\r\n        const dimension = this.bitMatrix.getHeight();\r\n        dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\r\n\r\n        const functionPattern = version.buildFunctionPattern();\r\n\r\n        let readingUp: boolean = true;\r\n        const result = new Uint8Array(version.getTotalCodewords());\r\n        let resultOffset = 0;\r\n        let currentByte = 0;\r\n        let bitsRead = 0;\r\n        // Read columns in pairs, from right to left\r\n        for (let j = dimension - 1; j > 0; j -= 2) {\r\n            if (j === 6) {\r\n                // Skip whole column with vertical alignment pattern\r\n                // saves time and makes the other code proceed more cleanly\r\n                j--;\r\n            }\r\n            // Read alternatingly from bottom to top then top to bottom\r\n            for (let count = 0; count < dimension; count++) {\r\n                const i = readingUp ? dimension - 1 - count : count;\r\n                for (let col = 0; col < 2; col++) {\r\n                    // Ignore bits covered by the function pattern\r\n                    if (!functionPattern.get(j - col, i)) {\r\n                        // Read a bit\r\n                        bitsRead++;\r\n                        currentByte <<= 1;\r\n                        if (this.bitMatrix.get(j - col, i)) {\r\n                            currentByte |= 1;\r\n                        }\r\n                        // If we've made a whole byte, save it off\r\n                        if (bitsRead === 8) {\r\n                            result[resultOffset++] = /*(byte) */currentByte;\r\n                            bitsRead = 0;\r\n                            currentByte = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            readingUp = !readingUp; // readingUp ^= true; // readingUp = !readingUp; // switch directions\r\n        }\r\n        if (resultOffset !== version.getTotalCodewords()) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.\r\n     */\r\n    public remask(): void {\r\n        if (this.parsedFormatInfo === null) {\r\n            return; // We have no format information, and have no data mask\r\n        }\r\n        const dataMask = DataMask.values[this.parsedFormatInfo.getDataMask()];\r\n        const dimension = this.bitMatrix.getHeight();\r\n        dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\r\n    }\r\n\r\n    /**\r\n     * Prepare the parser for a mirrored operation.\r\n     * This flag has effect only on the {@link #readFormatInformation()} and the\r\n     * {@link #readVersion()}. Before proceeding with {@link #readCodewords()} the\r\n     * {@link #mirror()} method should be called.\r\n     *\r\n     * @param mirror Whether to read version and format information mirrored.\r\n     */\r\n    public setMirror(isMirror: boolean): void {\r\n        this.parsedVersion = null;\r\n        this.parsedFormatInfo = null;\r\n        this.isMirror = isMirror;\r\n    }\r\n\r\n    /** Mirror the bit matrix in order to attempt a second reading. */\r\n    public mirror(): void {\r\n        const bitMatrix = this.bitMatrix;\r\n        for (let x = 0, width = bitMatrix.getWidth(); x < width; x++) {\r\n            for (let y = x + 1, height = bitMatrix.getHeight(); y < height; y++) {\r\n                if (bitMatrix.get(x, y) !== bitMatrix.get(y, x)) {\r\n                    bitMatrix.flip(y, x);\r\n                    bitMatrix.flip(x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/BitMatrixParser.ts","import ECB from './ECB';\r\n\r\n/**\r\n * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will\r\n * use blocks of differing sizes within one version, so, this encapsulates the parameters for\r\n * each set of blocks. It also holds the number of error-correction codewords per block since it\r\n * will be the same across all blocks within one version.</p>\r\n */\r\nexport default class ECBlocks {\r\n    private ecBlocks: ECB[];\r\n\r\n    public constructor(private ecCodewordsPerBlock: number /*int*/, ...ecBlocks: ECB[]) {\r\n        this.ecBlocks = ecBlocks;\r\n    }\r\n\r\n    public getECCodewordsPerBlock(): number /*int*/ {\r\n        return this.ecCodewordsPerBlock;\r\n    }\r\n\r\n    public getNumBlocks(): number /*int*/ {\r\n        let total = 0;\r\n        const ecBlocks = this.ecBlocks;\r\n        for (const ecBlock of ecBlocks) {\r\n            total += ecBlock.getCount();\r\n        }\r\n        return total;\r\n    }\r\n\r\n    public getTotalECCodewords(): number /*int*/ {\r\n        return this.ecCodewordsPerBlock * this.getNumBlocks();\r\n    }\r\n\r\n    public getECBlocks(): ECB[] {\r\n        return this.ecBlocks;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/ECBlocks.ts","/**\r\n * <p>Encapsulates the parameters for one error-correction block in one symbol version.\r\n * This includes the number of data codewords, and the number of times a block with these\r\n * parameters is used consecutively in the QR code version's format.</p>\r\n */\r\nexport default class ECB {\r\n    private count: number; /*int*/\r\n    private dataCodewords: number; /*int*/\r\n\r\n    public constructor(count: number /*int*/, dataCodewords: number /*int*/) {\r\n        this.count = count;\r\n        this.dataCodewords = dataCodewords;\r\n    }\r\n\r\n    public getCount(): number /*int*/ {\r\n        return this.count;\r\n    }\r\n\r\n    public getDataCodewords(): number /*int*/ {\r\n        return this.dataCodewords;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/ECB.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport BitMatrix from './../../common/BitMatrix';\r\n\r\nexport const enum DataMaskValues {\r\n    DATA_MASK_000,\r\n    DATA_MASK_001,\r\n    DATA_MASK_010,\r\n    DATA_MASK_011,\r\n    DATA_MASK_100,\r\n    DATA_MASK_101,\r\n    DATA_MASK_110,\r\n    DATA_MASK_111\r\n}\r\n\r\n/**\r\n * <p>Encapsulates data masks for the data bits in a QR code, per ISO 18004:2006 6.8. Implementations\r\n * of this class can un-mask a raw BitMatrix. For simplicity, they will unmask the entire BitMatrix,\r\n * including areas used for finder patterns, timing patterns, etc. These areas should be unused\r\n * after the point they are unmasked anyway.</p>\r\n *\r\n * <p>Note that the diagram in section 6.8.1 is misleading since it indicates that i is column position\r\n * and j is row position. In fact, as the text says, i is row position and j is column position.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class DataMask {\r\n\r\n    // See ISO 18004:2006 6.8.1\r\n\r\n    public constructor(private value: DataMaskValues, private isMasked: (i: number, j: number) => boolean) {\r\n    }\r\n\r\n    public static values = new Map<DataMaskValues, DataMask>([\r\n        /**\r\n         * 000: mask bits for which (x + y) mod 2 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_000, new DataMask(DataMaskValues.DATA_MASK_000, (i: number /*int*/, j: number /*int*/) => { return ((i + j) & 0x01) === 0; })],\r\n\r\n        /**\r\n         * 001: mask bits for which x mod 2 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_001, new DataMask(DataMaskValues.DATA_MASK_001, (i: number /*int*/, j: number /*int*/) => { return (i & 0x01) === 0; })],\r\n\r\n        /**\r\n         * 010: mask bits for which y mod 3 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_010, new DataMask(DataMaskValues.DATA_MASK_010, (i: number /*int*/, j: number /*int*/) => { return j % 3 === 0; })],\r\n\r\n        /**\r\n         * 011: mask bits for which (x + y) mod 3 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_011, new DataMask(DataMaskValues.DATA_MASK_011, (i: number /*int*/, j: number /*int*/) => { return (i + j) % 3 === 0; })],\r\n\r\n        /**\r\n         * 100: mask bits for which (x/2 + y/3) mod 2 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_100, new DataMask(DataMaskValues.DATA_MASK_100, (i: number /*int*/, j: number /*int*/) => { return ((Math.floor(i / 2) + Math.floor(j / 3)) & 0x01) === 0; })],\r\n\r\n        /**\r\n         * 101: mask bits for which xy mod 2 + xy mod 3 == 0\r\n         * equivalently, such that xy mod 6 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_101, new DataMask(DataMaskValues.DATA_MASK_101, (i: number /*int*/, j: number /*int*/) => { return (i * j) % 6 === 0; })],\r\n\r\n        /**\r\n         * 110: mask bits for which (xy mod 2 + xy mod 3) mod 2 == 0\r\n         * equivalently, such that xy mod 6 < 3\r\n         */\r\n        [DataMaskValues.DATA_MASK_110, new DataMask(DataMaskValues.DATA_MASK_110, (i: number /*int*/, j: number /*int*/) => { return ((i * j) % 6) < 3; })],\r\n\r\n        /**\r\n         * 111: mask bits for which ((x+y)mod 2 + xy mod 3) mod 2 == 0\r\n         * equivalently, such that (x + y + xy mod 3) mod 2 == 0\r\n         */\r\n        [DataMaskValues.DATA_MASK_111, new DataMask(DataMaskValues.DATA_MASK_111, (i: number /*int*/, j: number /*int*/) => { return ((i + j + ((i * j) % 3)) & 0x01) === 0; })],\r\n    ]);\r\n\r\n    // End of enum constants.\r\n\r\n\r\n    /**\r\n     * <p>Implementations of this method reverse the data masking process applied to a QR Code and\r\n     * make its bits ready to read.</p>\r\n     *\r\n     * @param bits representation of QR Code bits\r\n     * @param dimension dimension of QR Code, represented by bits, being unmasked\r\n     */\r\n    public unmaskBitMatrix(bits: BitMatrix, dimension: number /*int*/): void {\r\n        for (let i = 0; i < dimension; i++) {\r\n            for (let j = 0; j < dimension; j++) {\r\n                if (this.isMasked(i, j)) {\r\n                    bits.flip(j, i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // abstract boolean isMasked(i: number /*int*/, j: number /*int*/);\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/DataMask.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport Version from './Version';\r\nimport ECBlocks from './ECBlocks';\r\nimport ECB from './ECB';\r\nimport ErrorCorrectionLevel from './ErrorCorrectionLevel';\r\nimport Exception from './../../Exception';\r\n\r\n/**\r\n * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\r\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\r\n * is represented by an instance of this class.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class DataBlock {\r\n\r\n    private constructor(private numDataCodewords: number /*int*/, private codewords: Uint8Array) { }\r\n\r\n    /**\r\n     * <p>When QR Codes use multiple data blocks, they are actually interleaved.\r\n     * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\r\n     * method will separate the data into original blocks.</p>\r\n     *\r\n     * @param rawCodewords bytes as read directly from the QR Code\r\n     * @param version version of the QR Code\r\n     * @param ecLevel error-correction level of the QR Code\r\n     * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\r\n     *         QR Code\r\n     */\r\n    public static getDataBlocks(rawCodewords: Uint8Array,\r\n        version: Version,\r\n        ecLevel: ErrorCorrectionLevel): DataBlock[] {\r\n\r\n        if (rawCodewords.length !== version.getTotalCodewords()) {\r\n            throw new Exception(Exception.IllegalArgumentException);\r\n        }\r\n\r\n        // Figure out the number and size of data blocks used by this version and\r\n        // error correction level\r\n        const ecBlocks: ECBlocks = version.getECBlocksForLevel(ecLevel);\r\n\r\n        // First count the total number of data blocks\r\n        let totalBlocks = 0;\r\n        const ecBlockArray: ECB[] = ecBlocks.getECBlocks();\r\n        for (const ecBlock of ecBlockArray) {\r\n            totalBlocks += ecBlock.getCount();\r\n        }\r\n\r\n        // Now establish DataBlocks of the appropriate size and number of data codewords\r\n        const result = new Array<DataBlock>(totalBlocks);\r\n        let numResultBlocks = 0;\r\n        for (const ecBlock of ecBlockArray) {\r\n            for (let i = 0; i < ecBlock.getCount(); i++) {\r\n                const numDataCodewords = ecBlock.getDataCodewords();\r\n                const numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\r\n                result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\r\n            }\r\n        }\r\n\r\n        // All blocks have the same amount of data, except that the last n\r\n        // (where n may be 0) have 1 more byte. Figure out where these start.\r\n        const shorterBlocksTotalCodewords = result[0].codewords.length;\r\n        let longerBlocksStartAt = result.length - 1;\r\n        // TYPESCRIPTPORT: check length is correct here\r\n        while (longerBlocksStartAt >= 0) {\r\n            const numCodewords = result[longerBlocksStartAt].codewords.length;\r\n            if (numCodewords === shorterBlocksTotalCodewords) {\r\n                break;\r\n            }\r\n            longerBlocksStartAt--;\r\n        }\r\n        longerBlocksStartAt++;\r\n\r\n        const shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\r\n        // The last elements of result may be 1 element longer\r\n        // first fill out as many elements as all of them have\r\n        let rawCodewordsOffset = 0;\r\n        for (let i = 0; i < shorterBlocksNumDataCodewords; i++) {\r\n            for (let j = 0; j < numResultBlocks; j++) {\r\n                result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\r\n            }\r\n        }\r\n        // Fill out the last data block in the longer ones\r\n        for (let j = longerBlocksStartAt; j < numResultBlocks; j++) {\r\n            result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\r\n        }\r\n        // Now add in error correction blocks\r\n        const max = result[0].codewords.length;\r\n        for (let i = shorterBlocksNumDataCodewords; i < max; i++) {\r\n            for (let j = 0; j < numResultBlocks; j++) {\r\n                const iOffset = j < longerBlocksStartAt ? i : i + 1;\r\n                result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getNumDataCodewords(): number /*int*/ {\r\n        return this.numDataCodewords;\r\n    }\r\n\r\n    public getCodewords(): Uint8Array {\r\n        return this.codewords;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/DataBlock.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.decoder {*/\r\n\r\nimport DecodeHintType from './../../DecodeHintType';\r\nimport BitSource from './../../common/BitSource';\r\nimport CharacterSetECI from './../../common/CharacterSetECI';\r\nimport DecoderResult from './../../common/DecoderResult';\r\nimport StringUtils from './../../common/StringUtils';\r\nimport Version from './Version';\r\nimport ErrorCorrectionLevel from './ErrorCorrectionLevel';\r\nimport Mode from './Mode';\r\nimport Exception from './../../Exception';\r\nimport StringBuilder from './../../util/StringBuilder';\r\nimport StringEncoding from './../../util/StringEncoding';\r\n\r\n/*import java.io.UnsupportedEncodingException;*/\r\n/*import java.util.ArrayList;*/\r\n/*import java.util.Collection;*/\r\n/*import java.util.List;*/\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes\r\n * in one QR Code. This class decodes the bits back into text.</p>\r\n *\r\n * <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class DecodedBitStreamParser {\r\n\r\n    /**\r\n     * See ISO 18004:2006, 6.4.4 Table 5\r\n     */\r\n    private static ALPHANUMERIC_CHARS =\r\n        '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\r\n    private static GB2312_SUBSET = 1;\r\n\r\n    public static decode(bytes: Uint8Array,\r\n        version: Version,\r\n        ecLevel: ErrorCorrectionLevel,\r\n        hints: Map<DecodeHintType, any>): DecoderResult /*throws FormatException*/ {\r\n        const bits = new BitSource(bytes);\r\n        let result = new StringBuilder();\r\n        const byteSegments = new Array<Uint8Array>(); // 1\r\n        // TYPESCRIPTPORT: I do not use constructor with size 1 as in original Java means capacity and the array length is checked below\r\n        let symbolSequence = -1;\r\n        let parityData = -1;\r\n\r\n        try {\r\n            let currentCharacterSetECI: CharacterSetECI = null;\r\n            let fc1InEffect: boolean = false;\r\n            let mode: Mode;\r\n            do {\r\n                // While still another segment to read...\r\n                if (bits.available() < 4) {\r\n                    // OK, assume we're done. Really, a TERMINATOR mode should have been recorded here\r\n                    mode = Mode.TERMINATOR;\r\n                } else {\r\n                    const modeBits = bits.readBits(4);\r\n                    mode = Mode.forBits(modeBits); // mode is encoded by 4 bits\r\n                }\r\n                switch (mode) {\r\n                    case Mode.TERMINATOR:\r\n                        break;\r\n                    case Mode.FNC1_FIRST_POSITION:\r\n                    case Mode.FNC1_SECOND_POSITION:\r\n                        // We do little with FNC1 except alter the parsed result a bit according to the spec\r\n                        fc1InEffect = true;\r\n                        break;\r\n                    case Mode.STRUCTURED_APPEND:\r\n                        if (bits.available() < 16) {\r\n                            throw new Exception(Exception.FormatException);\r\n                        }\r\n                        // sequence number and parity is added later to the result metadata\r\n                        // Read next 8 bits (symbol sequence #) and 8 bits (data: parity), then continue\r\n                        symbolSequence = bits.readBits(8);\r\n                        parityData = bits.readBits(8);\r\n                        break;\r\n                    case Mode.ECI:\r\n                        // Count doesn't apply to ECI\r\n                        const value = DecodedBitStreamParser.parseECIValue(bits);\r\n                        currentCharacterSetECI = CharacterSetECI.getCharacterSetECIByValue(value);\r\n                        if (currentCharacterSetECI === null) {\r\n                            throw new Exception(Exception.FormatException);\r\n                        }\r\n                        break;\r\n                    case Mode.HANZI:\r\n                        // First handle Hanzi mode which does not start with character count\r\n                        // Chinese mode contains a sub set indicator right after mode indicator\r\n                        const subset = bits.readBits(4);\r\n                        const countHanzi = bits.readBits(mode.getCharacterCountBits(version));\r\n                        if (subset === DecodedBitStreamParser.GB2312_SUBSET) {\r\n                            DecodedBitStreamParser.decodeHanziSegment(bits, result, countHanzi);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        // \"Normal\" QR code modes:\r\n                        // How many characters will follow, encoded in this mode?\r\n                        const count = bits.readBits(mode.getCharacterCountBits(version));\r\n                        switch (mode) {\r\n                            case Mode.NUMERIC:\r\n                                DecodedBitStreamParser.decodeNumericSegment(bits, result, count);\r\n                                break;\r\n                            case Mode.ALPHANUMERIC:\r\n                                DecodedBitStreamParser.decodeAlphanumericSegment(bits, result, count, fc1InEffect);\r\n                                break;\r\n                            case Mode.BYTE:\r\n                                DecodedBitStreamParser.decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);\r\n                                break;\r\n                            case Mode.KANJI:\r\n                                DecodedBitStreamParser.decodeKanjiSegment(bits, result, count);\r\n                                break;\r\n                            default:\r\n                                throw new Exception(Exception.FormatException);\r\n                        }\r\n                        break;\r\n                }\r\n            } while (mode !== Mode.TERMINATOR);\r\n        } catch (iae/*: IllegalArgumentException*/) {\r\n            // from readBits() calls\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n\r\n        return new DecoderResult(bytes,\r\n            result.toString(),\r\n            byteSegments.length === 0 ? null : byteSegments,\r\n            ecLevel === null ? null : ecLevel.toString(),\r\n            symbolSequence,\r\n            parityData);\r\n    }\r\n\r\n    /**\r\n     * See specification GBT 18284-2000\r\n     */\r\n    private static decodeHanziSegment(bits: BitSource,\r\n        result: StringBuilder,\r\n        count: number /*int*/): void /*throws FormatException*/ {\r\n        // Don't crash trying to read more bits than we have available.\r\n        if (count * 13 > bits.available()) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n\r\n        // Each character will require 2 bytes. Read the characters as 2-byte pairs\r\n        // and decode as GB2312 afterwards\r\n        const buffer = new Uint8Array(2 * count);\r\n        let offset = 0;\r\n        while (count > 0) {\r\n            // Each 13 bits encodes a 2-byte character\r\n            const twoBytes = bits.readBits(13);\r\n            let assembledTwoBytes = (((twoBytes / 0x060) << 8) & 0xFFFFFFFF) | (twoBytes % 0x060);\r\n            if (assembledTwoBytes < 0x003BF) {\r\n                // In the 0xA1A1 to 0xAAFE range\r\n                assembledTwoBytes += 0x0A1A1;\r\n            } else {\r\n                // In the 0xB0A1 to 0xFAFE range\r\n                assembledTwoBytes += 0x0A6A1;\r\n            }\r\n            buffer[offset] = /*(byte) */((assembledTwoBytes >> 8) & 0xFF);\r\n            buffer[offset + 1] = /*(byte) */(assembledTwoBytes & 0xFF);\r\n            offset += 2;\r\n            count--;\r\n        }\r\n\r\n        try {\r\n            result.append(StringEncoding.decode(buffer, StringUtils.GB2312));\r\n            // TYPESCRIPTPORT: TODO: implement GB2312 decode. StringView from MDN could be a starting point\r\n        } catch (ignored/*: UnsupportedEncodingException*/) {\r\n            throw new Exception(Exception.FormatException, ignored);\r\n        }\r\n    }\r\n\r\n    private static decodeKanjiSegment(bits: BitSource,\r\n        result: StringBuilder,\r\n        count: number /*int*/): void /*throws FormatException*/ {\r\n        // Don't crash trying to read more bits than we have available.\r\n        if (count * 13 > bits.available()) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n\r\n        // Each character will require 2 bytes. Read the characters as 2-byte pairs\r\n        // and decode as Shift_JIS afterwards\r\n        const buffer = new Uint8Array(2 * count);\r\n        let offset = 0;\r\n        while (count > 0) {\r\n            // Each 13 bits encodes a 2-byte character\r\n            const twoBytes = bits.readBits(13);\r\n            let assembledTwoBytes = (((twoBytes / 0x0C0) << 8) & 0xFFFFFFFF) | (twoBytes % 0x0C0);\r\n            if (assembledTwoBytes < 0x01F00) {\r\n                // In the 0x8140 to 0x9FFC range\r\n                assembledTwoBytes += 0x08140;\r\n            } else {\r\n                // In the 0xE040 to 0xEBBF range\r\n                assembledTwoBytes += 0x0C140;\r\n            }\r\n            buffer[offset] = /*(byte) */(assembledTwoBytes >> 8);\r\n            buffer[offset + 1] = /*(byte) */assembledTwoBytes;\r\n            offset += 2;\r\n            count--;\r\n        }\r\n        // Shift_JIS may not be supported in some environments:\r\n        try {\r\n            result.append(StringEncoding.decode(buffer, StringUtils.SHIFT_JIS));\r\n            // TYPESCRIPTPORT: TODO: implement SHIFT_JIS decode. StringView from MDN could be a starting point\r\n        } catch (ignored/*: UnsupportedEncodingException*/) {\r\n            throw new Exception(Exception.FormatException, ignored);\r\n        }\r\n    }\r\n\r\n    private static decodeByteSegment(bits: BitSource,\r\n        result: StringBuilder,\r\n        count: number /*int*/,\r\n        currentCharacterSetECI: CharacterSetECI,\r\n        byteSegments: Uint8Array[],\r\n        hints: Map<DecodeHintType, any>): void /*throws FormatException*/ {\r\n        // Don't crash trying to read more bits than we have available.\r\n        if (8 * count > bits.available()) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n\r\n        const readBytes = new Uint8Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            readBytes[i] = /*(byte) */bits.readBits(8);\r\n        }\r\n        let encoding: string;\r\n        if (currentCharacterSetECI === null) {\r\n            // The spec isn't clear on this mode; see\r\n            // section 6.4.5: t does not say which encoding to assuming\r\n            // upon decoding. I have seen ISO-8859-1 used as well as\r\n            // Shift_JIS -- without anything like an ECI designator to\r\n            // give a hint.\r\n            encoding = StringUtils.guessEncoding(readBytes, hints);\r\n        } else {\r\n            encoding = currentCharacterSetECI.getName();\r\n        }\r\n        try {\r\n            result.append(StringEncoding.decode(readBytes, encoding));\r\n        } catch (ignored/*: UnsupportedEncodingException*/) {\r\n            throw new Exception(Exception.FormatException, ignored);\r\n        }\r\n        byteSegments.push(readBytes);\r\n    }\r\n\r\n    private static toAlphaNumericChar(value: number /*int*/): string /*throws FormatException*/ {\r\n        if (value >= DecodedBitStreamParser.ALPHANUMERIC_CHARS.length) {\r\n            throw new Exception(Exception.FormatException);\r\n        }\r\n        return DecodedBitStreamParser.ALPHANUMERIC_CHARS[value];\r\n    }\r\n\r\n    private static decodeAlphanumericSegment(bits: BitSource,\r\n        result: StringBuilder,\r\n        count: number /*int*/,\r\n        fc1InEffect: boolean): void /*throws FormatException*/ {\r\n        // Read two characters at a time\r\n        const start = result.length();\r\n        while (count > 1) {\r\n            if (bits.available() < 11) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            const nextTwoCharsBits = bits.readBits(11);\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(nextTwoCharsBits / 45)));\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(nextTwoCharsBits % 45));\r\n            count -= 2;\r\n        }\r\n        if (count === 1) {\r\n            // special case: one character left\r\n            if (bits.available() < 6) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(bits.readBits(6)));\r\n        }\r\n        // See section 6.4.8.1, 6.4.8.2\r\n        if (fc1InEffect) {\r\n            // We need to massage the result a bit if in an FNC1 mode:\r\n            for (let i = start; i < result.length(); i++) {\r\n                if (result.charAt(i) === '%') {\r\n                    if (i < result.length() - 1 && result.charAt(i + 1) === '%') {\r\n                        // %% is rendered as %\r\n                        result.deleteCharAt(i + 1);\r\n                    } else {\r\n                        // In alpha mode, % should be converted to FNC1 separator 0x1D\r\n                        result.setCharAt(i, String.fromCharCode(0x1D));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static decodeNumericSegment(bits: BitSource,\r\n        result: StringBuilder,\r\n        count: number /*int*/): void /*throws FormatException*/ {\r\n        // Read three digits at a time\r\n        while (count >= 3) {\r\n            // Each 10 bits encodes three digits\r\n            if (bits.available() < 10) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            const threeDigitsBits = bits.readBits(10);\r\n            if (threeDigitsBits >= 1000) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(threeDigitsBits / 100)));\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(threeDigitsBits / 10) % 10));\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(threeDigitsBits % 10));\r\n            count -= 3;\r\n        }\r\n        if (count === 2) {\r\n            // Two digits left over to read, encoded in 7 bits\r\n            if (bits.available() < 7) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            const twoDigitsBits = bits.readBits(7);\r\n            if (twoDigitsBits >= 100) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(Math.floor(twoDigitsBits / 10)));\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(twoDigitsBits % 10));\r\n        } else if (count === 1) {\r\n            // One digit left over to read\r\n            if (bits.available() < 4) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            const digitBits = bits.readBits(4);\r\n            if (digitBits >= 10) {\r\n                throw new Exception(Exception.FormatException);\r\n            }\r\n            result.append(DecodedBitStreamParser.toAlphaNumericChar(digitBits));\r\n        }\r\n    }\r\n\r\n    private static parseECIValue(bits: BitSource): number /*int*/ /*throws FormatException*/ {\r\n        const firstByte = bits.readBits(8);\r\n        if ((firstByte & 0x80) === 0) {\r\n            // just one byte\r\n            return firstByte & 0x7F;\r\n        }\r\n        if ((firstByte & 0xC0) === 0x80) {\r\n            // two bytes\r\n            const secondByte = bits.readBits(8);\r\n            return (((firstByte & 0x3F) << 8) & 0xFFFFFFFF) | secondByte;\r\n        }\r\n        if ((firstByte & 0xE0) === 0xC0) {\r\n            // three bytes\r\n            const secondThirdBytes = bits.readBits(16);\r\n            return (((firstByte & 0x1F) << 16) & 0xFFFFFFFF) | secondThirdBytes;\r\n        }\r\n        throw new Exception(Exception.FormatException);\r\n    }\r\n\r\n}\r\n\r\nfunction Uint8ArrayToString(a: Uint8Array): string {\r\n    const CHUNK_SZ = 0x8000;\r\n    const c = new StringBuilder();\r\n    for (let i = 0, length = a.length; i < length; i += CHUNK_SZ) {\r\n        c.append(String.fromCharCode.apply(null, a.subarray(i, i + CHUNK_SZ)));\r\n    }\r\n    return c.toString();\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/decoder/DecodedBitStreamParser.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport DecodeHintType from './../../DecodeHintType';\r\nimport ResultPoint from './../../ResultPoint';\r\nimport ResultPointCallback from './../../ResultPointCallback';\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport DetectorResult from './../../common/DetectorResult';\r\nimport GridSampler from './../../common/GridSampler';\r\nimport GridSamplerInstance from './../../common/GridSamplerInstance';\r\nimport PerspectiveTransform from './../../common/PerspectiveTransform';\r\nimport MathUtils from './../../common/detector/MathUtils';\r\nimport Version from './../decoder/Version';\r\nimport FinderPatternFinder from './FinderPatternFinder';\r\nimport FinderPatternInfo from './FinderPatternInfo';\r\nimport FinderPattern from './FinderPattern';\r\nimport Exception from './../../Exception';\r\nimport AlignmentPattern from './AlignmentPattern';\r\nimport AlignmentPatternFinder from './AlignmentPatternFinder';\r\n\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\r\n * is rotated or skewed, or partially obscured.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class Detector {\r\n\r\n    private resultPointCallback: ResultPointCallback;\r\n\r\n    public constructor(private image: BitMatrix) { }\r\n\r\n    protected getImage(): BitMatrix {\r\n        return this.image;\r\n    }\r\n\r\n    protected getResultPointCallback(): ResultPointCallback {\r\n        return this.resultPointCallback;\r\n    }\r\n\r\n    /**\r\n     * <p>Detects a QR Code in an image.</p>\r\n     *\r\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\r\n     * @throws NotFoundException if QR Code cannot be found\r\n     * @throws FormatException if a QR Code cannot be decoded\r\n     */\r\n    // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\r\n    //   return detect(null)\r\n    // }\r\n\r\n    /**\r\n     * <p>Detects a QR Code in an image.</p>\r\n     *\r\n     * @param hints optional hints to detector\r\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\r\n     * @throws NotFoundException if QR Code cannot be found\r\n     * @throws FormatException if a QR Code cannot be decoded\r\n     */\r\n    public detect(hints: Map<DecodeHintType, any>): DetectorResult /*throws NotFoundException, FormatException*/ {\r\n\r\n        this.resultPointCallback = (hints === null || hints === undefined) ? null :\r\n        /*(ResultPointCallback) */hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\r\n\r\n        const finder = new FinderPatternFinder(this.image, this.resultPointCallback);\r\n        const info = finder.find(hints);\r\n\r\n        return this.processFinderPatternInfo(info);\r\n    }\r\n\r\n    protected processFinderPatternInfo(info: FinderPatternInfo): DetectorResult {\r\n\r\n        const topLeft: FinderPattern = info.getTopLeft();\r\n        const topRight: FinderPattern = info.getTopRight();\r\n        const bottomLeft: FinderPattern = info.getBottomLeft();\r\n\r\n        const moduleSize: number /*float*/ = this.calculateModuleSize(topLeft, topRight, bottomLeft);\r\n        if (moduleSize < 1.0) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n        const dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\r\n        const provisionalVersion: Version = Version.getProvisionalVersionForDimension(dimension);\r\n        const modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\r\n\r\n        let alignmentPattern: AlignmentPattern = null;\r\n        // Anything above version 1 has an alignment pattern\r\n        if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\r\n\r\n            // Guess where a \"bottom right\" finder pattern would have been\r\n            const bottomRightX: number /*float*/ = topRight.getX() - topLeft.getX() + bottomLeft.getX();\r\n            const bottomRightY: number /*float*/ = topRight.getY() - topLeft.getY() + bottomLeft.getY();\r\n\r\n            // Estimate that alignment pattern is closer by 3 modules\r\n            // from \"bottom right\" to known top left location\r\n            const correctionToTopLeft: number /*float*/ = 1.0 - 3.0 / modulesBetweenFPCenters;\r\n            const estAlignmentX = /*(int) */Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\r\n            const estAlignmentY = /*(int) */Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\r\n\r\n            // Kind of arbitrary -- expand search radius before giving up\r\n            for (let i = 4; i <= 16; i <<= 1) {\r\n                try {\r\n                    alignmentPattern = this.findAlignmentInRegion(moduleSize,\r\n                        estAlignmentX,\r\n                        estAlignmentY,\r\n                        i);\r\n                    break;\r\n                } catch (re/*NotFoundException*/) {\r\n                    if (!Exception.isOfType(re, Exception.NotFoundException)) {\r\n                        throw re;\r\n                    }\r\n                    // try next round\r\n                }\r\n            }\r\n            // If we didn't find alignment pattern... well try anyway without it\r\n        }\r\n\r\n        const transform: PerspectiveTransform =\r\n            Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\r\n\r\n        const bits: BitMatrix = Detector.sampleGrid(this.image, transform, dimension);\r\n\r\n        let points: ResultPoint[];\r\n        if (alignmentPattern === null) {\r\n            points = [bottomLeft, topLeft, topRight];\r\n        } else {\r\n            points = [bottomLeft, topLeft, topRight, alignmentPattern];\r\n        }\r\n        return new DetectorResult(bits, points);\r\n    }\r\n\r\n    private static createTransform(topLeft: ResultPoint,\r\n        topRight: ResultPoint,\r\n        bottomLeft: ResultPoint,\r\n        alignmentPattern: ResultPoint,\r\n        dimension: number /*int*/): PerspectiveTransform {\r\n        const dimMinusThree: number /*float*/ = dimension - 3.5;\r\n        let bottomRightX: number; /*float*/\r\n        let bottomRightY: number; /*float*/\r\n        let sourceBottomRightX: number; /*float*/\r\n        let sourceBottomRightY: number; /*float*/\r\n        if (alignmentPattern !== null) {\r\n            bottomRightX = alignmentPattern.getX();\r\n            bottomRightY = alignmentPattern.getY();\r\n            sourceBottomRightX = dimMinusThree - 3.0;\r\n            sourceBottomRightY = sourceBottomRightX;\r\n        } else {\r\n            // Don't have an alignment pattern, just make up the bottom-right point\r\n            bottomRightX = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();\r\n            bottomRightY = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();\r\n            sourceBottomRightX = dimMinusThree;\r\n            sourceBottomRightY = dimMinusThree;\r\n        }\r\n\r\n        return PerspectiveTransform.quadrilateralToQuadrilateral(\r\n            3.5,\r\n            3.5,\r\n            dimMinusThree,\r\n            3.5,\r\n            sourceBottomRightX,\r\n            sourceBottomRightY,\r\n            3.5,\r\n            dimMinusThree,\r\n            topLeft.getX(),\r\n            topLeft.getY(),\r\n            topRight.getX(),\r\n            topRight.getY(),\r\n            bottomRightX,\r\n            bottomRightY,\r\n            bottomLeft.getX(),\r\n            bottomLeft.getY());\r\n    }\r\n\r\n    private static sampleGrid(image: BitMatrix,\r\n        transform: PerspectiveTransform,\r\n        dimension: number /*int*/): BitMatrix /*throws NotFoundException*/ {\r\n\r\n        const sampler = GridSamplerInstance.getInstance();\r\n        return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\r\n    }\r\n\r\n    /**\r\n     * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\r\n     * of the finder patterns and estimated module size.</p>\r\n     */\r\n    private static computeDimension(topLeft: ResultPoint,\r\n        topRight: ResultPoint,\r\n        bottomLeft: ResultPoint,\r\n        moduleSize: number/*float*/): number /*int*/ /*throws NotFoundException*/ {\r\n        const tltrCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, topRight) / moduleSize);\r\n        const tlblCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, bottomLeft) / moduleSize);\r\n        let dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\r\n        switch (dimension & 0x03) { // mod 4\r\n            case 0:\r\n                dimension++;\r\n                break;\r\n            // 1? do nothing\r\n            case 2:\r\n                dimension--;\r\n                break;\r\n            case 3:\r\n                throw new Exception(Exception.NotFoundException);\r\n        }\r\n        return dimension;\r\n    }\r\n\r\n    /**\r\n     * <p>Computes an average estimated module size based on estimated derived from the positions\r\n     * of the three finder patterns.</p>\r\n     *\r\n     * @param topLeft detected top-left finder pattern center\r\n     * @param topRight detected top-right finder pattern center\r\n     * @param bottomLeft detected bottom-left finder pattern center\r\n     * @return estimated module size\r\n     */\r\n    protected calculateModuleSize(topLeft: ResultPoint,\r\n        topRight: ResultPoint,\r\n        bottomLeft: ResultPoint): number/*float*/ {\r\n        // Take the average\r\n        return (this.calculateModuleSizeOneWay(topLeft, topRight) +\r\n            this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\r\n    }\r\n\r\n    /**\r\n     * <p>Estimates module size based on two finder patterns -- it uses\r\n     * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\r\n     * width of each, measuring along the axis between their centers.</p>\r\n     */\r\n    private calculateModuleSizeOneWay(pattern: ResultPoint, otherPattern: ResultPoint): number/*float*/ {\r\n        const moduleSizeEst1: number /*float*/ = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */Math.floor(pattern.getX()),\r\n        /*(int) */Math.floor(pattern.getY()),\r\n        /*(int) */Math.floor(otherPattern.getX()),\r\n        /*(int) */Math.floor(otherPattern.getY()));\r\n        const moduleSizeEst2: number /*float*/ = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */Math.floor(otherPattern.getX()),\r\n        /*(int) */Math.floor(otherPattern.getY()),\r\n        /*(int) */Math.floor(pattern.getX()),\r\n        /*(int) */Math.floor(pattern.getY()));\r\n        if (isNaN(moduleSizeEst1)) {\r\n            return moduleSizeEst2 / 7.0;\r\n        }\r\n        if (isNaN(moduleSizeEst2)) {\r\n            return moduleSizeEst1 / 7.0;\r\n        }\r\n        // Average them, and divide by 7 since we've counted the width of 3 black modules,\r\n        // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\r\n        return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\r\n    }\r\n\r\n    /**\r\n     * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\r\n     * a finder pattern by looking for a black-white-black run from the center in the direction\r\n     * of another point (another finder pattern center), and in the opposite direction too.\r\n     */\r\n    private sizeOfBlackWhiteBlackRunBothWays(fromX: number /*int*/, fromY: number /*int*/, toX: number /*int*/, toY: number /*int*/): number/*float*/ {\r\n\r\n        let result: number /*float*/ = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\r\n\r\n        // Now count other way -- don't run off image though of course\r\n        let scale: number /*float*/ = 1.0;\r\n        let otherToX = fromX - (toX - fromX);\r\n        if (otherToX < 0) {\r\n            scale = fromX / /*(float) */(fromX - otherToX);\r\n            otherToX = 0;\r\n        } else if (otherToX >= this.image.getWidth()) {\r\n            scale = (this.image.getWidth() - 1 - fromX) / /*(float) */(otherToX - fromX);\r\n            otherToX = this.image.getWidth() - 1;\r\n        }\r\n        let otherToY = /*(int) */Math.floor(fromY - (toY - fromY) * scale);\r\n\r\n        scale = 1.0;\r\n        if (otherToY < 0) {\r\n            scale = fromY / /*(float) */(fromY - otherToY);\r\n            otherToY = 0;\r\n        } else if (otherToY >= this.image.getHeight()) {\r\n            scale = (this.image.getHeight() - 1 - fromY) / /*(float) */(otherToY - fromY);\r\n            otherToY = this.image.getHeight() - 1;\r\n        }\r\n        otherToX = /*(int) */Math.floor(fromX + (otherToX - fromX) * scale);\r\n\r\n        result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\r\n\r\n        // Middle pixel is double-counted this way; subtract 1\r\n        return result - 1.0;\r\n    }\r\n\r\n    /**\r\n     * <p>This method traces a line from a point in the image, in the direction towards another point.\r\n     * It begins in a black region, and keeps going until it finds white, then black, then white again.\r\n     * It reports the distance from the start to this point.</p>\r\n     *\r\n     * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\r\n     * may be skewed or rotated.</p>\r\n     */\r\n    private sizeOfBlackWhiteBlackRun(fromX: number /*int*/, fromY: number /*int*/, toX: number /*int*/, toY: number /*int*/): number/*float*/ {\r\n        // Mild variant of Bresenham's algorithm\r\n        // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\r\n        const steep: boolean = Math.abs(toY - fromY) > Math.abs(toX - fromX);\r\n        if (steep) {\r\n            let temp = fromX;\r\n            fromX = fromY;\r\n            fromY = temp;\r\n            temp = toX;\r\n            toX = toY;\r\n            toY = temp;\r\n        }\r\n\r\n        const dx = Math.abs(toX - fromX);\r\n        const dy = Math.abs(toY - fromY);\r\n        let error = -dx / 2;\r\n        const xstep = fromX < toX ? 1 : -1;\r\n        const ystep = fromY < toY ? 1 : -1;\r\n\r\n        // In black pixels, looking for white, first or second time.\r\n        let state = 0;\r\n        // Loop up until x == toX, but not beyond\r\n        const xLimit = toX + xstep;\r\n        for (let x = fromX, y = fromY; x !== xLimit; x += xstep) {\r\n            const realX = steep ? y : x;\r\n            const realY = steep ? x : y;\r\n\r\n            // Does current pixel mean we have moved white to black or vice versa?\r\n            // Scanning black in state 0,2 and white in state 1, so if we find the wrong\r\n            // color, advance to next state or end if we are in state 2 already\r\n            if ((state === 1) === this.image.get(realX, realY)) {\r\n                if (state === 2) {\r\n                    return MathUtils.distance(x, y, fromX, fromY);\r\n                }\r\n                state++;\r\n            }\r\n\r\n            error += dy;\r\n            if (error > 0) {\r\n                if (y === toY) {\r\n                    break;\r\n                }\r\n                y += ystep;\r\n                error -= dx;\r\n            }\r\n        }\r\n        // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\r\n        // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\r\n        // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\r\n        if (state === 2) {\r\n            return MathUtils.distance(toX + xstep, toY, fromX, fromY);\r\n        }\r\n        // else we didn't find even black-white-black; no estimate is really possible\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\r\n     * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\r\n     *\r\n     * @param overallEstModuleSize estimated module size so far\r\n     * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\r\n     * @param estAlignmentY y coordinate of above\r\n     * @param allowanceFactor number of pixels in all directions to search from the center\r\n     * @return {@link AlignmentPattern} if found, or null otherwise\r\n     * @throws NotFoundException if an unexpected error occurs during detection\r\n     */\r\n    protected findAlignmentInRegion(overallEstModuleSize: number/*float*/,\r\n        estAlignmentX: number /*int*/,\r\n        estAlignmentY: number /*int*/,\r\n        allowanceFactor: number/*float*/): AlignmentPattern {\r\n        // Look for an alignment pattern (3 modules in size) around where it\r\n        // should be\r\n        const allowance = /*(int) */Math.floor(allowanceFactor * overallEstModuleSize);\r\n        const alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\r\n        const alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\r\n        if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        const alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\r\n        const alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\r\n        if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        const alignmentFinder =\r\n            new AlignmentPatternFinder(\r\n                this.image,\r\n                alignmentAreaLeftX,\r\n                alignmentAreaTopY,\r\n                alignmentAreaRightX - alignmentAreaLeftX,\r\n                alignmentAreaBottomY - alignmentAreaTopY,\r\n                overallEstModuleSize,\r\n                this.resultPointCallback);\r\n        return alignmentFinder.find();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/Detector.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport DecodeHintType from './../../DecodeHintType';\r\nimport ResultPoint from './../../ResultPoint';\r\nimport ResultPointCallback from './../../ResultPointCallback';\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport FinderPattern from './FinderPattern';\r\nimport FinderPatternInfo from './FinderPatternInfo';\r\nimport Exception from './../../Exception';\r\n\r\n/*import java.io.Serializable;*/\r\n/*import java.util.ArrayList;*/\r\n/*import java.util.Collections;*/\r\n/*import java.util.Comparator;*/\r\n/*import java.util.List;*/\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\r\n * markers at three corners of a QR Code.</p>\r\n *\r\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class FinderPatternFinder {\r\n\r\n    private static CENTER_QUORUM = 2;\r\n    protected static MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\r\n    protected static MAX_MODULES = 57; // support up to version 10 for mobile clients\r\n\r\n    private possibleCenters: FinderPattern[];\r\n    private hasSkipped: boolean;\r\n    private crossCheckStateCount: Int32Array;\r\n\r\n    /**\r\n     * <p>Creates a finder that will search the image for three finder patterns.</p>\r\n     *\r\n     * @param image image to search\r\n     */\r\n    // public constructor(image: BitMatrix) {\r\n    //   this(image, null)\r\n    // }\r\n\r\n    public constructor(private image: BitMatrix, private resultPointCallback: ResultPointCallback) {\r\n        this.possibleCenters = [];\r\n        this.crossCheckStateCount = new Int32Array(5);\r\n        this.resultPointCallback = resultPointCallback;\r\n    }\r\n\r\n    protected getImage(): BitMatrix {\r\n        return this.image;\r\n    }\r\n\r\n    protected getPossibleCenters(): FinderPattern[] {\r\n        return this.possibleCenters;\r\n    }\r\n\r\n    public find(hints: Map<DecodeHintType, any>): FinderPatternInfo /*throws NotFoundException */ {\r\n        const tryHarder: boolean = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType.TRY_HARDER);\r\n        const pureBarcode: boolean = (hints !== null && hints !== undefined) && undefined !== hints.get(DecodeHintType.PURE_BARCODE);\r\n        const image = this.image;\r\n        const maxI = image.getHeight();\r\n        const maxJ = image.getWidth();\r\n        // We are looking for black/white/black/white/black modules in\r\n        // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\r\n\r\n        // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\r\n        // image, and then account for the center being 3 modules in size. This gives the smallest\r\n        // number of pixels the center could be, so skip this often. When trying harder, look for all\r\n        // QR versions regardless of how dense they are.\r\n        let iSkip = Math.floor((3 * maxI) / (4 * FinderPatternFinder.MAX_MODULES));\r\n        if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\r\n            iSkip = FinderPatternFinder.MIN_SKIP;\r\n        }\r\n\r\n        let done: boolean = false;\r\n        const stateCount = new Int32Array(5);\r\n        for (let i = iSkip - 1; i < maxI && !done; i += iSkip) {\r\n            // Get a row of black/white values\r\n            stateCount[0] = 0;\r\n            stateCount[1] = 0;\r\n            stateCount[2] = 0;\r\n            stateCount[3] = 0;\r\n            stateCount[4] = 0;\r\n            let currentState = 0;\r\n            for (let j = 0; j < maxJ; j++) {\r\n                if (image.get(j, i)) {\r\n                    // Black pixel\r\n                    if ((currentState & 1) === 1) { // Counting white pixels\r\n                        currentState++;\r\n                    }\r\n                    stateCount[currentState]++;\r\n                } else { // White pixel\r\n                    if ((currentState & 1) === 0) { // Counting black pixels\r\n                        if (currentState === 4) { // A winner?\r\n                            if (FinderPatternFinder.foundPatternCross(stateCount)) { // Yes\r\n                                const confirmed: boolean = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\r\n                                if (confirmed === true) {\r\n                                    // Start examining every other line. Checking each line turned out to be too\r\n                                    // expensive and didn't improve performance.\r\n                                    iSkip = 2;\r\n                                    if (this.hasSkipped === true) {\r\n                                        done = this.haveMultiplyConfirmedCenters();\r\n                                    } else {\r\n                                        const rowSkip = this.findRowSkip();\r\n                                        if (rowSkip > stateCount[2]) {\r\n                                            // Skip rows between row of lower confirmed center\r\n                                            // and top of presumed third confirmed center\r\n                                            // but back up a bit to get a full chance of detecting\r\n                                            // it, entire width of center of finder pattern\r\n\r\n                                            // Skip by rowSkip, but back off by stateCount[2] (size of last center\r\n                                            // of pattern we saw) to be conservative, and also back off by iSkip which\r\n                                            // is about to be re-added\r\n                                            i += rowSkip - stateCount[2] - iSkip;\r\n                                            j = maxJ - 1;\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    stateCount[0] = stateCount[2];\r\n                                    stateCount[1] = stateCount[3];\r\n                                    stateCount[2] = stateCount[4];\r\n                                    stateCount[3] = 1;\r\n                                    stateCount[4] = 0;\r\n                                    currentState = 3;\r\n                                    continue;\r\n                                }\r\n                                // Clear state to start looking again\r\n                                currentState = 0;\r\n                                stateCount[0] = 0;\r\n                                stateCount[1] = 0;\r\n                                stateCount[2] = 0;\r\n                                stateCount[3] = 0;\r\n                                stateCount[4] = 0;\r\n                            } else { // No, shift counts back by two\r\n                                stateCount[0] = stateCount[2];\r\n                                stateCount[1] = stateCount[3];\r\n                                stateCount[2] = stateCount[4];\r\n                                stateCount[3] = 1;\r\n                                stateCount[4] = 0;\r\n                                currentState = 3;\r\n                            }\r\n                        } else {\r\n                            stateCount[++currentState]++;\r\n                        }\r\n                    } else { // Counting white pixels\r\n                        stateCount[currentState]++;\r\n                    }\r\n                }\r\n            }\r\n            if (FinderPatternFinder.foundPatternCross(stateCount)) {\r\n                const confirmed: boolean = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\r\n                if (confirmed === true) {\r\n                    iSkip = stateCount[0];\r\n                    if (this.hasSkipped) {\r\n                        // Found a third one\r\n                        done = this.haveMultiplyConfirmedCenters();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const patternInfo: FinderPattern[] = this.selectBestPatterns();\r\n        ResultPoint.orderBestPatterns(patternInfo);\r\n\r\n        return new FinderPatternInfo(patternInfo);\r\n    }\r\n\r\n    /**\r\n     * Given a count of black/white/black/white/black pixels just seen and an end position,\r\n     * figures the location of the center of this run.\r\n     */\r\n    private static centerFromEnd(stateCount: Int32Array, end: number /*int*/): number/*float*/ {\r\n        return (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\r\n    }\r\n\r\n    /**\r\n     * @param stateCount count of black/white/black/white/black pixels just read\r\n     * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\r\n     *         used by finder patterns to be considered a match\r\n     */\r\n    protected static foundPatternCross(stateCount: Int32Array): boolean {\r\n        let totalModuleSize = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            const count = stateCount[i];\r\n            if (count === 0) {\r\n                return false;\r\n            }\r\n            totalModuleSize += count;\r\n        }\r\n        if (totalModuleSize < 7) {\r\n            return false;\r\n        }\r\n        const moduleSize: number /*float*/ = totalModuleSize / 7.0;\r\n        const maxVariance: number /*float*/ = moduleSize / 2.0;\r\n        // Allow less than 50% variance from 1-1-3-1-1 proportions\r\n        return Math.abs(moduleSize - stateCount[0]) < maxVariance &&\r\n            Math.abs(moduleSize - stateCount[1]) < maxVariance &&\r\n            Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance &&\r\n            Math.abs(moduleSize - stateCount[3]) < maxVariance &&\r\n            Math.abs(moduleSize - stateCount[4]) < maxVariance;\r\n    }\r\n\r\n    private getCrossCheckStateCount(): Int32Array {\r\n        const crossCheckStateCount = this.crossCheckStateCount;\r\n        crossCheckStateCount[0] = 0;\r\n        crossCheckStateCount[1] = 0;\r\n        crossCheckStateCount[2] = 0;\r\n        crossCheckStateCount[3] = 0;\r\n        crossCheckStateCount[4] = 0;\r\n        return crossCheckStateCount;\r\n    }\r\n\r\n    /**\r\n     * After a vertical and horizontal scan finds a potential finder pattern, this method\r\n     * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\r\n     * finder pattern to see if the same proportion is detected.\r\n     *\r\n     * @param startI row where a finder pattern was detected\r\n     * @param centerJ center of the section that appears to cross a finder pattern\r\n     * @param maxCount maximum reasonable number of modules that should be\r\n     *  observed in any reading state, based on the results of the horizontal scan\r\n     * @param originalStateCountTotal The original state count total.\r\n     * @return true if proportions are withing expected limits\r\n     */\r\n    private crossCheckDiagonal(startI: number /*int*/, centerJ: number /*int*/, maxCount: number /*int*/, originalStateCountTotal: number /*int*/): boolean {\r\n        const stateCount: Int32Array = this.getCrossCheckStateCount();\r\n\r\n        // Start counting up, left from center finding black center mass\r\n        let i = 0;\r\n        const image = this.image;\r\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\r\n            stateCount[2]++;\r\n            i++;\r\n        }\r\n\r\n        if (startI < i || centerJ < i) {\r\n            return false;\r\n        }\r\n\r\n        // Continue up, left finding white space\r\n        while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) &&\r\n            stateCount[1] <= maxCount) {\r\n            stateCount[1]++;\r\n            i++;\r\n        }\r\n\r\n        // If already too many modules in this state or ran off the edge:\r\n        if (startI < i || centerJ < i || stateCount[1] > maxCount) {\r\n            return false;\r\n        }\r\n\r\n        // Continue up, left finding black border\r\n        while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) &&\r\n            stateCount[0] <= maxCount) {\r\n            stateCount[0]++;\r\n            i++;\r\n        }\r\n        if (stateCount[0] > maxCount) {\r\n            return false;\r\n        }\r\n\r\n        const maxI = image.getHeight();\r\n        const maxJ = image.getWidth();\r\n\r\n        // Now also count down, right from center\r\n        i = 1;\r\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\r\n            stateCount[2]++;\r\n            i++;\r\n        }\r\n\r\n        // Ran off the edge?\r\n        if (startI + i >= maxI || centerJ + i >= maxJ) {\r\n            return false;\r\n        }\r\n\r\n        while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) &&\r\n            stateCount[3] < maxCount) {\r\n            stateCount[3]++;\r\n            i++;\r\n        }\r\n\r\n        if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\r\n            return false;\r\n        }\r\n\r\n        while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) &&\r\n            stateCount[4] < maxCount) {\r\n            stateCount[4]++;\r\n            i++;\r\n        }\r\n\r\n        if (stateCount[4] >= maxCount) {\r\n            return false;\r\n        }\r\n\r\n        // If we found a finder-pattern-like section, but its size is more than 100% different than\r\n        // the original, assume it's a false positive\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n        return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal &&\r\n            FinderPatternFinder.foundPatternCross(stateCount);\r\n    }\r\n\r\n    /**\r\n     * <p>After a horizontal scan finds a potential finder pattern, this method\r\n     * \"cross-checks\" by scanning down vertically through the center of the possible\r\n     * finder pattern to see if the same proportion is detected.</p>\r\n     *\r\n     * @param startI row where a finder pattern was detected\r\n     * @param centerJ center of the section that appears to cross a finder pattern\r\n     * @param maxCount maximum reasonable number of modules that should be\r\n     * observed in any reading state, based on the results of the horizontal scan\r\n     * @return vertical center of finder pattern, or {@link Float#NaN} if not found\r\n     */\r\n    private crossCheckVertical(startI: number /*int*/, centerJ: number /*int*/, maxCount: number /*int*/,\r\n        originalStateCountTotal: number /*int*/): number/*float*/ {\r\n        const image: BitMatrix = this.image;\r\n\r\n        const maxI = image.getHeight();\r\n        const stateCount: Int32Array = this.getCrossCheckStateCount();\r\n\r\n        // Start counting up from center\r\n        let i = startI;\r\n        while (i >= 0 && image.get(centerJ, i)) {\r\n            stateCount[2]++;\r\n            i--;\r\n        }\r\n        if (i < 0) {\r\n            return NaN;\r\n        }\r\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\r\n            stateCount[1]++;\r\n            i--;\r\n        }\r\n        // If already too many modules in this state or ran off the edge:\r\n        if (i < 0 || stateCount[1] > maxCount) {\r\n            return NaN;\r\n        }\r\n        while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\r\n            stateCount[0]++;\r\n            i--;\r\n        }\r\n        if (stateCount[0] > maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        // Now also count down from center\r\n        i = startI + 1;\r\n        while (i < maxI && image.get(centerJ, i)) {\r\n            stateCount[2]++;\r\n            i++;\r\n        }\r\n        if (i === maxI) {\r\n            return NaN;\r\n        }\r\n        while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\r\n            stateCount[3]++;\r\n            i++;\r\n        }\r\n        if (i === maxI || stateCount[3] >= maxCount) {\r\n            return NaN;\r\n        }\r\n        while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\r\n            stateCount[4]++;\r\n            i++;\r\n        }\r\n        if (stateCount[4] >= maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        // If we found a finder-pattern-like section, but its size is more than 40% different than\r\n        // the original, assume it's a false positive\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\r\n            stateCount[4];\r\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\r\n            return NaN;\r\n        }\r\n\r\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\r\n    }\r\n\r\n    /**\r\n     * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\r\n     * except it reads horizontally instead of vertically. This is used to cross-cross\r\n     * check a vertical cross check and locate the real center of the alignment pattern.</p>\r\n     */\r\n    private crossCheckHorizontal(startJ: number /*int*/, centerI: number /*int*/, maxCount: number /*int*/,\r\n        originalStateCountTotal: number /*int*/): number/*float*/ {\r\n        const image: BitMatrix = this.image;\r\n\r\n        const maxJ = image.getWidth();\r\n        const stateCount: Int32Array = this.getCrossCheckStateCount();\r\n\r\n        let j = startJ;\r\n        while (j >= 0 && image.get(j, centerI)) {\r\n            stateCount[2]++;\r\n            j--;\r\n        }\r\n        if (j < 0) {\r\n            return NaN;\r\n        }\r\n        while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\r\n            stateCount[1]++;\r\n            j--;\r\n        }\r\n        if (j < 0 || stateCount[1] > maxCount) {\r\n            return NaN;\r\n        }\r\n        while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\r\n            stateCount[0]++;\r\n            j--;\r\n        }\r\n        if (stateCount[0] > maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        j = startJ + 1;\r\n        while (j < maxJ && image.get(j, centerI)) {\r\n            stateCount[2]++;\r\n            j++;\r\n        }\r\n        if (j === maxJ) {\r\n            return NaN;\r\n        }\r\n        while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\r\n            stateCount[3]++;\r\n            j++;\r\n        }\r\n        if (j === maxJ || stateCount[3] >= maxCount) {\r\n            return NaN;\r\n        }\r\n        while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\r\n            stateCount[4]++;\r\n            j++;\r\n        }\r\n        if (stateCount[4] >= maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        // If we found a finder-pattern-like section, but its size is significantly different than\r\n        // the original, assume it's a false positive\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\r\n            stateCount[4];\r\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\r\n            return NaN;\r\n        }\r\n\r\n        return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\r\n    }\r\n\r\n    /**\r\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\r\n     * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\r\n     * with another horizontal scan. This is needed primarily to locate the real horizontal\r\n     * center of the pattern in cases of extreme skew.\r\n     * And then we cross-cross-cross check with another diagonal scan.</p>\r\n     *\r\n     * <p>If that succeeds the finder pattern location is added to a list that tracks\r\n     * the number of times each location has been nearly-matched as a finder pattern.\r\n     * Each additional find is more evidence that the location is in fact a finder\r\n     * pattern center\r\n     *\r\n     * @param stateCount reading state module counts from horizontal scan\r\n     * @param i row where finder pattern may be found\r\n     * @param j end of possible finder pattern in row\r\n     * @param pureBarcode true if in \"pure barcode\" mode\r\n     * @return true if a finder pattern candidate was found this time\r\n     */\r\n    protected handlePossibleCenter(stateCount: Int32Array, i: number /*int*/, j: number /*int*/, pureBarcode: boolean): boolean {\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] +\r\n            stateCount[4];\r\n        let centerJ: number /*float*/ = FinderPatternFinder.centerFromEnd(stateCount, j);\r\n        let centerI: number /*float*/ = this.crossCheckVertical(i, /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal);\r\n        if (!isNaN(centerI)) {\r\n            // Re-cross check\r\n            centerJ = this.crossCheckHorizontal(/*(int) */Math.floor(centerJ), /*(int) */Math.floor(centerI), stateCount[2], stateCountTotal);\r\n            if (!isNaN(centerJ) &&\r\n                (!pureBarcode || this.crossCheckDiagonal(/*(int) */Math.floor(centerI), /*(int) */Math.floor(centerJ), stateCount[2], stateCountTotal))) {\r\n                const estimatedModuleSize: number /*float*/ = stateCountTotal / 7.0;\r\n                let found: boolean = false;\r\n                const possibleCenters = this.possibleCenters;\r\n                for (let index = 0, length = possibleCenters.length; index < length; index++) {\r\n                    const center: FinderPattern = possibleCenters[index];\r\n                    // Look for about the same center and module size:\r\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\r\n                        possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    const point: FinderPattern = new FinderPattern(centerJ, centerI, estimatedModuleSize);\r\n                    possibleCenters.push(point);\r\n                    if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\r\n                        this.resultPointCallback.foundPossibleResultPoint(point);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @return number of rows we could safely skip during scanning, based on the first\r\n     *         two finder patterns that have been located. In some cases their position will\r\n     *         allow us to infer that the third pattern must lie below a certain point farther\r\n     *         down in the image.\r\n     */\r\n    private findRowSkip(): number /*int*/ {\r\n        const max = this.possibleCenters.length;\r\n        if (max <= 1) {\r\n            return 0;\r\n        }\r\n        let firstConfirmedCenter: ResultPoint = null;\r\n        for (const center of this.possibleCenters) {\r\n            if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\r\n                if (firstConfirmedCenter == null) {\r\n                    firstConfirmedCenter = center;\r\n                } else {\r\n                    // We have two confirmed centers\r\n                    // How far down can we skip before resuming looking for the next\r\n                    // pattern? In the worst case, only the difference between the\r\n                    // difference in the x / y coordinates of the two centers.\r\n                    // This is the case where you find top left last.\r\n                    this.hasSkipped = true;\r\n                    return /*(int) */Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) -\r\n                        Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2);\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @return true iff we have found at least 3 finder patterns that have been detected\r\n     *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\r\n     *         candidates is \"pretty similar\"\r\n     */\r\n    private haveMultiplyConfirmedCenters(): boolean {\r\n        let confirmedCount = 0;\r\n        let totalModuleSize: number /*float*/ = 0.0;\r\n        const max = this.possibleCenters.length;\r\n        for (const pattern of this.possibleCenters) {\r\n            if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\r\n                confirmedCount++;\r\n                totalModuleSize += pattern.getEstimatedModuleSize();\r\n            }\r\n        }\r\n        if (confirmedCount < 3) {\r\n            return false;\r\n        }\r\n        // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\r\n        // and that we need to keep looking. We detect this by asking if the estimated module sizes\r\n        // vary too much. We arbitrarily say that when the total deviation from average exceeds\r\n        // 5% of the total module size estimates, it's too much.\r\n        const average: number /*float*/ = totalModuleSize / max;\r\n        let totalDeviation: number /*float*/ = 0.0;\r\n        for (const pattern of this.possibleCenters) {\r\n            totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\r\n        }\r\n        return totalDeviation <= 0.05 * totalModuleSize;\r\n    }\r\n\r\n    /**\r\n     * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\r\n     *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\r\n     *         size differs from the average among those patterns the least\r\n     * @throws NotFoundException if 3 such finder patterns do not exist\r\n     */\r\n    private selectBestPatterns(): FinderPattern[] /*throws NotFoundException */ {\r\n\r\n        const startSize = this.possibleCenters.length;\r\n        if (startSize < 3) {\r\n            // Couldn't find enough finder patterns\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n\r\n        const possibleCenters = this.possibleCenters;\r\n\r\n        let average: number; /*float*/\r\n        // Filter outlier possibilities whose module size is too different\r\n        if (startSize > 3) {\r\n            // But we can only afford to do so if we have at least 4 possibilities to choose from\r\n            let totalModuleSize: number /*float*/ = 0.0;\r\n            let square: number /*float*/ = 0.0;\r\n            for (const center of this.possibleCenters) {\r\n                const size: number /*float*/ = center.getEstimatedModuleSize();\r\n                totalModuleSize += size;\r\n                square += size * size;\r\n            }\r\n            average = totalModuleSize / startSize;\r\n            let stdDev: number /*float*/ = /*(float) */Math.sqrt(square / startSize - average * average);\r\n\r\n            possibleCenters.sort(\r\n                /**\r\n                 * <p>Orders by furthest from average</p>\r\n                 */\r\n                // FurthestFromAverageComparator implements Comparator<FinderPattern>\r\n                (center1: FinderPattern, center2: FinderPattern) => {\r\n                    const dA: number /*float*/ = Math.abs(center2.getEstimatedModuleSize() - average);\r\n                    const dB: number /*float*/ = Math.abs(center1.getEstimatedModuleSize() - average);\r\n                    return dA < dB ? -1 : dA > dB ? 1 : 0;\r\n                });\r\n\r\n            const limit: number /*float*/ = Math.max(0.2 * average, stdDev);\r\n\r\n            for (let i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\r\n                const pattern: FinderPattern = possibleCenters[i];\r\n                if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\r\n                    possibleCenters.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (possibleCenters.length > 3) {\r\n            // Throw away all but those first size candidate points we found.\r\n\r\n            let totalModuleSize: number /*float*/ = 0.0;\r\n            for (const possibleCenter of possibleCenters) {\r\n                totalModuleSize += possibleCenter.getEstimatedModuleSize();\r\n            }\r\n\r\n            average = totalModuleSize / possibleCenters.length;\r\n\r\n            possibleCenters.sort(\r\n                /**\r\n                 * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\r\n                 */\r\n                // CenterComparator implements Comparator<FinderPattern>\r\n                (center1: FinderPattern, center2: FinderPattern) => {\r\n                    if (center2.getCount() === center1.getCount()) {\r\n                        const dA: number /*float*/ = Math.abs(center2.getEstimatedModuleSize() - average);\r\n                        const dB: number /*float*/ = Math.abs(center1.getEstimatedModuleSize() - average);\r\n                        return dA < dB ? 1 : dA > dB ? -1 : 0;\r\n                    } else {\r\n                        return center2.getCount() - center1.getCount();\r\n                    }\r\n                });\r\n\r\n            possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\r\n        }\r\n\r\n        return [\r\n            possibleCenters[0],\r\n            possibleCenters[1],\r\n            possibleCenters[2]\r\n        ];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/FinderPatternFinder.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport ResultPoint from './../../ResultPoint';\r\n\r\n/**\r\n * <p>Encapsulates a finder pattern, which are the three square patterns found in\r\n * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\r\n * as a convenience to the finder's bookkeeping.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class FinderPattern extends ResultPoint {\r\n\r\n    // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\r\n    //   this(posX, posY, estimatedModuleSize, 1)\r\n    // }\r\n\r\n    public constructor(posX: number/*float*/, posY: number/*float*/, private estimatedModuleSize: number/*float*/, private count?: number /*int*/) {\r\n        super(posX, posY);\r\n        if (undefined === count) {\r\n            this.count = 1;\r\n        }\r\n    }\r\n\r\n    public getEstimatedModuleSize(): number/*float*/ {\r\n        return this.estimatedModuleSize;\r\n    }\r\n\r\n    public getCount(): number /*int*/ {\r\n        return this.count;\r\n    }\r\n\r\n    /*\r\n    void incrementCount() {\r\n      this.count++\r\n    }\r\n     */\r\n\r\n    /**\r\n     * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\r\n     * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\r\n     */\r\n    public aboutEquals(moduleSize: number/*float*/, i: number/*float*/, j: number/*float*/): boolean {\r\n        if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\r\n            const moduleSizeDiff: number /*float*/ = Math.abs(moduleSize - this.estimatedModuleSize);\r\n            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Combines this object's current estimate of a finder pattern position and module size\r\n     * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\r\n     * based on count.\r\n     */\r\n    public combineEstimate(i: number/*float*/, j: number/*float*/, newModuleSize: number/*float*/): FinderPattern {\r\n        const combinedCount = this.count + 1;\r\n        const combinedX: number /*float*/ = (this.count * this.getX() + j) / combinedCount;\r\n        const combinedY: number /*float*/ = (this.count * this.getY() + i) / combinedCount;\r\n        const combinedModuleSize: number /*float*/ = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\r\n        return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/FinderPattern.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport FinderPattern from './FinderPattern';\r\n\r\n/**\r\n * <p>Encapsulates information about finder patterns in an image, including the location of\r\n * the three finder patterns, and their estimated module size.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class FinderPatternInfo {\r\n\r\n    private bottomLeft: FinderPattern;\r\n    private topLeft: FinderPattern;\r\n    private topRight: FinderPattern;\r\n\r\n    public constructor(patternCenters: FinderPattern[]) {\r\n        this.bottomLeft = patternCenters[0];\r\n        this.topLeft = patternCenters[1];\r\n        this.topRight = patternCenters[2];\r\n    }\r\n\r\n    public getBottomLeft(): FinderPattern {\r\n        return this.bottomLeft;\r\n    }\r\n\r\n    public getTopLeft(): FinderPattern {\r\n        return this.topLeft;\r\n    }\r\n\r\n    public getTopRight(): FinderPattern {\r\n        return this.topRight;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/FinderPatternInfo.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport ResultPointCallback from './../../ResultPointCallback';\r\nimport BitMatrix from './../../common/BitMatrix';\r\nimport AlignmentPattern from './AlignmentPattern';\r\nimport Exception from './../../Exception';\r\n\r\n/*import java.util.ArrayList;*/\r\n/*import java.util.List;*/\r\n\r\n/**\r\n * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder\r\n * patterns but are smaller and appear at regular intervals throughout the image.</p>\r\n *\r\n * <p>At the moment this only looks for the bottom-right alignment pattern.</p>\r\n *\r\n * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,\r\n * pasted and stripped down here for maximum performance but does unfortunately duplicate\r\n * some code.</p>\r\n *\r\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class AlignmentPatternFinder {\r\n\r\n    private possibleCenters: AlignmentPattern[];\r\n    private crossCheckStateCount: Int32Array;\r\n\r\n    /**\r\n     * <p>Creates a finder that will look in a portion of the whole image.</p>\r\n     *\r\n     * @param image image to search\r\n     * @param startX left column from which to start searching\r\n     * @param startY top row from which to start searching\r\n     * @param width width of region to search\r\n     * @param height height of region to search\r\n     * @param moduleSize estimated module size so far\r\n     */\r\n    public constructor(private image: BitMatrix,\r\n        private startX: number /*int*/,\r\n        private startY: number /*int*/,\r\n        private width: number /*int*/,\r\n        private height: number /*int*/,\r\n        private moduleSize: number/*float*/,\r\n        private resultPointCallback: ResultPointCallback) {\r\n        this.possibleCenters = []; // new Array<any>(5))\r\n        // TYPESCRIPTPORT: array initialization without size as the length is checked below\r\n        this.crossCheckStateCount = new Int32Array(3);\r\n    }\r\n\r\n    /**\r\n     * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since\r\n     * it's pretty performance-critical and so is written to be fast foremost.</p>\r\n     *\r\n     * @return {@link AlignmentPattern} if found\r\n     * @throws NotFoundException if not found\r\n     */\r\n    public find(): AlignmentPattern /*throws NotFoundException*/ {\r\n        const startX = this.startX;\r\n        const height = this.height;\r\n        const width = this.width;\r\n        const maxJ = startX + width;\r\n        const middleI = this.startY + (height / 2);\r\n        // We are looking for black/white/black modules in 1:1:1 ratio\r\n        // this tracks the number of black/white/black modules seen so far\r\n        const stateCount = new Int32Array(3);\r\n        const image = this.image;\r\n        for (let iGen = 0; iGen < height; iGen++) {\r\n            // Search from middle outwards\r\n            const i = middleI + ((iGen & 0x01) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));\r\n\r\n            stateCount[0] = 0;\r\n            stateCount[1] = 0;\r\n            stateCount[2] = 0;\r\n\r\n            let j = startX;\r\n            // Burn off leading white pixels before anything else; if we start in the middle of\r\n            // a white run, it doesn't make sense to count its length, since we don't know if the\r\n            // white run continued to the left of the start point\r\n            while (j < maxJ && !image.get(j, i)) {\r\n                j++;\r\n            }\r\n            let currentState = 0;\r\n            while (j < maxJ) {\r\n                if (image.get(j, i)) {\r\n                    // Black pixel\r\n                    if (currentState === 1) { // Counting black pixels\r\n                        stateCount[1]++;\r\n                    } else { // Counting white pixels\r\n                        if (currentState === 2) { // A winner?\r\n                            if (this.foundPatternCross(stateCount)) { // Yes\r\n                                const confirmed = this.handlePossibleCenter(stateCount, i, j);\r\n                                if (confirmed !== null) {\r\n                                    return confirmed;\r\n                                }\r\n                            }\r\n                            stateCount[0] = stateCount[2];\r\n                            stateCount[1] = 1;\r\n                            stateCount[2] = 0;\r\n                            currentState = 1;\r\n                        } else {\r\n                            stateCount[++currentState]++;\r\n                        }\r\n                    }\r\n                } else { // White pixel\r\n                    if (currentState === 1) { // Counting black pixels\r\n                        currentState++;\r\n                    }\r\n                    stateCount[currentState]++;\r\n                }\r\n                j++;\r\n            }\r\n            if (this.foundPatternCross(stateCount)) {\r\n                const confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\r\n                if (confirmed !== null) {\r\n                    return confirmed;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Hmm, nothing we saw was observed and confirmed twice. If we had\r\n        // any guess at all, return it.\r\n        if (this.possibleCenters.length !== 0) {\r\n            return this.possibleCenters[0];\r\n        }\r\n\r\n        throw new Exception(Exception.NotFoundException);\r\n    }\r\n\r\n    /**\r\n     * Given a count of black/white/black pixels just seen and an end position,\r\n     * figures the location of the center of this black/white/black run.\r\n     */\r\n    private static centerFromEnd(stateCount: Int32Array, end: number /*int*/): number/*float*/ {\r\n        return (end - stateCount[2]) - stateCount[1] / 2.0;\r\n    }\r\n\r\n    /**\r\n     * @param stateCount count of black/white/black pixels just read\r\n     * @return true iff the proportions of the counts is close enough to the 1/1/1 ratios\r\n     *         used by alignment patterns to be considered a match\r\n     */\r\n    private foundPatternCross(stateCount: Int32Array): boolean {\r\n        const moduleSize: number /*float*/ = this.moduleSize;\r\n        const maxVariance: number /*float*/ = moduleSize / 2.0;\r\n        for (let i = 0; i < 3; i++) {\r\n            if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * <p>After a horizontal scan finds a potential alignment pattern, this method\r\n     * \"cross-checks\" by scanning down vertically through the center of the possible\r\n     * alignment pattern to see if the same proportion is detected.</p>\r\n     *\r\n     * @param startI row where an alignment pattern was detected\r\n     * @param centerJ center of the section that appears to cross an alignment pattern\r\n     * @param maxCount maximum reasonable number of modules that should be\r\n     * observed in any reading state, based on the results of the horizontal scan\r\n     * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\r\n     */\r\n    private crossCheckVertical(startI: number /*int*/, centerJ: number /*int*/, maxCount: number /*int*/,\r\n        originalStateCountTotal: number /*int*/): number/*float*/ {\r\n        const image = this.image;\r\n\r\n        const maxI = image.getHeight();\r\n        const stateCount = this.crossCheckStateCount;\r\n        stateCount[0] = 0;\r\n        stateCount[1] = 0;\r\n        stateCount[2] = 0;\r\n\r\n        // Start counting up from center\r\n        let i = startI;\r\n        while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\r\n            stateCount[1]++;\r\n            i--;\r\n        }\r\n        // If already too many modules in this state or ran off the edge:\r\n        if (i < 0 || stateCount[1] > maxCount) {\r\n            return NaN;\r\n        }\r\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\r\n            stateCount[0]++;\r\n            i--;\r\n        }\r\n        if (stateCount[0] > maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        // Now also count down from center\r\n        i = startI + 1;\r\n        while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\r\n            stateCount[1]++;\r\n            i++;\r\n        }\r\n        if (i === maxI || stateCount[1] > maxCount) {\r\n            return NaN;\r\n        }\r\n        while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\r\n            stateCount[2]++;\r\n            i++;\r\n        }\r\n        if (stateCount[2] > maxCount) {\r\n            return NaN;\r\n        }\r\n\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\r\n            return NaN;\r\n        }\r\n\r\n        return this.foundPatternCross(stateCount) ? AlignmentPatternFinder.centerFromEnd(stateCount, i) : NaN;\r\n    }\r\n\r\n    /**\r\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\r\n     * cross check with a vertical scan, and if successful, will see if this pattern had been\r\n     * found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\r\n     * found the alignment pattern.</p>\r\n     *\r\n     * @param stateCount reading state module counts from horizontal scan\r\n     * @param i row where alignment pattern may be found\r\n     * @param j end of possible alignment pattern in row\r\n     * @return {@link AlignmentPattern} if we have found the same pattern twice, or null if not\r\n     */\r\n    private handlePossibleCenter(stateCount: Int32Array, i: number /*int*/, j: number /*int*/): AlignmentPattern {\r\n        const stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n        const centerJ: number /*float*/ = AlignmentPatternFinder.centerFromEnd(stateCount, j);\r\n        const centerI: number /*float*/ = this.crossCheckVertical(i, /*(int) */centerJ, 2 * stateCount[1], stateCountTotal);\r\n        if (!isNaN(centerI)) {\r\n            const estimatedModuleSize: number /*float*/ = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\r\n            for (const center of this.possibleCenters) {\r\n                // Look for about the same center and module size:\r\n                if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\r\n                    return center.combineEstimate(centerI, centerJ, estimatedModuleSize);\r\n                }\r\n            }\r\n            // Hadn't found this before; save it\r\n            const point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\r\n            this.possibleCenters.push(point);\r\n            if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\r\n                this.resultPointCallback.foundPossibleResultPoint(point);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/AlignmentPatternFinder.ts","/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.detector {*/\r\n\r\nimport ResultPoint from './../../ResultPoint';\r\n\r\n/**\r\n * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in\r\n * all but the simplest QR Codes.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nexport default class AlignmentPattern extends ResultPoint {\r\n\r\n    public constructor(posX: number/*float*/, posY: number/*float*/, private estimatedModuleSize: number/*float*/) {\r\n        super(posX, posY);\r\n    }\r\n\r\n    /**\r\n     * <p>Determines if this alignment pattern \"about equals\" an alignment pattern at the stated\r\n     * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\r\n     */\r\n    public aboutEquals(moduleSize: number/*float*/, i: number/*float*/, j: number/*float*/): boolean {\r\n        if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\r\n            const moduleSizeDiff: number /*float*/ = Math.abs(moduleSize - this.estimatedModuleSize);\r\n            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Combines this object's current estimate of a finder pattern position and module size\r\n     * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.\r\n     */\r\n    public combineEstimate(i: number/*float*/, j: number/*float*/, newModuleSize: number/*float*/): AlignmentPattern {\r\n        const combinedX: number /*float*/ = (this.getX() + j) / 2.0;\r\n        const combinedY: number /*float*/ = (this.getY() + i) / 2.0;\r\n        const combinedModuleSize: number /*float*/ = (this.estimatedModuleSize + newModuleSize) / 2.0;\r\n        return new AlignmentPattern(combinedX, combinedY, combinedModuleSize);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/detector/AlignmentPattern.ts","import Exception from '../core/Exception';\r\nimport EncodeHintType from '../core/EncodeHintType';\r\nimport Encoder from '../core/qrcode/encoder/Encoder';\r\nimport QRCode from '../core/qrcode/encoder/QRCode';\r\nimport ErrorCorrectionLevel from '../core/qrcode/decoder/ErrorCorrectionLevel';\r\n\r\nclass BrowserQRCodeSvgWriter {\r\n    private static readonly QUIET_ZONE_SIZE = 4;\r\n    private static readonly SVG_NS = 'http://www.w3.org/2000/svg';\r\n\r\n    private containerElement: HTMLElement;\r\n\r\n    public constructor(containerElement: string | HTMLElement) {\r\n        if (typeof containerElement === 'string') {\r\n            this.containerElement = document.getElementById(containerElement);\r\n        } else {\r\n            this.containerElement = containerElement;\r\n        }\r\n    }\r\n\r\n    public write(contents: string,\r\n        width: number,\r\n        height: number,\r\n        hints: Map<EncodeHintType, any> = null): SVGSVGElement {\r\n\r\n        if (contents.length === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Found empty contents');\r\n        }\r\n\r\n        // if (format != BarcodeFormat.QR_CODE) {\r\n        //   throw new Exception(Exception.IllegalArgumentException, \"Can only encode QR_CODE, but got \" + format)\r\n        // }\r\n\r\n        if (width < 0 || height < 0) {\r\n            throw new Exception('IllegalArgumentException', 'Requested dimensions are too small: ' + width + 'x' +\r\n                height);\r\n        }\r\n\r\n        let errorCorrectionLevel = ErrorCorrectionLevel.L;\r\n        let quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\r\n        if (hints !== null) {\r\n            if (undefined !== hints.get(EncodeHintType.ERROR_CORRECTION)) {\r\n                errorCorrectionLevel = ErrorCorrectionLevel.fromString(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\r\n            }\r\n            if (undefined !== hints.get(EncodeHintType.MARGIN)) {\r\n                quietZone = Number.parseInt(hints.get(EncodeHintType.MARGIN).toString(), 10);\r\n            }\r\n        }\r\n\r\n        const code = Encoder.encode(contents, errorCorrectionLevel, hints);\r\n        return this.renderResult(code, width, height, quietZone);\r\n    }\r\n\r\n    // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\r\n    // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\r\n    private renderResult(code: QRCode, width: number /*int*/, height: number /*int*/, quietZone: number /*int*/): SVGSVGElement {\r\n        const input = code.getMatrix();\r\n        if (input === null) {\r\n            throw new Exception(Exception.IllegalStateException);\r\n        }\r\n        const inputWidth = input.getWidth();\r\n        const inputHeight = input.getHeight();\r\n        const qrWidth = inputWidth + (quietZone * 2);\r\n        const qrHeight = inputHeight + (quietZone * 2);\r\n        const outputWidth = Math.max(width, qrWidth);\r\n        const outputHeight = Math.max(height, qrHeight);\r\n\r\n        const multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\r\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\r\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\r\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\r\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\r\n        const leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\r\n        const topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\r\n\r\n        const svgElement = this.createSVGElement(outputWidth, outputHeight);\r\n        this.containerElement.appendChild(svgElement);\r\n        for (let inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++ , outputY += multiple) {\r\n            // Write the contents of this row of the barcode\r\n            for (let inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++ , outputX += multiple) {\r\n                if (input.get(inputX, inputY) === 1) {\r\n                    const svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\r\n                    svgElement.appendChild(svgRectElement);\r\n                }\r\n            }\r\n        }\r\n\r\n        return svgElement;\r\n    }\r\n\r\n    private createSVGElement(w: number, h: number): SVGSVGElement {\r\n        const svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\r\n        svgElement.setAttributeNS(null, 'height', w.toString());\r\n        svgElement.setAttributeNS(null, 'width', h.toString());\r\n        return svgElement;\r\n    }\r\n\r\n    private createSvgRectElement(x: number, y: number, w: number, h: number): SVGRectElement {\r\n        const rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\r\n        rect.setAttributeNS(null, 'x', x.toString());\r\n        rect.setAttributeNS(null, 'y', y.toString());\r\n        rect.setAttributeNS(null, 'height', w.toString());\r\n        rect.setAttributeNS(null, 'width', h.toString());\r\n        rect.setAttributeNS(null, 'fill', '#000000');\r\n        return rect;\r\n    }\r\n}\r\n\r\nexport { BrowserQRCodeSvgWriter };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/browser/BrowserQRCodeSvgWriter.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\n/*import java.util.Arrays;*/\r\n\r\nimport Arrays from './../../util/Arrays';\r\nimport StringBuilder from './../../util/StringBuilder';\r\n\r\n/**\r\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\r\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class ByteMatrix {\r\n\r\n    private bytes: Array<Uint8Array>;\r\n\r\n    public constructor(private width: number /*int*/, private height: number /*int*/) {\r\n        const bytes = new Array<Uint8Array>(height); // [height][width]\r\n        for (let i = 0; i !== height; i++) {\r\n            bytes[i] = new Uint8Array(width);\r\n        }\r\n        this.bytes = bytes;\r\n    }\r\n\r\n    public getHeight(): number /*int*/ {\r\n        return this.height;\r\n    }\r\n\r\n    public getWidth(): number /*int*/ {\r\n        return this.width;\r\n    }\r\n\r\n    public get(x: number /*int*/, y: number /*int*/): number/*byte*/ {\r\n        return this.bytes[y][x];\r\n    }\r\n\r\n    /**\r\n     * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\r\n     */\r\n    public getArray(): Array<Uint8Array> {\r\n        return this.bytes;\r\n    }\r\n\r\n    // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\r\n    public setNumber(x: number /*int*/, y: number /*int*/, value: number/*byte|int*/): void {\r\n        this.bytes[y][x] = value;\r\n    }\r\n\r\n    // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\r\n    //   bytes[y][x] = (byte) value\r\n    // }\r\n\r\n    public setBoolean(x: number /*int*/, y: number /*int*/, value: boolean): void {\r\n        this.bytes[y][x] = /*(byte) */(value ? 1 : 0);\r\n    }\r\n\r\n    public clear(value: number/*byte*/): void {\r\n        for (const aByte of this.bytes) {\r\n            Arrays.fillUint8Array(aByte, value);\r\n        }\r\n    }\r\n\r\n    public equals(o: any) {\r\n        if (!(o instanceof ByteMatrix)) {\r\n            return false;\r\n        }\r\n        const other = <ByteMatrix>o;\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n        for (let y = 0, height = this.height; y < height; ++y) {\r\n            const bytesY = this.bytes[y];\r\n            const otherBytesY = other.bytes[y];\r\n            for (let x = 0, width = this.width; x < width; ++x) {\r\n                if (bytesY[x] !== otherBytesY[x]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*@Override*/\r\n    public toString(): string {\r\n        const result = new StringBuilder(); // (2 * width * height + 2)\r\n        for (let y = 0, height = this.height; y < height; ++y) {\r\n            const bytesY = this.bytes[y];\r\n            for (let x = 0, width = this.width; x < width; ++x) {\r\n                switch (bytesY[x]) {\r\n                    case 0:\r\n                        result.append(' 0');\r\n                        break;\r\n                    case 1:\r\n                        result.append(' 1');\r\n                        break;\r\n                    default:\r\n                        result.append('  ');\r\n                        break;\r\n                }\r\n            }\r\n            result.append('\\n');\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/ByteMatrix.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\nimport BitArray from './../../common/BitArray';\r\nimport ErrorCorrectionLevel from './../decoder/ErrorCorrectionLevel';\r\nimport Version from './../decoder/Version';\r\nimport ByteMatrix from './ByteMatrix';\r\nimport Exception from './../../Exception';\r\nimport Integer from './../../util/Integer';\r\nimport QRCode from './QRCode';\r\nimport MaskUtil from './MaskUtil';\r\n\r\n/**\r\n * @author satorux@google.com (Satoru Takabayashi) - creator\r\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\r\n */\r\nexport default class MatrixUtil {\r\n\r\n    private constructor() {\r\n        // do nothing\r\n    }\r\n\r\n    private static POSITION_DETECTION_PATTERN: Array<Int32Array> = Array.from([\r\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\r\n    ]);\r\n\r\n    private static POSITION_ADJUSTMENT_PATTERN: Array<Int32Array> = Array.from([\r\n        Int32Array.from([1, 1, 1, 1, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 0, 1, 0, 1]),\r\n        Int32Array.from([1, 0, 0, 0, 1]),\r\n        Int32Array.from([1, 1, 1, 1, 1]),\r\n    ]);\r\n\r\n    // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\r\n    private static POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE: Array<Int32Array> = Array.from([\r\n        Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),  // Version 1\r\n        Int32Array.from([6, 18, -1, -1, -1, -1, -1]),  // Version 2\r\n        Int32Array.from([6, 22, -1, -1, -1, -1, -1]),  // Version 3\r\n        Int32Array.from([6, 26, -1, -1, -1, -1, -1]),  // Version 4\r\n        Int32Array.from([6, 30, -1, -1, -1, -1, -1]),  // Version 5\r\n        Int32Array.from([6, 34, -1, -1, -1, -1, -1]),  // Version 6\r\n        Int32Array.from([6, 22, 38, -1, -1, -1, -1]),  // Version 7\r\n        Int32Array.from([6, 24, 42, -1, -1, -1, -1]),  // Version 8\r\n        Int32Array.from([6, 26, 46, -1, -1, -1, -1]),  // Version 9\r\n        Int32Array.from([6, 28, 50, -1, -1, -1, -1]),  // Version 10\r\n        Int32Array.from([6, 30, 54, -1, -1, -1, -1]),  // Version 11\r\n        Int32Array.from([6, 32, 58, -1, -1, -1, -1]),  // Version 12\r\n        Int32Array.from([6, 34, 62, -1, -1, -1, -1]),  // Version 13\r\n        Int32Array.from([6, 26, 46, 66, -1, -1, -1]),  // Version 14\r\n        Int32Array.from([6, 26, 48, 70, -1, -1, -1]),  // Version 15\r\n        Int32Array.from([6, 26, 50, 74, -1, -1, -1]),  // Version 16\r\n        Int32Array.from([6, 30, 54, 78, -1, -1, -1]),  // Version 17\r\n        Int32Array.from([6, 30, 56, 82, -1, -1, -1]),  // Version 18\r\n        Int32Array.from([6, 30, 58, 86, -1, -1, -1]),  // Version 19\r\n        Int32Array.from([6, 34, 62, 90, -1, -1, -1]),  // Version 20\r\n        Int32Array.from([6, 28, 50, 72, 94, -1, -1]),  // Version 21\r\n        Int32Array.from([6, 26, 50, 74, 98, -1, -1]),  // Version 22\r\n        Int32Array.from([6, 30, 54, 78, 102, -1, -1]),  // Version 23\r\n        Int32Array.from([6, 28, 54, 80, 106, -1, -1]),  // Version 24\r\n        Int32Array.from([6, 32, 58, 84, 110, -1, -1]),  // Version 25\r\n        Int32Array.from([6, 30, 58, 86, 114, -1, -1]),  // Version 26\r\n        Int32Array.from([6, 34, 62, 90, 118, -1, -1]),  // Version 27\r\n        Int32Array.from([6, 26, 50, 74, 98, 122, -1]),  // Version 28\r\n        Int32Array.from([6, 30, 54, 78, 102, 126, -1]),  // Version 29\r\n        Int32Array.from([6, 26, 52, 78, 104, 130, -1]),  // Version 30\r\n        Int32Array.from([6, 30, 56, 82, 108, 134, -1]),  // Version 31\r\n        Int32Array.from([6, 34, 60, 86, 112, 138, -1]),  // Version 32\r\n        Int32Array.from([6, 30, 58, 86, 114, 142, -1]),  // Version 33\r\n        Int32Array.from([6, 34, 62, 90, 118, 146, -1]),  // Version 34\r\n        Int32Array.from([6, 30, 54, 78, 102, 126, 150]),  // Version 35\r\n        Int32Array.from([6, 24, 50, 76, 102, 128, 154]),  // Version 36\r\n        Int32Array.from([6, 28, 54, 80, 106, 132, 158]),  // Version 37\r\n        Int32Array.from([6, 32, 58, 84, 110, 136, 162]),  // Version 38\r\n        Int32Array.from([6, 26, 54, 82, 110, 138, 166]),  // Version 39\r\n        Int32Array.from([6, 30, 58, 86, 114, 142, 170]),  // Version 40\r\n    ]);\r\n\r\n    // Type info cells at the left top corner.\r\n    private static TYPE_INFO_COORDINATES: Array<Int32Array> = Array.from([\r\n        Int32Array.from([8, 0]),\r\n        Int32Array.from([8, 1]),\r\n        Int32Array.from([8, 2]),\r\n        Int32Array.from([8, 3]),\r\n        Int32Array.from([8, 4]),\r\n        Int32Array.from([8, 5]),\r\n        Int32Array.from([8, 7]),\r\n        Int32Array.from([8, 8]),\r\n        Int32Array.from([7, 8]),\r\n        Int32Array.from([5, 8]),\r\n        Int32Array.from([4, 8]),\r\n        Int32Array.from([3, 8]),\r\n        Int32Array.from([2, 8]),\r\n        Int32Array.from([1, 8]),\r\n        Int32Array.from([0, 8]),\r\n    ]);\r\n\r\n    // From Appendix D in JISX0510:2004 (p. 67)\r\n    private static VERSION_INFO_POLY = 0x1f25;  // 1 1111 0010 0101\r\n\r\n    // From Appendix C in JISX0510:2004 (p.65).\r\n    private static TYPE_INFO_POLY = 0x537;\r\n    private static TYPE_INFO_MASK_PATTERN = 0x5412;\r\n\r\n    // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\r\n    //\r\n    // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\r\n    // with the ByteMatrix initialized all to zero.\r\n    public static clearMatrix(matrix: ByteMatrix): void {\r\n        // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\r\n        matrix.clear(/*(byte) *//*-1*/255);\r\n    }\r\n\r\n    // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\r\n    // success, store the result in \"matrix\" and return true.\r\n    public static buildMatrix(dataBits: BitArray,\r\n        ecLevel: ErrorCorrectionLevel,\r\n        version: Version,\r\n        maskPattern: number /*int*/,\r\n        matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        MatrixUtil.clearMatrix(matrix);\r\n        MatrixUtil.embedBasicPatterns(version, matrix);\r\n        // Type information appear with any version.\r\n        MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\r\n        // Version info appear if version >= 7.\r\n        MatrixUtil.maybeEmbedVersionInfo(version, matrix);\r\n        // Data should be embedded at end.\r\n        MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\r\n    }\r\n\r\n    // Embed basic patterns. On success, modify the matrix and return true.\r\n    // The basic patterns are:\r\n    // - Position detection patterns\r\n    // - Timing patterns\r\n    // - Dark dot at the left bottom corner\r\n    // - Position adjustment patterns, if need be\r\n    public static embedBasicPatterns(version: Version, matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        // Let's get started with embedding big squares at corners.\r\n        MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\r\n        // Then, embed the dark dot at the left bottom corner.\r\n        MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\r\n\r\n        // Position adjustment patterns appear if version >= 2.\r\n        MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\r\n        // Timing patterns should be embedded after position adj. patterns.\r\n        MatrixUtil.embedTimingPatterns(matrix);\r\n    }\r\n\r\n    // Embed type information. On success, modify the matrix.\r\n    public static embedTypeInfo(ecLevel: ErrorCorrectionLevel, maskPattern: number /*int*/, matrix: ByteMatrix): void {\r\n        const typeInfoBits: BitArray = new BitArray();\r\n        MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\r\n\r\n        for (let i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\r\n            // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\r\n            // \"typeInfoBits\".\r\n            const bit: boolean = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\r\n\r\n            // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\r\n            const coordinates: Int32Array = MatrixUtil.TYPE_INFO_COORDINATES[i];\r\n            const x1 = coordinates[0];\r\n            const y1 = coordinates[1];\r\n            matrix.setBoolean(x1, y1, bit);\r\n\r\n            if (i < 8) {\r\n                // Right top corner.\r\n                const x2 = matrix.getWidth() - i - 1;\r\n                const y2 = 8;\r\n                matrix.setBoolean(x2, y2, bit);\r\n            } else {\r\n                // Left bottom corner.\r\n                const x2 = 8;\r\n                const y2 = matrix.getHeight() - 7 + (i - 8);\r\n                matrix.setBoolean(x2, y2, bit);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Embed version information if need be. On success, modify the matrix and return true.\r\n    // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\r\n    public static maybeEmbedVersionInfo(version: Version, matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        if (version.getVersionNumber() < 7) {  // Version info is necessary if version >= 7.\r\n            return;  // Don't need version info.\r\n        }\r\n        const versionInfoBits = new BitArray();\r\n        MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\r\n\r\n        let bitIndex = 6 * 3 - 1;  // It will decrease from 17 to 0.\r\n        for (let i = 0; i < 6; ++i) {\r\n            for (let j = 0; j < 3; ++j) {\r\n                // Place bits in LSB (least significant bit) to MSB order.\r\n                const bit: boolean = versionInfoBits.get(bitIndex);\r\n                bitIndex--;\r\n                // Left bottom corner.\r\n                matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\r\n                // Right bottom corner.\r\n                matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\r\n    // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\r\n    // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\r\n    public static embedDataBits(dataBits: BitArray, maskPattern: number /*int*/, matrix: ByteMatrix): void {\r\n        let bitIndex = 0;\r\n        let direction = -1;\r\n        // Start from the right bottom cell.\r\n        let x = matrix.getWidth() - 1;\r\n        let y = matrix.getHeight() - 1;\r\n        while (x > 0) {\r\n            // Skip the vertical timing pattern.\r\n            if (x === 6) {\r\n                x -= 1;\r\n            }\r\n            while (y >= 0 && y < matrix.getHeight()) {\r\n                for (let i = 0; i < 2; ++i) {\r\n                    const xx = x - i;\r\n                    // Skip the cell if it's not empty.\r\n                    if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\r\n                        continue;\r\n                    }\r\n                    let bit: boolean;\r\n                    if (bitIndex < dataBits.getSize()) {\r\n                        bit = dataBits.get(bitIndex);\r\n                        ++bitIndex;\r\n                    } else {\r\n                        // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\r\n                        // in 8.4.9 of JISX0510:2004 (p. 24).\r\n                        bit = false;\r\n                    }\r\n\r\n                    // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\r\n                    if (maskPattern !== 255 && MaskUtil.getDataMaskBit(maskPattern, xx, y)) {\r\n                        bit = !bit;\r\n                    }\r\n                    matrix.setBoolean(xx, y, bit);\r\n                }\r\n                y += direction;\r\n            }\r\n            direction = -direction;  // Reverse the direction.\r\n            y += direction;\r\n            x -= 2;  // Move to the left.\r\n        }\r\n        // All bits should be consumed.\r\n        if (bitIndex !== dataBits.getSize()) {\r\n            throw new Exception(Exception.WriterException, 'Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\r\n        }\r\n    }\r\n\r\n    // Return the position of the most significant bit set (one: to) in the \"value\". The most\r\n    // significant bit is position 32. If there is no bit set, return 0. Examples:\r\n    // - findMSBSet(0) => 0\r\n    // - findMSBSet(1) => 1\r\n    // - findMSBSet(255) => 8\r\n    public static findMSBSet(value: number /*int*/): number /*int*/ {\r\n        return 32 - Integer.numberOfLeadingZeros(value);\r\n    }\r\n\r\n    // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\r\n    // code is used for encoding type information and version information.\r\n    // Example: Calculation of version information of 7.\r\n    // f(x) is created from 7.\r\n    //   - 7 = 000111 in 6 bits\r\n    //   - f(x) = x^2 + x^1 + x^0\r\n    // g(x) is given by the standard (p. 67)\r\n    //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\r\n    // Multiply f(x) by x^(18 - 6)\r\n    //   - f'(x) = f(x) * x^(18 - 6)\r\n    //   - f'(x) = x^14 + x^13 + x^12\r\n    // Calculate the remainder of f'(x) / g(x)\r\n    //         x^2\r\n    //         __________________________________________________\r\n    //   g(x) )x^14 + x^13 + x^12\r\n    //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\r\n    //         --------------------------------------------------\r\n    //                              x^11 + x^10 + x^7 + x^4 + x^2\r\n    //\r\n    // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\r\n    // Encode it in binary: 110010010100\r\n    // The return value is 0xc94 (1100 1001 0100)\r\n    //\r\n    // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\r\n    // operations. We don't care if coefficients are positive or negative.\r\n    public static calculateBCHCode(value: number /*int*/, poly: number /*int*/): number /*int*/ {\r\n        if (poly === 0) {\r\n            throw new Exception(Exception.IllegalArgumentException, '0 polynomial');\r\n        }\r\n        // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\r\n        // from 13 to make it 12.\r\n        const msbSetInPoly = MatrixUtil.findMSBSet(poly);\r\n        value <<= msbSetInPoly - 1;\r\n        // Do the division business using exclusive-or operations.\r\n        while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\r\n            value ^= poly << (MatrixUtil.findMSBSet(value) - msbSetInPoly);\r\n        }\r\n        // Now the \"value\" is the remainder (i.e. the BCH code)\r\n        return value;\r\n    }\r\n\r\n    // Make bit vector of type information. On success, store the result in \"bits\" and return true.\r\n    // Encode error correction level and mask pattern. See 8.9 of\r\n    // JISX0510:2004 (p.45) for details.\r\n    public static makeTypeInfoBits(ecLevel: ErrorCorrectionLevel, maskPattern: number /*int*/, bits: BitArray): void {\r\n        if (!QRCode.isValidMaskPattern(maskPattern)) {\r\n            throw new Exception(Exception.WriterException, 'Invalid mask pattern');\r\n        }\r\n        const typeInfo = (ecLevel.getBits() << 3) | maskPattern;\r\n        bits.appendBits(typeInfo, 5);\r\n\r\n        const bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\r\n        bits.appendBits(bchCode, 10);\r\n\r\n        const maskBits = new BitArray();\r\n        maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\r\n        bits.xor(maskBits);\r\n\r\n        if (bits.getSize() !== 15) {  // Just in case.\r\n            throw new Exception(Exception.WriterException, 'should not happen but we got: ' + bits.getSize());\r\n        }\r\n    }\r\n\r\n    // Make bit vector of version information. On success, store the result in \"bits\" and return true.\r\n    // See 8.10 of JISX0510:2004 (p.45) for details.\r\n    public static makeVersionInfoBits(version: Version, bits: BitArray): void /*throws WriterException*/ {\r\n        bits.appendBits(version.getVersionNumber(), 6);\r\n        const bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\r\n        bits.appendBits(bchCode, 12);\r\n\r\n        if (bits.getSize() !== 18) {  // Just in case.\r\n            throw new Exception(Exception.WriterException, 'should not happen but we got: ' + bits.getSize());\r\n        }\r\n    }\r\n\r\n    // Check if \"value\" is empty.\r\n    private static isEmpty(value: number /*int*/): boolean {\r\n        return value === 255; // -1\r\n    }\r\n\r\n    private static embedTimingPatterns(matrix: ByteMatrix): void {\r\n        // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\r\n        // separation patterns (1: size). Thus, 8 = 7 + 1.\r\n        for (let i = 8; i < matrix.getWidth() - 8; ++i) {\r\n            const bit = (i + 1) % 2;\r\n            // Horizontal line.\r\n            if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\r\n                matrix.setNumber(i, 6, bit);\r\n            }\r\n            // Vertical line.\r\n            if (MatrixUtil.isEmpty(matrix.get(6, i))) {\r\n                matrix.setNumber(6, i, bit);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\r\n    private static embedDarkDotAtLeftBottomCorner(matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        if (matrix.get(8, matrix.getHeight() - 8) === 0) {\r\n            throw new Exception(Exception.WriterException);\r\n        }\r\n        matrix.setNumber(8, matrix.getHeight() - 8, 1);\r\n    }\r\n\r\n    private static embedHorizontalSeparationPattern(xStart: number /*int*/,\r\n        yStart: number /*int*/,\r\n        matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        for (let x = 0; x < 8; ++x) {\r\n            if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\r\n                throw new Exception(Exception.WriterException);\r\n            }\r\n            matrix.setNumber(xStart + x, yStart, 0);\r\n        }\r\n    }\r\n\r\n    private static embedVerticalSeparationPattern(xStart: number /*int*/,\r\n        yStart: number /*int*/,\r\n        matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        for (let y = 0; y < 7; ++y) {\r\n            if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\r\n                throw new Exception(Exception.WriterException);\r\n            }\r\n            matrix.setNumber(xStart, yStart + y, 0);\r\n        }\r\n    }\r\n\r\n    private static embedPositionAdjustmentPattern(xStart: number /*int*/, yStart: number /*int*/, matrix: ByteMatrix): void {\r\n        for (let y = 0; y < 5; ++y) {\r\n            const patternY: Int32Array = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\r\n            for (let x = 0; x < 5; ++x) {\r\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static embedPositionDetectionPattern(xStart: number /*int*/, yStart: number /*int*/, matrix: ByteMatrix): void {\r\n        for (let y = 0; y < 7; ++y) {\r\n            const patternY: Int32Array = MatrixUtil.POSITION_DETECTION_PATTERN[y];\r\n            for (let x = 0; x < 7; ++x) {\r\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Embed position detection patterns and surrounding vertical/horizontal separators.\r\n    private static embedPositionDetectionPatternsAndSeparators(matrix: ByteMatrix): void /*throws WriterException*/ {\r\n        // Embed three big squares at corners.\r\n        const pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\r\n        // Left top corner.\r\n        MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\r\n\r\n        // Embed horizontal separation patterns around the squares.\r\n        const hspWidth = 8;\r\n        // Left top corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth,\r\n            hspWidth - 1, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\r\n\r\n        // Embed vertical separation patterns around the squares.\r\n        const vspSize = 7;\r\n        // Left top corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\r\n        // Right top corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\r\n        // Left bottom corner.\r\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize,\r\n            matrix);\r\n    }\r\n\r\n    // Embed position adjustment patterns if need be.\r\n    private static maybeEmbedPositionAdjustmentPatterns(version: Version, matrix: ByteMatrix): void {\r\n        if (version.getVersionNumber() < 2) {  // The patterns appear if version >= 2\r\n            return;\r\n        }\r\n        const index = version.getVersionNumber() - 1;\r\n        const coordinates: Int32Array = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\r\n        for (let i = 0, length = coordinates.length; i !== length; i++) {\r\n            const y = coordinates[i];\r\n            if (y >= 0) {\r\n                for (let j = 0; j !== length; j++) {\r\n                    const x = coordinates[j];\r\n                    if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\r\n                        // If the cell is unset, we embed the position adjustment pattern here.\r\n                        // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\r\n                        // left top corner.\r\n                        MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/MatrixUtil.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.qrcode.encoder {*/\r\n\r\nexport default class BlockPair {\r\n\r\n    public constructor(private dataBytes: Uint8Array, private errorCorrectionBytes: Uint8Array) { }\r\n\r\n    public getDataBytes(): Uint8Array {\r\n        return this.dataBytes;\r\n    }\r\n\r\n    public getErrorCorrectionBytes(): Uint8Array {\r\n        return this.errorCorrectionBytes;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/qrcode/encoder/BlockPair.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DecodeHintType from './DecodeHintType';\r\nimport Reader from './Reader';\r\nimport Result from './Result';\r\nimport BinaryBitmap from './BinaryBitmap';\r\nimport BarcodeFormat from './BarcodeFormat';\r\nimport QRCodeReader from './qrcode/QRCodeReader';\r\nimport Exception from './Exception';\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\n/**\r\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\r\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\r\n * can provide a hints object to request different behavior, for example only decoding QR codes.\r\n *\r\n * @author Sean Owen\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class MultiFormatReader implements Reader {\r\n\r\n    private hints: Map<DecodeHintType, any> | null;\r\n    private readers: Reader[];\r\n\r\n    /**\r\n     * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\r\n     * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\r\n     * Use setHints() followed by decodeWithState() for continuous scan applications.\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @return The contents of the image\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    /*@Override*/\r\n    // public decode(image: BinaryBitmap): Result /*throws NotFoundException */ {\r\n    //   setHints(null)\r\n    //   return decodeInternal(image)\r\n    // }\r\n\r\n    /**\r\n     * Decode an image using the hints provided. Does not honor existing state.\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @param hints The hints to use, clearing the previous state.\r\n     * @return The contents of the image\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    /*@Override*/\r\n    public decode(image: BinaryBitmap, hints?: Map<DecodeHintType, any>): Result /*throws NotFoundException */ {\r\n        this.setHints(hints);\r\n        return this.decodeInternal(image);\r\n    }\r\n\r\n    /**\r\n     * Decode an image using the state set up by calling setHints() previously. Continuous scan\r\n     * clients will get a <b>large</b> speed increase by using this instead of decode().\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @return The contents of the image\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    public decodeWithState(image: BinaryBitmap): Result /*throws NotFoundException */ {\r\n        // Make sure to set up the default state so we don't crash\r\n        if (this.readers === null || this.readers === undefined) {\r\n            this.setHints(null);\r\n        }\r\n        return this.decodeInternal(image);\r\n    }\r\n\r\n    /**\r\n     * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\r\n     * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\r\n     * is important for performance in continuous scan clients.\r\n     *\r\n     * @param hints The set of hints to use for subsequent calls to decode(image)\r\n     */\r\n    public setHints(hints?: Map<DecodeHintType, any> | null): void {\r\n        this.hints = hints;\r\n\r\n        const tryHarder: boolean = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType.TRY_HARDER);\r\n        /*@SuppressWarnings(\"unchecked\")*/\r\n        const formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n        const readers = new Array<Reader>();\r\n        if (formats !== null && formats !== undefined) {\r\n            const addOneDReader: boolean =\r\n                formats.contains(BarcodeFormat.UPC_A) ||\r\n                formats.contains(BarcodeFormat.UPC_E) ||\r\n                formats.contains(BarcodeFormat.EAN_13) ||\r\n                formats.contains(BarcodeFormat.EAN_8) ||\r\n                formats.contains(BarcodeFormat.CODABAR) ||\r\n                formats.contains(BarcodeFormat.CODE_39) ||\r\n                formats.contains(BarcodeFormat.CODE_93) ||\r\n                formats.contains(BarcodeFormat.CODE_128) ||\r\n                formats.contains(BarcodeFormat.ITF) ||\r\n                formats.contains(BarcodeFormat.RSS_14) ||\r\n                formats.contains(BarcodeFormat.RSS_EXPANDED);\r\n            // Put 1D readers upfront in \"normal\" mode\r\n\r\n            // TYPESCRIPTPORT: TODO: uncomment below as they are ported\r\n\r\n            // if (addOneDReader && !tryHarder) {\r\n            //   readers.push(new MultiFormatOneDReader(hints))\r\n            // }\r\n            if (formats.contains(BarcodeFormat.QR_CODE)) {\r\n                readers.push(new QRCodeReader());\r\n            }\r\n            // if (formats.contains(BarcodeFormat.DATA_MATRIX)) {\r\n            //   readers.push(new DataMatrixReader())\r\n            // }\r\n            // if (formats.contains(BarcodeFormat.AZTEC)) {\r\n            //   readers.push(new AztecReader())\r\n            // }\r\n            // if (formats.contains(BarcodeFormat.PDF_417)) {\r\n            //    readers.push(new PDF417Reader())\r\n            // }\r\n            // if (formats.contains(BarcodeFormat.MAXICODE)) {\r\n            //    readers.push(new MaxiCodeReader())\r\n            // }\r\n            // // At end in \"try harder\" mode\r\n            // if (addOneDReader && tryHarder) {\r\n            //   readers.push(new MultiFormatOneDReader(hints))\r\n            // }\r\n        }\r\n        if (readers.length === 0) {\r\n            // if (!tryHarder) {\r\n            //   readers.push(new MultiFormatOneDReader(hints))\r\n            // }\r\n\r\n            readers.push(new QRCodeReader());\r\n            // readers.push(new DataMatrixReader())\r\n            // readers.push(new AztecReader())\r\n            // readers.push(new PDF417Reader())\r\n            // readers.push(new MaxiCodeReader())\r\n\r\n            // if (tryHarder) {\r\n            //   readers.push(new MultiFormatOneDReader(hints))\r\n            // }\r\n        }\r\n        this.readers = readers; // .toArray(new Reader[readers.size()])\r\n    }\r\n\r\n    /*@Override*/\r\n    public reset(): void {\r\n        if (this.readers !== null) {\r\n            for (let i = 0, length = this.readers.length; i !== length; i++) {\r\n                const reader = this.readers[i];\r\n                reader.reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    private decodeInternal(image: BinaryBitmap): Result /*throws NotFoundException */ {\r\n        if (this.readers !== null) {\r\n            for (let i = 0, length = this.readers.length; i !== length; i++) {\r\n                const reader = this.readers[i];\r\n                try {\r\n                    return reader.decode(image, this.hints);\r\n                } catch (re/*ReaderException*/) {\r\n                    // console.log(`Exception ${re.type} ${re.message}`)\r\n                    if (re.type === 'ReaderException') {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        throw new Exception(Exception.NotFoundException);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/MultiFormatReader.ts","/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport BitMatrix from './common/BitMatrix';\r\n// import DataMatrixWriter from './datamatrix/DataMatrixWriter'\r\n// import CodaBarWriter from './oned/CodaBarWriter'\r\n// import Code128Writer from './oned/Code128Writer'\r\n// import Code39Writer from './oned/Code39Writer'\r\n// import Code93Writer from './oned/Code93Writer'\r\n// import EAN13Writer from './oned/EAN13Writer'\r\n// import EAN8Writer from './oned/EAN8Writer'\r\n// import ITFWriter from './oned/ITFWriter'\r\n// import UPCAWriter from './oned/UPCAWriter'\r\n// import UPCEWriter from './oned/UPCEWriter'\r\n// import PDF417Writer from './pdf417/PDF417Writer'\r\nimport QRCodeWriter from './qrcode/QRCodeWriter';\r\nimport Writer from './Writer';\r\nimport BarcodeFormat from './BarcodeFormat';\r\nimport EncodeHintType from './EncodeHintType';\r\nimport Exception from './Exception';\r\n\r\n/*import java.util.Map;*/\r\n\r\n/**\r\n * This is a factory class which finds the appropriate Writer subclass for the BarcodeFormat\r\n * requested and encodes the barcode with the supplied contents.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class MultiFormatWriter implements Writer {\r\n\r\n    /*@Override*/\r\n    // public encode(contents: string,\r\n    //                         format: BarcodeFormat,\r\n    //                         width: number /*int*/,\r\n    //                         height: number /*int*/): BitMatrix /*throws WriterException */ {\r\n    //   return encode(contents, format, width, height, null)\r\n    // }\r\n\r\n    /*@Override*/\r\n    public encode(contents: string,\r\n        format: BarcodeFormat,\r\n        width: number /*int*/, height: number /*int*/,\r\n        hints: Map<EncodeHintType, any>): BitMatrix /*throws WriterException */ {\r\n\r\n        let writer: Writer;\r\n        switch (format) {\r\n            // case BarcodeFormat.EAN_8:\r\n            //   writer = new EAN8Writer()\r\n            //   break\r\n            // case BarcodeFormat.UPC_E:\r\n            //   writer = new UPCEWriter()\r\n            //   break\r\n            // case BarcodeFormat.EAN_13:\r\n            //   writer = new EAN13Writer()\r\n            //   break\r\n            // case BarcodeFormat.UPC_A:\r\n            //   writer = new UPCAWriter()\r\n            //   break\r\n            case BarcodeFormat.QR_CODE:\r\n                writer = new QRCodeWriter();\r\n                break;\r\n            // case BarcodeFormat.CODE_39:\r\n            //   writer = new Code39Writer()\r\n            //   break\r\n            // case BarcodeFormat.CODE_93:\r\n            //   writer = new Code93Writer()\r\n            //   break\r\n            // case BarcodeFormat.CODE_128:\r\n            //   writer = new Code128Writer()\r\n            //   break\r\n            // case BarcodeFormat.ITF:\r\n            //   writer = new ITFWriter()\r\n            //   break\r\n            // case BarcodeFormat.PDF_417:\r\n            //   writer = new PDF417Writer()\r\n            //   break\r\n            // case BarcodeFormat.CODABAR:\r\n            //   writer = new CodaBarWriter()\r\n            //   break\r\n            // case BarcodeFormat.DATA_MATRIX:\r\n            //   writer = new DataMatrixWriter()\r\n            //   break\r\n            // case BarcodeFormat.AZTEC:\r\n            //   writer = new AztecWriter()\r\n            //   break\r\n            default:\r\n                throw new Exception(Exception.IllegalArgumentException, 'No encoder available for format ' + format);\r\n        }\r\n        return writer.encode(contents, format, width, height, hints);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/MultiFormatWriter.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport System from './util/System';\r\nimport Exception from './Exception';\r\nimport LuminanceSource from './LuminanceSource';\r\nimport InvertedLuminanceSource from './InvertedLuminanceSource';\r\n\r\n/**\r\n * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\r\n * with the option to crop to a rectangle within the full data. This can be used to exclude\r\n * superfluous pixels around the perimeter and speed up decoding.\r\n *\r\n * It works for any pixel format where the Y channel is planar and appears first, including\r\n * YCbCr_420_SP and YCbCr_422_SP.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nexport default class PlanarYUVLuminanceSource extends LuminanceSource {\r\n\r\n    private static THUMBNAIL_SCALE_FACTOR: number /*int*/ = 2;\r\n\r\n    public constructor(private yuvData: Uint8ClampedArray,\r\n        private dataWidth: number /*int*/,\r\n        private dataHeight: number /*int*/,\r\n        private left: number /*int*/,\r\n        private top: number /*int*/,\r\n        width: number /*int*/,\r\n        height: number /*int*/,\r\n        reverseHorizontal: boolean) {\r\n        super(width, height);\r\n\r\n        if (left + width > dataWidth || top + height > dataHeight) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Crop rectangle does not fit within image data.');\r\n        }\r\n\r\n        if (reverseHorizontal) {\r\n            this.reverseHorizontal(width, height);\r\n        }\r\n    }\r\n\r\n    /*@Override*/\r\n    public getRow(y: number /*int*/, row?: Uint8ClampedArray): Uint8ClampedArray {\r\n        if (y < 0 || y >= this.getHeight()) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Requested row is outside the image: ' + y);\r\n        }\r\n        const width: number /*int*/ = this.getWidth();\r\n        if (row === null || row === undefined || row.length < width) {\r\n            row = new Uint8ClampedArray(width);\r\n        }\r\n        const offset = (y + this.top) * this.dataWidth + this.left;\r\n        System.arraycopy(this.yuvData, offset, row, 0, width);\r\n        return row;\r\n    }\r\n\r\n    /*@Override*/\r\n    public getMatrix(): Uint8ClampedArray {\r\n        const width: number /*int*/ = this.getWidth();\r\n        const height: number /*int*/ = this.getHeight();\r\n\r\n        // If the caller asks for the entire underlying image, save the copy and give them the\r\n        // original data. The docs specifically warn that result.length must be ignored.\r\n        if (width === this.dataWidth && height === this.dataHeight) {\r\n            return this.yuvData;\r\n        }\r\n\r\n        const area = width * height;\r\n        const matrix = new Uint8ClampedArray(area);\r\n        let inputOffset = this.top * this.dataWidth + this.left;\r\n\r\n        // If the width matches the full width of the underlying data, perform a single copy.\r\n        if (width === this.dataWidth) {\r\n            System.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\r\n            return matrix;\r\n        }\r\n\r\n        // Otherwise copy one cropped row at a time.\r\n        for (let y = 0; y < height; y++) {\r\n            const outputOffset = y * width;\r\n            System.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\r\n            inputOffset += this.dataWidth;\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public isCropSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /*@Override*/\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): LuminanceSource {\r\n        return new PlanarYUVLuminanceSource(this.yuvData,\r\n            this.dataWidth,\r\n            this.dataHeight,\r\n            this.left + left,\r\n            this.top + top,\r\n            width,\r\n            height,\r\n            false);\r\n    }\r\n\r\n    public renderThumbnail(): Int32Array {\r\n        const width: number /*int*/ = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\r\n        const height: number /*int*/ = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\r\n        const pixels = new Int32Array(width * height);\r\n        const yuv = this.yuvData;\r\n        let inputOffset = this.top * this.dataWidth + this.left;\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            const outputOffset = y * width;\r\n            for (let x = 0; x < width; x++) {\r\n                const grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\r\n                pixels[outputOffset + x] = 0xFF000000 | (grey * 0x00010101);\r\n            }\r\n            inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\r\n        }\r\n        return pixels;\r\n    }\r\n\r\n    /**\r\n     * @return width of image from {@link #renderThumbnail()}\r\n     */\r\n    public getThumbnailWidth(): number /*int*/ {\r\n        return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\r\n    }\r\n\r\n    /**\r\n     * @return height of image from {@link #renderThumbnail()}\r\n     */\r\n    public getThumbnailHeight(): number /*int*/ {\r\n        return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\r\n    }\r\n\r\n    private reverseHorizontal(width: number /*int*/, height: number /*int*/): void {\r\n        const yuvData = this.yuvData;\r\n        for (let y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++ , rowStart += this.dataWidth) {\r\n            const middle = rowStart + width / 2;\r\n            for (let x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++ , x2--) {\r\n                const temp = yuvData[x1];\r\n                yuvData[x1] = yuvData[x2];\r\n                yuvData[x2] = temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    public invert(): LuminanceSource {\r\n        return new InvertedLuminanceSource(this);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/PlanarYUVLuminanceSource.ts","/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing {*/\r\n\r\nimport './InvertedLuminanceSource'; // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\r\nimport InvertedLuminanceSource from './InvertedLuminanceSource';\r\nimport LuminanceSource from './LuminanceSource';\r\nimport Exception from './Exception';\r\nimport System from './util/System';\r\n\r\n/**\r\n * This class is used to help decode images from files which arrive as RGB data from\r\n * an ARGB pixel array. It does not support rotation.\r\n *\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n * @author Betaminos\r\n */\r\nexport default class RGBLuminanceSource extends LuminanceSource {\r\n\r\n    // public constructor(width: number /*int*/, height: number /*int*/, const pixels: Int32Array) {\r\n    //   super(width, height)\r\n\r\n    //   dataWidth = width\r\n    //   dataHeight = height\r\n    //   left = 0\r\n    //   top = 0\r\n\r\n    //   // In order to measure pure decoding speed, we convert the entire image to a greyscale array\r\n    //   // up front, which is the same as the Y channel of the YUVLuminanceSource in the real app.\r\n    //   //\r\n    //   // Total number of pixels suffices, can ignore shape\r\n    //   const size = width * height;\r\n    //   luminances = new byte[size]\r\n    //   for (let offset = 0; offset < size; offset++) {\r\n    //     const pixel = pixels[offset]\r\n    //     const r = (pixel >> 16) & 0xff; // red\r\n    //     const g2 = (pixel >> 7) & 0x1fe; // 2 * green\r\n    //     const b = pixel & 0xff; // blue\r\n    //     // Calculate green-favouring average cheaply\r\n    //     luminances[offset] = (byte) ((r + g2 + b) / 4)\r\n    //   }\r\n    // }\r\n\r\n    private luminances: Uint8ClampedArray;\r\n\r\n    public constructor(luminances: Uint8ClampedArray | Int32Array,\r\n        width: number /*int*/,\r\n        height: number /*int*/,\r\n        private dataWidth?: number /*int*/,\r\n        private dataHeight?: number /*int*/,\r\n        private left?: number /*int*/,\r\n        private top?: number /*int*/) {\r\n        super(width, height);\r\n\r\n        if (luminances.BYTES_PER_ELEMENT === 4) {// Int32Array\r\n            const size = width * height;\r\n            const luminancesUint8Array = new Uint8ClampedArray(size);\r\n            for (let offset = 0; offset < size; offset++) {\r\n                const pixel = luminances[offset];\r\n                const r = (pixel >> 16) & 0xff; // red\r\n                const g2 = (pixel >> 7) & 0x1fe; // 2 * green\r\n                const b = pixel & 0xff; // blue\r\n                // Calculate green-favouring average cheaply\r\n                luminancesUint8Array[offset] = /*(byte) */((r + g2 + b) / 4) & 0xFF;\r\n            }\r\n            this.luminances = luminancesUint8Array;\r\n        } else {\r\n            this.luminances = <Uint8ClampedArray>luminances;\r\n        }\r\n\r\n        if (undefined === dataWidth) {\r\n            this.dataWidth = width;\r\n        }\r\n        if (undefined === dataHeight) {\r\n            this.dataHeight = height;\r\n        }\r\n        if (undefined === left) {\r\n            this.left = 0;\r\n        }\r\n        if (undefined === top) {\r\n            this.top = 0;\r\n        }\r\n        if (this.left + width > this.dataWidth || this.top + height > this.dataHeight) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Crop rectangle does not fit within image data.');\r\n        }\r\n    }\r\n\r\n    /*@Override*/\r\n    public getRow(y: number /*int*/, row?: Uint8ClampedArray): Uint8ClampedArray {\r\n        if (y < 0 || y >= this.getHeight()) {\r\n            throw new Exception(Exception.IllegalArgumentException, 'Requested row is outside the image: ' + y);\r\n        }\r\n        const width = this.getWidth();\r\n        if (row === null || row === undefined || row.length < width) {\r\n            row = new Uint8ClampedArray(width);\r\n        }\r\n        const offset = (y + this.top) * this.dataWidth + this.left;\r\n        System.arraycopy(this.luminances, offset, row, 0, width);\r\n        return row;\r\n    }\r\n\r\n    /*@Override*/\r\n    public getMatrix(): Uint8ClampedArray {\r\n        const width = this.getWidth();\r\n        const height = this.getHeight();\r\n\r\n        // If the caller asks for the entire underlying image, save the copy and give them the\r\n        // original data. The docs specifically warn that result.length must be ignored.\r\n        if (width === this.dataWidth && height === this.dataHeight) {\r\n            return this.luminances;\r\n        }\r\n\r\n        const area = width * height;\r\n        const matrix = new Uint8ClampedArray(area);\r\n        let inputOffset = this.top * this.dataWidth + this.left;\r\n\r\n        // If the width matches the full width of the underlying data, perform a single copy.\r\n        if (width === this.dataWidth) {\r\n            System.arraycopy(this.luminances, inputOffset, matrix, 0, area);\r\n            return matrix;\r\n        }\r\n\r\n        // Otherwise copy one cropped row at a time.\r\n        for (let y = 0; y < height; y++) {\r\n            const outputOffset = y * width;\r\n            System.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\r\n            inputOffset += this.dataWidth;\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    /*@Override*/\r\n    public isCropSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /*@Override*/\r\n    public crop(left: number /*int*/, top: number /*int*/, width: number /*int*/, height: number /*int*/): LuminanceSource {\r\n        return new RGBLuminanceSource(this.luminances,\r\n            width,\r\n            height,\r\n            this.dataWidth,\r\n            this.dataHeight,\r\n            this.left + left,\r\n            this.top + top, );\r\n    }\r\n\r\n    public invert(): LuminanceSource {\r\n        return new InvertedLuminanceSource(this);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/RGBLuminanceSource.ts","/*\r\n * Copyright 2010 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*namespace com.google.zxing.common.detector {*/\r\n\r\nimport ResultPoint from './../../ResultPoint';\r\nimport BitMatrix from './../BitMatrix';\r\nimport Exception from './../../Exception';\r\nimport MathUtils from './MathUtils';\r\n\r\n/**\r\n * <p>\r\n * Detects a candidate barcode-like rectangular region within an image. It\r\n * starts around the center of the image, increases the size of the candidate\r\n * region until it finds a white rectangular region. By keeping track of the\r\n * last black points it encountered, it determines the corners of the barcode.\r\n * </p>\r\n *\r\n * @author David Olivier\r\n */\r\nexport default class WhiteRectangleDetector {\r\n\r\n    private static INIT_SIZE = 10;\r\n    private static CORR = 1;\r\n\r\n    private height: number; /*int*/\r\n    private width: number; /*int*/\r\n    private leftInit: number; /*int*/\r\n    private rightInit: number; /*int*/\r\n    private downInit: number; /*int*/\r\n    private upInit: number; /*int*/\r\n\r\n    // public constructor(private image: BitMatrix) /*throws NotFoundException*/ {\r\n    //   this(image, INIT_SIZE, image.getWidth() / 2, image.getHeight() / 2)\r\n    // }\r\n\r\n    /**\r\n     * @param image barcode image to find a rectangle in\r\n     * @param initSize initial size of search area around center\r\n     * @param x x position of search center\r\n     * @param y y position of search center\r\n     * @throws NotFoundException if image is too small to accommodate {@code initSize}\r\n     */\r\n    public constructor(private image: BitMatrix, initSize?: number /*int*/, x?: number /*int*/, y?: number /*int*/) /*throws NotFoundException*/ {\r\n        this.height = image.getHeight();\r\n        this.width = image.getWidth();\r\n        if (undefined === initSize || null === initSize) {\r\n            initSize = WhiteRectangleDetector.INIT_SIZE;\r\n        }\r\n        if (undefined === x || null === x) {\r\n            x = image.getWidth() / 2;\r\n        }\r\n        if (undefined === y || null === y) {\r\n            y = image.getHeight() / 2;\r\n        }\r\n        const halfsize = initSize / 2;\r\n        this.leftInit = x - halfsize;\r\n        this.rightInit = x + halfsize;\r\n        this.upInit = y - halfsize;\r\n        this.downInit = y + halfsize;\r\n        if (this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>\r\n     * Detects a candidate barcode-like rectangular region within an image. It\r\n     * starts around the center of the image, increases the size of the candidate\r\n     * region until it finds a white rectangular region.\r\n     * </p>\r\n     *\r\n     * @return {@link ResultPoint}[] describing the corners of the rectangular\r\n     *         region. The first and last points are opposed on the diagonal, as\r\n     *         are the second and third. The first point will be the topmost\r\n     *         point and the last, the bottommost. The second point will be\r\n     *         leftmost and the third, the rightmost\r\n     * @throws NotFoundException if no Data Matrix Code can be found\r\n     */\r\n    public detect(): Array<ResultPoint> /*throws NotFoundException*/ {\r\n\r\n        let left = this.leftInit;\r\n        let right = this.rightInit;\r\n        let up = this.upInit;\r\n        let down = this.downInit;\r\n        let sizeExceeded: boolean = false;\r\n        let aBlackPointFoundOnBorder: boolean = true;\r\n        let atLeastOneBlackPointFoundOnBorder: boolean = false;\r\n\r\n        let atLeastOneBlackPointFoundOnRight: boolean = false;\r\n        let atLeastOneBlackPointFoundOnBottom: boolean = false;\r\n        let atLeastOneBlackPointFoundOnLeft: boolean = false;\r\n        let atLeastOneBlackPointFoundOnTop: boolean = false;\r\n\r\n        const width = this.width;\r\n        const height = this.height;\r\n\r\n        while (aBlackPointFoundOnBorder) {\r\n\r\n            aBlackPointFoundOnBorder = false;\r\n\r\n            // .....\r\n            // .   |\r\n            // .....\r\n            let rightBorderNotWhite: boolean = true;\r\n            while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {\r\n                rightBorderNotWhite = this.containsBlackPoint(up, down, right, false);\r\n                if (rightBorderNotWhite) {\r\n                    right++;\r\n                    aBlackPointFoundOnBorder = true;\r\n                    atLeastOneBlackPointFoundOnRight = true;\r\n                } else if (!atLeastOneBlackPointFoundOnRight) {\r\n                    right++;\r\n                }\r\n            }\r\n\r\n            if (right >= width) {\r\n                sizeExceeded = true;\r\n                break;\r\n            }\r\n\r\n            // .....\r\n            // .   .\r\n            // .___.\r\n            let bottomBorderNotWhite: boolean = true;\r\n            while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {\r\n                bottomBorderNotWhite = this.containsBlackPoint(left, right, down, true);\r\n                if (bottomBorderNotWhite) {\r\n                    down++;\r\n                    aBlackPointFoundOnBorder = true;\r\n                    atLeastOneBlackPointFoundOnBottom = true;\r\n                } else if (!atLeastOneBlackPointFoundOnBottom) {\r\n                    down++;\r\n                }\r\n            }\r\n\r\n            if (down >= height) {\r\n                sizeExceeded = true;\r\n                break;\r\n            }\r\n\r\n            // .....\r\n            // |   .\r\n            // .....\r\n            let leftBorderNotWhite: boolean = true;\r\n            while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {\r\n                leftBorderNotWhite = this.containsBlackPoint(up, down, left, false);\r\n                if (leftBorderNotWhite) {\r\n                    left--;\r\n                    aBlackPointFoundOnBorder = true;\r\n                    atLeastOneBlackPointFoundOnLeft = true;\r\n                } else if (!atLeastOneBlackPointFoundOnLeft) {\r\n                    left--;\r\n                }\r\n            }\r\n\r\n            if (left < 0) {\r\n                sizeExceeded = true;\r\n                break;\r\n            }\r\n\r\n            // .___.\r\n            // .   .\r\n            // .....\r\n            let topBorderNotWhite: boolean = true;\r\n            while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {\r\n                topBorderNotWhite = this.containsBlackPoint(left, right, up, true);\r\n                if (topBorderNotWhite) {\r\n                    up--;\r\n                    aBlackPointFoundOnBorder = true;\r\n                    atLeastOneBlackPointFoundOnTop = true;\r\n                } else if (!atLeastOneBlackPointFoundOnTop) {\r\n                    up--;\r\n                }\r\n            }\r\n\r\n            if (up < 0) {\r\n                sizeExceeded = true;\r\n                break;\r\n            }\r\n\r\n            if (aBlackPointFoundOnBorder) {\r\n                atLeastOneBlackPointFoundOnBorder = true;\r\n            }\r\n\r\n        }\r\n\r\n        if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {\r\n\r\n            const maxSize = right - left;\r\n\r\n            let z: ResultPoint | null = null;\r\n            for (let i = 1; z === null && i < maxSize; i++) {\r\n                z = this.getBlackPointOnSegment(left, down - i, left + i, down);\r\n            }\r\n\r\n            if (z == null) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            let t: ResultPoint | null = null;\r\n            // go down right\r\n            for (let i = 1; t === null && i < maxSize; i++) {\r\n                t = this.getBlackPointOnSegment(left, up + i, left + i, up);\r\n            }\r\n\r\n            if (t == null) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            let x: ResultPoint | null = null;\r\n            // go down left\r\n            for (let i = 1; x === null && i < maxSize; i++) {\r\n                x = this.getBlackPointOnSegment(right, up + i, right - i, up);\r\n            }\r\n\r\n            if (x == null) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            let y: ResultPoint | null = null;\r\n            // go up left\r\n            for (let i = 1; y === null && i < maxSize; i++) {\r\n                y = this.getBlackPointOnSegment(right, down - i, right - i, down);\r\n            }\r\n\r\n            if (y == null) {\r\n                throw new Exception(Exception.NotFoundException);\r\n            }\r\n\r\n            return this.centerEdges(y, z, x, t);\r\n\r\n        } else {\r\n            throw new Exception(Exception.NotFoundException);\r\n        }\r\n    }\r\n\r\n    private getBlackPointOnSegment(aX: number/*float*/, aY: number/*float*/, bX: number/*float*/, bY: number/*float*/): ResultPoint | null {\r\n        const dist = MathUtils.round(MathUtils.distance(aX, aY, bX, bY));\r\n        const xStep: number /*float*/ = (bX - aX) / dist;\r\n        const yStep: number /*float*/ = (bY - aY) / dist;\r\n\r\n        const image = this.image;\r\n\r\n        for (let i = 0; i < dist; i++) {\r\n            const x = MathUtils.round(aX + i * xStep);\r\n            const y = MathUtils.round(aY + i * yStep);\r\n            if (image.get(x, y)) {\r\n                return new ResultPoint(x, y);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * recenters the points of a constant distance towards the center\r\n     *\r\n     * @param y bottom most point\r\n     * @param z left most point\r\n     * @param x right most point\r\n     * @param t top most point\r\n     * @return {@link ResultPoint}[] describing the corners of the rectangular\r\n     *         region. The first and last points are opposed on the diagonal, as\r\n     *         are the second and third. The first point will be the topmost\r\n     *         point and the last, the bottommost. The second point will be\r\n     *         leftmost and the third, the rightmost\r\n     */\r\n    private centerEdges(y: ResultPoint, z: ResultPoint,\r\n        x: ResultPoint, t: ResultPoint): Array<ResultPoint> {\r\n\r\n        //\r\n        //       t            t\r\n        //  z                      x\r\n        //        x    OR    z\r\n        //   y                    y\r\n        //\r\n\r\n        const yi: number /*float*/ = y.getX();\r\n        const yj: number /*float*/ = y.getY();\r\n        const zi: number /*float*/ = z.getX();\r\n        const zj: number /*float*/ = z.getY();\r\n        const xi: number /*float*/ = x.getX();\r\n        const xj: number /*float*/ = x.getY();\r\n        const ti: number /*float*/ = t.getX();\r\n        const tj: number /*float*/ = t.getY();\r\n\r\n        const CORR = WhiteRectangleDetector.CORR;\r\n\r\n        if (yi < this.width / 2.0) {\r\n            return [\r\n                new ResultPoint(ti - CORR, tj + CORR),\r\n                new ResultPoint(zi + CORR, zj + CORR),\r\n                new ResultPoint(xi - CORR, xj - CORR),\r\n                new ResultPoint(yi + CORR, yj - CORR)];\r\n        } else {\r\n            return [\r\n                new ResultPoint(ti + CORR, tj + CORR),\r\n                new ResultPoint(zi + CORR, zj - CORR),\r\n                new ResultPoint(xi - CORR, xj + CORR),\r\n                new ResultPoint(yi - CORR, yj - CORR)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether a segment contains a black point\r\n     *\r\n     * @param a          min value of the scanned coordinate\r\n     * @param b          max value of the scanned coordinate\r\n     * @param fixed      value of fixed coordinate\r\n     * @param horizontal set to true if scan must be horizontal, false if vertical\r\n     * @return true if a black point has been found, else false.\r\n     */\r\n    private containsBlackPoint(a: number /*int*/, b: number /*int*/, fixed: number /*int*/, horizontal: boolean): boolean {\r\n\r\n        const image = this.image;\r\n\r\n        if (horizontal) {\r\n            for (let x = a; x <= b; x++) {\r\n                if (image.get(x, fixed)) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            for (let y = a; y <= b; y++) {\r\n                if (image.get(fixed, y)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/common/detector/WhiteRectangleDetector.ts"],"sourceRoot":""}